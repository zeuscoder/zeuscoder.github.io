[{"title":"WEB：Audio 音频基础","url":"/2021/06/27/web-audio/","content":"<p>Web Audio API (AduioContext) 实在太多了，当然玩起来也会很有趣。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/images/web-audio/audio.jpeg\" alt=\"PCM\"></p>\n<h2 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h2><p>声音：根据初中物理知识，声音是由物体振动产生的__声波__，通过介质（空气或固体、液体）传播，被人或动物听觉器官所感知的波动现象。气压的变化会产生声音信号，声音是一种波。人的耳朵可以听到20<del>20000Hz的声音，最敏感是200</del>800Hz之间的声音，蚊子挥动翅膀的频率刚好就在 600Hz 左右（频率越高音调 pitch 或 key 越高）。</p>\n<p>我们可以测量压力变化的强度，并绘制随时间变化的测量值。其中音频采样，是把声音从模拟信号转换为数字信号，所得的被称为 <code>PCM</code> 。</p>\n<p><img src=\"/images/web-audio/audio-steps.png\" alt=\"PCM\"></p>\n<ul>\n<li>模拟信号：通常指连续的物理量，例如温度、湿度、速度、光照、声响等</li>\n<li>数字信号：通常是模拟信号经过采样、量化和编码等几个步骤后得到的</li>\n</ul>\n<h2 id=\"PCM\"><a href=\"#PCM\" class=\"headerlink\" title=\"PCM\"></a>PCM</h2><p> <code>PCM</code> (脉冲编码调制）有<a href=\"https://www.cnblogs.com/yongdaimi/p/10722355.html\">三要素</a>：声道数（channel number）、采样率（sample rate）、采样位数或位深（bit depth）。</p>\n<p><img src=\"/images/web-audio/pcm.png\" alt=\"PCM\"></p>\n<blockquote>\n<p>PCM 是一种编码格式，WAV 是一种文件格式。</p>\n</blockquote>\n<h3 id=\"声道数\"><a href=\"#声道数\" class=\"headerlink\" title=\"声道数\"></a>声道数</h3><p>声道数，常见的声道（喇叭数量）类型：</p>\n<ul>\n<li>单声道：Mono，单喇叭或者两个喇叭输出同一个声道的声音（<strong>在线 ASR 录音用的是单声道</strong>）</li>\n<li>双声道：Stereo，分左声道和右声道，更加有空间效果</li>\n</ul>\n<p><img src=\"/images/web-audio/channel.png\" alt=\"双声道\"></p>\n<h3 id=\"采样率\"><a href=\"#采样率\" class=\"headerlink\" title=\"采样率\"></a>采样率</h3><p>采样率：每秒对声音进行采集的次数，同样也是所得的数字信号的每秒样本数，单位为 Hz。<strong>采样率越高，声音的质量就越好，声音的还原就越真实越自然。</strong></p>\n<p>当然人耳对频率识别范围有限，超过 48k 的采样率意义不大，一般 20k 可以满足， <strong>22050 Hz</strong> 为常用的采样频率。</p>\n<ul>\n<li>采样率：数字音频系统记录声音信号时每秒采集的数据个数</li>\n<li>声音频率：物体每秒的震动频率</li>\n</ul>\n<blockquote>\n<p><a href=\"https://www.zhihu.com/question/27644914\">声音频率和采样率的区别</a>：其实它们之间没有直接关系，不是同一回事。</p>\n</blockquote>\n<p><img src=\"/images/web-audio/sample-rate.png\" alt=\"采样率\"></p>\n<h3 id=\"采样位数\"><a href=\"#采样位数\" class=\"headerlink\" title=\"采样位数\"></a>采样位数</h3><p>采样位数：采样后，将采样的单个样本进行量化，用来衡量声音波动变化的一个参数，也可以说是声卡的分辨率。<strong>它的数值越大，分辨率也就越高，所发出声音的能力就越强，声音越好。</strong></p>\n<p>n-bit 指的是声音的强度（振幅）被均分为 2^n 级，常用的有 8bit（1字节）、<code>16bit（2字节）</code>、32bit（4字节）。振幅越大，音量越大。</p>\n<p>在把量化所得的结果，即单个声道的样本，以<code>二进制</code>的码字进行存放。</p>\n<blockquote>\n<p>B for Byte (字节)， b for bit（位）。1 Byte &#x3D; 8 bit</p>\n</blockquote>\n<p><img src=\"/images/web-audio/bit-depth.png\" alt=\"采样位数\"></p>\n<h3 id=\"比特率\"><a href=\"#比特率\" class=\"headerlink\" title=\"比特率\"></a>比特率</h3><p>比特率：每秒的传输速率，单位为 bps。</p>\n<p>采样率为 16khz，位深为 16 bit，单声道的比特率为 <code>16000 * 16 * 1 = 256000 b/s（比特/秒）</code>，转化为字节 <code>256000 / 8 = 32000 B/s（字节/秒）</code>。</p>\n<blockquote>\n<p>通常说的 10M 带宽为 10Mbps（这里是比特），下载速率为 10M &#x2F; 8 &#x3D; 1.25 MB&#x2F;s（这里是字节）</p>\n</blockquote>\n<h2 id=\"音频采集\"><a href=\"#音频采集\" class=\"headerlink\" title=\"音频采集\"></a>音频采集</h2><p>讲述完 PCM 的基础概念后，开始谈谈如何通过浏览器实现音频采集。</p>\n<h3 id=\"getUserMedia\"><a href=\"#getUserMedia\" class=\"headerlink\" title=\"getUserMedia\"></a>getUserMedia</h3><p>实现媒体音频采集的是 <code>WebRTC</code> 技术，使用的方法是 <code>navigator.mediaDevices.getUserMedia()</code>，需要做低版本兼容。麦克风或摄像头的启用涉及到安全隐私，通常网页中会有弹框提示，用户确认后才可启用相关功能，调用成功后，回调函数中就可以得到<strong>多媒体流对象</strong>，后续的工作就是围绕这个<code>媒体流(MediaStream)</code>展开的。</p>\n<p><img src=\"/images/web-audio/web-audio-api.png\" alt=\"wav-audio-api\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">navigator.<span class=\"property\">mediaDevices</span>.<span class=\"title function_\">getUserMedia</span>(&#123;<span class=\"attr\">audio</span>:<span class=\"literal\">true</span>&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">mediaStream</span>=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// audioInput 表示音频源节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> audioInput = audioContext.<span class=\"title function_\">createMediaStreamSource</span>(stream);</span><br><span class=\"line\">    <span class=\"comment\">// scriptProcessorNode 为关键节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> recorder = audioContext.<span class=\"title function_\">createScriptProcessor</span>(<span class=\"number\">4096</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 音频采集，每采集完样本帧预设数值（4096）后会触发 onaudioprocess 接口一次</span></span><br><span class=\"line\">    recorder.<span class=\"property\">onaudioprocess</span> = <span class=\"function\">(<span class=\"params\">e: &#123;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      inputBuffer: AudioBuffer;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">      outputBuffer: AudioBuffer;</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 核心：处理 AudioBuffer 逻辑，假设是单声道</span></span><br><span class=\"line\">      <span class=\"title function_\">encodePCM</span>(<span class=\"title function_\">compress</span>(e.<span class=\"property\">inputBuffer</span>.<span class=\"title function_\">getChannelData</span>(<span class=\"number\">0</span>)))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    audioInput.<span class=\"title function_\">connect</span>(recorder);</span><br><span class=\"line\">    recorder.<span class=\"title function_\">connect</span>(audioContext.<span class=\"property\">destination</span>);</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>核心过程：</p>\n<ol>\n<li><p>通过 createMediaStreamSource 方法创建 MediaStreamAudioSourceNode 音频源节点</p>\n</li>\n<li><p>通过 createScriptProcessor 方法创建 scriptProcessorNode 脚本处理节点</p>\n</li>\n<li><p>通过 scriptProcessorNode 节点的 onaudioprocess 回调函数<strong>处理音频逻辑</strong></p>\n</li>\n</ol>\n<h4 id=\"AudioBuffer\"><a href=\"#AudioBuffer\" class=\"headerlink\" title=\"AudioBuffer\"></a><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/AudioBuffer\">AudioBuffer</a></h4><p>AudioBuffer接口表示存在内存里的一段短小的音频资源。缓存区（buffer）包含以下数据：不间断的 IEEE754 32 位线性PCM，从-1到1的范围额定，就是说，32位的浮点缓存区的每个样本在-1.0到1.0之间。</p>\n<h4 id=\"采样率的转写\"><a href=\"#采样率的转写\" class=\"headerlink\" title=\"采样率的转写\"></a>采样率的转写</h4><p>音频是由浏览器采样率（一般为 48k）采集的，需要进行转写为我们真正需要的采样率（假设 16k），只支持由高转低，<strong>具体为按照输入采样率和输出采样率的比例，每隔比例位数取1位</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 根据输入和输出的采样率压缩数据，</span></span><br><span class=\"line\"><span class=\"comment\"> * 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，</span></span><br><span class=\"line\"><span class=\"comment\"> * 所以输入数据中每隔3取1位</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">float32array</span>&#125; data       [-1, 1]的pcm数据</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; inputSampleRate  输入采样率</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">number</span>&#125; outputSampleRate 输出采样率</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@returns</span>  &#123;<span class=\"type\">float32array</span>&#125;         压缩处理后的二进制数据</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">interleave</span>(<span class=\"params\">data: <span class=\"built_in\">Float32Array</span>, inputSampleRate: number, outputSampleRate: number</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> t = data.<span class=\"property\">length</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> s = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> o = inputSampleRate / outputSampleRate;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> u = <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>((t * outputSampleRate) / inputSampleRate);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Float32Array</span>(u);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; u; i++) &#123;</span><br><span class=\"line\">      a[i] = data[<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(s)];</span><br><span class=\"line\">      s += o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"位深的转写\"><a href=\"#位深的转写\" class=\"headerlink\" title=\"位深的转写\"></a>位深的转写</h4><p>采样率的问题解决完，还需要将音频流转为对应位深，生成长度为（位深&#x2F;8 * 音频原长度）的 Uint8Array。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// bit reduce and convert to integer</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">bytesPerSample</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"comment\">// 32 bits signed</span></span><br><span class=\"line\">    sample = sample * <span class=\"number\">2147483647.5</span> - <span class=\"number\">0.5</span>;</span><br><span class=\"line\">    reducedData[outputIndex] = sample;</span><br><span class=\"line\">    <span class=\"comment\">// tslint:disable-next-line:no-bitwise</span></span><br><span class=\"line\">    reducedData[outputIndex + <span class=\"number\">1</span>] = sample &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"comment\">// tslint:disable-next-line:no-bitwise</span></span><br><span class=\"line\">    reducedData[outputIndex + <span class=\"number\">2</span>] = sample &gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"comment\">// tslint:disable-next-line:no-bitwise</span></span><br><span class=\"line\">    reducedData[outputIndex + <span class=\"number\">3</span>] = sample &gt;&gt; <span class=\"number\">24</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"comment\">// 24 bits signed</span></span><br><span class=\"line\">    sample = sample * <span class=\"number\">8388607.5</span> - <span class=\"number\">0.5</span>;</span><br><span class=\"line\">    reducedData[outputIndex] = sample;</span><br><span class=\"line\">    <span class=\"comment\">// tslint:disable-next-line:no-bitwise</span></span><br><span class=\"line\">    reducedData[outputIndex + <span class=\"number\">1</span>] = sample &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"comment\">// tslint:disable-next-line:no-bitwise</span></span><br><span class=\"line\">    reducedData[outputIndex + <span class=\"number\">2</span>] = sample &gt;&gt; <span class=\"number\">16</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"comment\">// 16 bits signed</span></span><br><span class=\"line\">    sample = sample * <span class=\"number\">32767.5</span> - <span class=\"number\">0.5</span>;</span><br><span class=\"line\">    reducedData[outputIndex] = sample;</span><br><span class=\"line\">    <span class=\"comment\">// tslint:disable-next-line:no-bitwise</span></span><br><span class=\"line\">    reducedData[outputIndex + <span class=\"number\">1</span>] = sample &gt;&gt; <span class=\"number\">8</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"comment\">// 8 bits unsigned</span></span><br><span class=\"line\">    reducedData[outputIndex] = (sample + <span class=\"number\">1</span>) * <span class=\"number\">127.5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HTTPS-vs-HTTP\"><a href=\"#HTTPS-vs-HTTP\" class=\"headerlink\" title=\"HTTPS vs HTTP\"></a>HTTPS vs HTTP</h3><p>获取麦克风权限时需要 https 协议下验证，如何能在 http 网站情况下也可以获取<a href=\"https://support.scandit.com/hc/en-us/articles/360002743551-Do-I-really-need-to-serve-my-site-with-https-\">权限</a>。</p>\n<blockquote>\n<p>chrome:&#x2F;&#x2F;flags&#x2F;#unsafely-treat-insecure-origin-as-secure</p>\n</blockquote>\n<p>本地服务 iOS wss 连接断开问题，<a href=\"https://stackoverflow.com/questions/37898048/websocket-network-error-osstatus-error-9807-invalid-certificate-chain/42148960\">需要开启指定的新特性</a></p>\n<blockquote>\n<p>Settings（设置） &gt; Safari &gt; Advanced（高级） &gt; Experimental Features &gt; NSURLSession Websocket</p>\n</blockquote>\n<h3 id=\"设备兼容情况\"><a href=\"#设备兼容情况\" class=\"headerlink\" title=\"设备兼容情况\"></a>设备兼容情况</h3><p>Android WebView 和 Chrome 支持程度较好，Mac 和 iOS Safari 支持系统版本 11 及以上，<strong>iOS WKWebView 支持系统版本 14.3 及以上（iOS 微信内置浏览器和小程序 web-view 使用的是 WKWebView）</strong>。</p>\n<p><img src=\"/images/web-audio/getUserMedia.jpeg\" alt=\"getUserMedia\"></p>\n<h2 id=\"音频播放\"><a href=\"#音频播放\" class=\"headerlink\" title=\"音频播放\"></a>音频播放</h2><p>下一步，需要了解采集后得到的 PCM 是如何播放：PCM 是无法直接播放的，需要给 PCM <strong>添加 wav 头部</strong>，才能通过 AudioContext 转换为 AudioBuffer 播放。</p>\n<h3 id=\"转换\"><a href=\"#转换\" class=\"headerlink\" title=\"转换\"></a>转换</h3><p>wav 格式是一种无损格式，是依据规范在 pcm 数据前添加 <strong>44</strong> 个__字节__长度用来填充一些声明信息的。wav 头部有 44 个字节，具体对应如下：</p>\n<p><img src=\"/images/web-audio/wav-header.png\" alt=\"wav 头部\"></p>\n<details>\n<summary>如何添加 wav 头部代码</summary>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">public <span class=\"title function_\">generateWavHeader</span>(<span class=\"attr\">options</span>: <span class=\"title class_\">IWavHeaderOptions</span>): <span class=\"title class_\">ArrayBuffer</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    numFrames = originArrayBuffer.<span class=\"property\">byteLength</span>, <span class=\"comment\">// originArrayBuffer 为源 PCM</span></span><br><span class=\"line\">    numChannels = <span class=\"number\">1</span>,</span><br><span class=\"line\">    sampleRate = <span class=\"number\">16000</span>,</span><br><span class=\"line\">    bytesPerSample = <span class=\"number\">2</span></span><br><span class=\"line\">  &#125; = options;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> blockAlign = numChannels * bytesPerSample;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> byteRate = sampleRate * blockAlign;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> chunkSize = (numFrames <span class=\"keyword\">as</span> number) * blockAlign;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBuffer</span>(<span class=\"number\">44</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> dataview = <span class=\"keyword\">new</span> <span class=\"title class_\">DataView</span>(buffer);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> position = <span class=\"number\">0</span>;</span><br><span class=\"line\">  position = <span class=\"variable language_\">this</span>.<span class=\"title function_\">dataviewWriteString</span>(dataview, <span class=\"string\">&#x27;RIFF&#x27;</span>, position); <span class=\"comment\">// ChunkID</span></span><br><span class=\"line\">  position = <span class=\"variable language_\">this</span>.<span class=\"title function_\">dataviewWriteUint32</span>(dataview, chunkSize + <span class=\"number\">36</span>, position); <span class=\"comment\">// ChunkSize</span></span><br><span class=\"line\">  position = <span class=\"variable language_\">this</span>.<span class=\"title function_\">dataviewWriteString</span>(dataview, <span class=\"string\">&#x27;WAVE&#x27;</span>, position); <span class=\"comment\">// Format</span></span><br><span class=\"line\">  position = <span class=\"variable language_\">this</span>.<span class=\"title function_\">dataviewWriteString</span>(dataview, <span class=\"string\">&#x27;fmt &#x27;</span>, position); <span class=\"comment\">// Subchunk1ID</span></span><br><span class=\"line\">  position = <span class=\"variable language_\">this</span>.<span class=\"title function_\">dataviewWriteUint32</span>(dataview, <span class=\"number\">16</span>, position); <span class=\"comment\">// Subchunk1Size</span></span><br><span class=\"line\">  position = <span class=\"variable language_\">this</span>.<span class=\"title function_\">dataviewWriteUint16</span>(dataview, <span class=\"number\">1</span>, position); <span class=\"comment\">// AudioFormat</span></span><br><span class=\"line\">  position = <span class=\"variable language_\">this</span>.<span class=\"title function_\">dataviewWriteUint16</span>(dataview, numChannels, position); <span class=\"comment\">// NumChannels</span></span><br><span class=\"line\">  position = <span class=\"variable language_\">this</span>.<span class=\"title function_\">dataviewWriteUint32</span>(dataview, sampleRate, position); <span class=\"comment\">// SampleRate</span></span><br><span class=\"line\">  position = <span class=\"variable language_\">this</span>.<span class=\"title function_\">dataviewWriteUint32</span>(dataview, byteRate, position); <span class=\"comment\">// ByteRate</span></span><br><span class=\"line\">  position = <span class=\"variable language_\">this</span>.<span class=\"title function_\">dataviewWriteUint16</span>(dataview, blockAlign, position); <span class=\"comment\">// BlockAlign</span></span><br><span class=\"line\">  position = <span class=\"variable language_\">this</span>.<span class=\"title function_\">dataviewWriteUint16</span>(dataview, bytesPerSample * <span class=\"number\">8</span>, position); <span class=\"comment\">// BitsPerSample</span></span><br><span class=\"line\">  position = <span class=\"variable language_\">this</span>.<span class=\"title function_\">dataviewWriteString</span>(dataview, <span class=\"string\">&#x27;data&#x27;</span>, position); <span class=\"comment\">// Subchunk2ID</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">dataviewWriteUint32</span>(dataview, chunkSize, position); <span class=\"comment\">//  Subchunk2Size</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> buffer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public <span class=\"title function_\">concatArrayBuffer</span>(...<span class=\"attr\">buffers</span>: <span class=\"title class_\">ArrayBuffer</span>[]): <span class=\"title class_\">ArrayBuffer</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newBufferLength = buffers.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">total, buffer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    total += buffer.<span class=\"property\">byteLength</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> newBuffer = <span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(newBufferLength);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> bufferIndex = <span class=\"number\">0</span>;</span><br><span class=\"line\">  buffers.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">buffer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    newBuffer.<span class=\"title function_\">set</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Uint8Array</span>(buffer), bufferIndex);</span><br><span class=\"line\">    bufferIndex += buffer.<span class=\"property\">byteLength</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> newBuffer.<span class=\"property\">buffer</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private <span class=\"title function_\">dataviewWriteString</span>(</span><br><span class=\"line\">  <span class=\"attr\">dataview</span>: <span class=\"title class_\">DataView</span>,</span><br><span class=\"line\">  <span class=\"attr\">str</span>: string,</span><br><span class=\"line\">  <span class=\"attr\">position</span>: number</span><br><span class=\"line\">): number &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; str.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    dataview.<span class=\"title function_\">setUint8</span>(position + i, str.<span class=\"title function_\">charCodeAt</span>(i));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  position += str.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> position;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private <span class=\"title function_\">dataviewWriteUint32</span>(</span><br><span class=\"line\">  <span class=\"attr\">dataview</span>: <span class=\"title class_\">DataView</span>,</span><br><span class=\"line\">  <span class=\"attr\">num</span>: number,</span><br><span class=\"line\">  <span class=\"attr\">position</span>: number</span><br><span class=\"line\">): number &#123;</span><br><span class=\"line\">  dataview.<span class=\"title function_\">setUint32</span>(position, num, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  position += <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> position;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private <span class=\"title function_\">dataviewWriteUint16</span>(</span><br><span class=\"line\">  <span class=\"attr\">dataview</span>: <span class=\"title class_\">DataView</span>,</span><br><span class=\"line\">  <span class=\"attr\">num</span>: number,</span><br><span class=\"line\">  <span class=\"attr\">position</span>: number</span><br><span class=\"line\">): number &#123;</span><br><span class=\"line\">  dataview.<span class=\"title function_\">setUint16</span>(position, num, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  position += <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> position;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</details>\n\n<p>通过浏览器打印日志或者通过记事本打开 WAV 格式的音频 可以发现：</p>\n<p><img src=\"/images/web-audio/arrayBuffer.png\" alt=\"wav 头部\"></p>\n<p>WAV文件格式的结构组成，对该内容进行分析如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">52</span> <span class=\"number\">49</span> <span class=\"number\">46</span> <span class=\"number\">46</span>（<span class=\"title class_\">ChunkID</span>，<span class=\"number\">4</span> 字节） = ‘<span class=\"variable constant_\">RIFF</span>’</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">24</span> <span class=\"number\">42</span> <span class=\"number\">04</span> <span class=\"number\">00</span> （<span class=\"title class_\">ChunkSize</span>，<span class=\"number\">4</span> 字节）=  <span class=\"number\">279076</span>  = <span class=\"number\">279084</span> - <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">57</span> <span class=\"number\">41</span> <span class=\"number\">56</span> <span class=\"number\">45</span> （<span class=\"title class_\">Format</span>，<span class=\"number\">4</span> 字节） = ‘<span class=\"variable constant_\">WAVE</span>’</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">66</span> 6D <span class=\"number\">74</span> <span class=\"number\">20</span> （<span class=\"title class_\">Subchunk1ID</span>，<span class=\"number\">4</span> 字节） = ‘fmt ’</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">00</span> <span class=\"number\">00</span> <span class=\"number\">00</span> (<span class=\"title class_\">Subchunk1</span> <span class=\"title class_\">Size</span>，<span class=\"number\">4</span> 字节) = <span class=\"number\">16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">01</span> <span class=\"number\">00</span>（<span class=\"title class_\">AudioFormate</span>，<span class=\"number\">2</span> 字节） = 音频格式 = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">01</span> <span class=\"number\">00</span> （<span class=\"title class_\">NumChannels</span>，<span class=\"number\">2</span> 字节）= 声道数 = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">80</span> 3E <span class=\"number\">00</span> <span class=\"number\">00</span>（<span class=\"title class_\">SampleRate</span>，<span class=\"number\">4</span> 字节）= 采样率 = <span class=\"number\">16000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00</span> 7D <span class=\"number\">00</span> <span class=\"number\">00</span>（<span class=\"title class_\">ByteRate</span>，<span class=\"number\">4</span> 字节）= 字节率 = <span class=\"number\">32000</span> = <span class=\"number\">16000</span> * <span class=\"number\">16</span> / <span class=\"number\">8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">02</span> <span class=\"number\">00</span> （<span class=\"title class_\">BlockAlign</span>，<span class=\"number\">2</span> 字节）= 内存对齐 = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10</span> <span class=\"number\">00</span> （<span class=\"title class_\">BitsPerSample</span>）= 每个样本的位深度 =  <span class=\"number\">16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">64</span> <span class=\"number\">61</span> <span class=\"number\">74</span> <span class=\"number\">61</span>（<span class=\"title class_\">Subchunk2ID</span>，<span class=\"number\">4</span> 字节） = ‘data’</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">00</span> <span class=\"number\">42</span> <span class=\"number\">04</span> <span class=\"number\">00</span> (<span class=\"title class_\">Subchunk2</span> <span class=\"title class_\">Size</span>，<span class=\"number\">4</span> 字节) = 音频<span class=\"variable constant_\">PCM</span>数据大小 = <span class=\"number\">279040</span> = <span class=\"number\">279084</span> - <span class=\"number\">44</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/web-audio/wav-header-detail.jpeg\" alt=\"wav 头部分析\"></p>\n<p>可以通过 <code>file</code> 命令查看 wav 头部简要信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$file</span> test.wav</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/web-audio/wav-file-detail.png\" alt=\"wav-file\"></p>\n<h3 id=\"解码-decode\"><a href=\"#解码-decode\" class=\"headerlink\" title=\"解码(decode)\"></a>解码(decode)</h3><p>通过 <code>AudioContext</code> 的 <code>decodeAudioData</code> API 解码 wav 文件中的 ArrayBuffer，转换为 Audiobuffer。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">playWav</span>(<span class=\"params\">wavBuffer: <span class=\"built_in\">ArrayBuffer</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">AudioContext</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">AudioContext</span> || <span class=\"variable language_\">window</span>.<span class=\"property\">webkitAudioContext</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> audioCtx = <span class=\"keyword\">new</span> <span class=\"title class_\">AudioContext</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Safari 不支持 decodeAudioData promise 模式</span></span><br><span class=\"line\">  audioCtx.<span class=\"title function_\">decodeAudioData</span>(</span><br><span class=\"line\">    wavBuffer,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">audioBuffer</span>) =&gt;</span> &#123;&#125;,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;&#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"降噪（消除毛刺）\"><a href=\"#降噪（消除毛刺）\" class=\"headerlink\" title=\"降噪（消除毛刺）\"></a>降噪（消除毛刺）</h3><p>播放短小的 Audiobuffer 时开始和结束可能会有细微的噪音出现，其中<a href=\"https://stackoverflow.com/questions/53100047/why-state-can-be-invalid-in-web-audio-in-safari-after-resume\">降噪</a>的方法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deNoising</span>(<span class=\"params\">buffer: AudioBuffer</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fixRange = <span class=\"number\">100</span>; <span class=\"comment\">// 该数值根据情况调整</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> audioBufferArray = buffer.<span class=\"title function_\">getChannelData</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> length = audioBufferArray.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; fixRange; i++) &#123;</span><br><span class=\"line\">    audioBufferArray[i] = (audioBufferArray[i] * i) / fixRange; <span class=\"comment\">// fade in</span></span><br><span class=\"line\">    audioBufferArray[length - i - <span class=\"number\">1</span>] =</span><br><span class=\"line\">      (audioBufferArray[length - i - <span class=\"number\">1</span>] * i) / fixRange; <span class=\"comment\">// fade out</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"播放\"><a href=\"#播放\" class=\"headerlink\" title=\"播放\"></a>播放</h3><p>通过 createBufferSource() 方法用于创建一个新的 <code>AudioBufferSourceNode</code> 接口, 该接口可以通过 AudioBuffer 对象来播放音频数据。再连接到 AudioContext 中所有音频（节点）的最终目标节点，一般是音频渲染设备，比如扬声器。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">play</span>(<span class=\"params\">buffer: AudioBuffer</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title class_\">AudioContext</span> = <span class=\"variable language_\">window</span>.<span class=\"property\">AudioContext</span> || <span class=\"variable language_\">window</span>.<span class=\"property\">webkitAudioContext</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> audioCtx = <span class=\"keyword\">new</span> <span class=\"title class_\">AudioContext</span>();</span><br><span class=\"line\">  <span class=\"keyword\">const</span> source = audioCtx.<span class=\"title function_\">createBufferSource</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  source.<span class=\"property\">buffer</span> = buffer;</span><br><span class=\"line\">  source.<span class=\"title function_\">connect</span>(audioCtx.<span class=\"property\">destination</span>);</span><br><span class=\"line\">  source.<span class=\"title function_\">start</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"PCM-播放工具\"><a href=\"#PCM-播放工具\" class=\"headerlink\" title=\"PCM 播放工具\"></a>PCM 播放工具</h3><p>音频混音器：<a href=\"https://www.audacityteam.org/\">Audacity</a></p>\n<p><img src=\"/images/web-audio/audacity.png\" alt=\"audacity\"></p>\n<h2 id=\"ArrayBuffer\"><a href=\"#ArrayBuffer\" class=\"headerlink\" title=\"ArrayBuffer\"></a>ArrayBuffer</h2><p><code>ArrayBuffer</code> 对象用来表示通用的、<em>固定长度</em>的__原始二进制数据缓冲区__（预分配内存）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBuffer</span>(<span class=\"number\">16</span>); <span class=\"comment\">// 16 字节长度的 ArrayBuffer</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(buffer.<span class=\"property\">byteLength</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>单位是__字节__，它是一个字节数组，通常在其他语言中称为 byte array</li>\n<li>不能__直接操作__ <code>ArrayBuffer</code> 的内容，只能通过 DataView 或者定型数组对象操作</li>\n<li>ArrayBuffer 分配的内存__不能超过__ Number.MAX_SAFE_INTEGER(2^53 - 1) 字节</li>\n</ul>\n<h3 id=\"DataView\"><a href=\"#DataView\" class=\"headerlink\" title=\"DataView\"></a>DataView</h3><p><code>DataView</code> 视图是一个可以从二进制 <em>ArrayBuffer</em> 对象中读写多种数值类型的底层接口，使用它时不用考虑不同平台的<code>字节序</code>问题。</p>\n<blockquote>\n<p>必须在对已有的 ArrayBuffer 读取或写入时才能创建 DataView 实例。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBuffer</span>(<span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> dataview = <span class=\"keyword\">new</span> <span class=\"title class_\">DataView</span>(buffer);</span><br><span class=\"line\">dataview.<span class=\"title function_\">setUint8</span>(<span class=\"number\">0</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\">dataview.<span class=\"title function_\">setUint8</span>(<span class=\"number\">1</span>, <span class=\"number\">0xff</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dataview.<span class=\"property\">byteOffset</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dataview.<span class=\"property\">byteLength</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(dataview.<span class=\"property\">buffer</span> === buffer); <span class=\"comment\">// DataViiew 维护着对该缓冲实例的引用</span></span><br></pre></td></tr></table></figure>\n\n<p>要通过 DataView 读取缓冲，还需要以下几点：</p>\n<ul>\n<li>首先是要读或者写的字节偏移量。可以看出 DataView 中的某种“地址”</li>\n<li>DataView 应该使用 ElementType 来实现 Javascript 的 Number 类型到缓冲内二进制格式的转换</li>\n<li>最后是内存中值的字节序。默认为大端字节序</li>\n</ul>\n<h3 id=\"定型数组\"><a href=\"#定型数组\" class=\"headerlink\" title=\"定型数组\"></a>定型数组</h3><p><img src=\"/images/web-audio/dataview-type.jpeg\" alt=\"DataView Element Type\"></p>\n<h3 id=\"字节序\"><a href=\"#字节序\" class=\"headerlink\" title=\"字节序\"></a>字节序</h3><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Endianness\">字节序</a>，或字节顺序（”Endian”、”endianness” 或 “byte-order”），描述了计算机如何组织字节，组成对应的数字。</p>\n<p>每一个字节可以存储一个 8 位（bit）的数字（0x00-0xff），存储更大数字需要多个字节，现在大部分需占用多字节的数字排列方式是 little-endian（低位字节排放在内存中低地址端，高字节排放在内存的高地址端），与 big-endian 相反。</p>\n<p>举例：用不同字节序存储数字 <code>0x12345678</code>(即十进制中的 305 419 896)</p>\n<ul>\n<li>little-endian：<code>0x78 0x56 0x34 0x12</code></li>\n<li>big-endian：<code>0x12 0x34 0x56 0x78</code></li>\n</ul>\n<h2 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h2><p>总结下处理音频时遇到的问题：iOS 和 Safari 问题就是特别多。</p>\n<h3 id=\"iOS-Q-A\"><a href=\"#iOS-Q-A\" class=\"headerlink\" title=\"iOS Q&amp;A\"></a>iOS Q&amp;A</h3><h4 id=\"1-Safari-调用-AudioContext-的次数有限\"><a href=\"#1-Safari-调用-AudioContext-的次数有限\" class=\"headerlink\" title=\"1. Safari 调用 AudioContext 的次数有限\"></a>1. Safari 调用 AudioContext 的次数有限</h4><p>问题：多次生成 AudioContext 实例会报错 <code>null is not an object</code></p>\n<p>方案：销毁  AudioContext 实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">AudioContext</span>.<span class=\"title function_\">close</span>(); <span class=\"comment\">// 关闭一个音频环境, 释放任何正在使用系统资源的音频.</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Safari-不支持-AudioContext-decodeAudio-Promise\"><a href=\"#2-Safari-不支持-AudioContext-decodeAudio-Promise\" class=\"headerlink\" title=\"2. Safari 不支持 AudioContext.decodeAudio Promise\"></a>2. Safari 不支持 AudioContext.decodeAudio Promise</h4><p>问题：AudioContext.decodeAudio Promise Safari 下会报错</p>\n<p>方案：直接使用回调函数，不使用 Promise</p>\n<h4 id=\"3-iOS-AudioContext-播放没有声音\"><a href=\"#3-iOS-AudioContext-播放没有声音\" class=\"headerlink\" title=\"3. iOS AudioContext 播放没有声音\"></a>3. iOS AudioContext 播放没有声音</h4><p>问题：点击 Audio 标签播放有声音，AudioContext 播放没有声音</p>\n<p>方案：检查后发现 AudioContext 在 iOS 静音模式下无法播放声音，其次判断 AudioContext 是否处于 running 状态，否则调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">audioContext.<span class=\"title function_\">resume</span>();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-iOS-Safari-不触发-canplaythrough-事件\"><a href=\"#4-iOS-Safari-不触发-canplaythrough-事件\" class=\"headerlink\" title=\"4. iOS Safari 不触发 canplaythrough 事件\"></a>4. iOS Safari 不触发 canplaythrough 事件</h4><p>问题：iOS Audio 标签加载资源后 Safari 不触发 canplaythrough 事件</p>\n<p>方案：设置 src 后调用 load 方法（iOS 14 及以上）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> audio = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;AUDIO&#x27;</span>);</span><br><span class=\"line\">audio.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;canplaythrough&#x27;</span>, loadedVideo, <span class=\"literal\">false</span>);</span><br><span class=\"line\">audio.<span class=\"property\">src</span> = url;</span><br><span class=\"line\">audio.<span class=\"title function_\">load</span>(); <span class=\"comment\">// 关键代码</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-iOS-Safari-显示播放时间不正确\"><a href=\"#5-iOS-Safari-显示播放时间不正确\" class=\"headerlink\" title=\"5. iOS Safari 显示播放时间不正确\"></a>5. iOS Safari 显示播放时间不正确</h4><p>问题：iOS Safari Audio 标签加载资源后显示的时间长度不正确</p>\n<p>方案：头部部分字段值不正确</p>\n<h4 id=\"6-iPad-14-8-播放时间不正确\"><a href=\"#6-iPad-14-8-播放时间不正确\" class=\"headerlink\" title=\"6. iPad 14.8 播放时间不正确\"></a>6. iPad 14.8 播放时间不正确</h4><p>问题：iPad 14.8 AudioContext 播放的时间跟理论上（source.buffer.duration 或者 arraybuffer&#x2F;samplerate&#x2F;2）计算的时间不一致，实际上播放时间更短</p>\n<p>方案：使用 source.onended 监听回调函数替代</p>\n<p>最后寄语：WebRTC 和 FFmpeg 太多要学习的，后续再进一步研究。</p>\n<p>参考文章：</p>\n<p><a href=\"https://www.cnblogs.com/yongdaimi/p/10722355.html\">音频属性相关：声道、采样率、采样位数、样本格式、比特率</a></p>\n<p><a href=\"https://rtcdeveloper.com/t/topic/21480\">让音视频学习变得简单之音频深度学习</a></p>\n<p><a href=\"https://www.cnblogs.com/dashnowords/p/11795251.html\">WebRTC在浏览器中如何获得指定格式的PCM数据</a></p>\n<p><a href=\"http://soundfile.sapp.org/doc/WaveFormat/\">WAVE PCM soundfile format</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer MDN</a></p>\n<p>Javascript 高级程序设计（第四版）：定型数组</p>\n"},{"title":"JS：浅析 Vue","url":"/2019/07/23/js-vue/","content":"<p>Vue 是一款<strong>渐进式</strong>的 Javascript 框架（Just a view library）。</p>\n<span id=\"more\"></span>\n\n<img src=\"/images/js-vue/vue.png\" alt=\"渐进式框架\" width=\"300\" height=\"300\" align=\"center\">\n<!-- ![渐进式框架](/images/js-vue/vue.png) -->\n\n<hr>\n<p>接下来我们会从<strong>数据响应</strong>、<strong>虚拟 DOM</strong>、<strong>模板编译</strong>三个方面分析 Vue 源码。</p>\n<h4 id=\"数据响应\"><a href=\"#数据响应\" class=\"headerlink\" title=\"数据响应\"></a>数据响应</h4><p>核心点：<strong>Object.defineProperty</strong> 和 ES6 的 <strong>Proxy</strong></p>\n<p>关键点：<strong>收集依赖</strong>（getter）和<strong>触发依赖</strong>（setter）</p>\n<p>源码：<em>vue&#x2F;src&#x2F;core&#x2F;observer</em></p>\n<h5 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h5><p>1 响应式数据（data）</p>\n<p>Vue 的核心是生成响应式数据，侦测数据的变化，利用 Object.defineProperty 可以侦测到对象的变化。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义响应式数据</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span>(<span class=\"params\">obj, key, val</span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, key, &#123;</span><br><span class=\"line\">        <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"comment\">// important</span></span><br><span class=\"line\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveGetter</span> () &#123;</span><br><span class=\"line\">            ... <span class=\"comment\">// do sth</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> value</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"comment\">// important</span></span><br><span class=\"line\">        <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newVal === val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            ... <span class=\"comment\">// do sth</span></span><br><span class=\"line\"></span><br><span class=\"line\">            val = newVal</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2 依赖收集（dep&#x3D;&gt;内置数组）</p>\n<p>观察数据，其目的是当数据的属性发生变化时，可以通知那些曾经使用了该数据的地方。<strong>在 getter 中收集依赖，在 setter 中触发依赖。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 依赖收集</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span>(<span class=\"params\">obj, key, val</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>() <span class=\"comment\">// 新增</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, key, &#123;</span><br><span class=\"line\">        <span class=\"attr\">get</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveGetter</span> () &#123;</span><br><span class=\"line\">            dep.<span class=\"title function_\">depend</span>() <span class=\"comment\">// 新增</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> value</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">set</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">reactiveSetter</span>(<span class=\"params\">newVal</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newVal === val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            val = newVal</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 新增</span></span><br><span class=\"line\">            dep.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">            <span class=\"comment\">// 循环 dep 以触发收集到的依赖</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; dep.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                dep[i](newVal, val)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 存储被收集的依赖</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span> = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    addSub (<span class=\"attr\">sub</span>: <span class=\"title class_\">Watcher</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">push</span>(sub)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    removeSub (<span class=\"attr\">sub</span>: <span class=\"title class_\">Watcher</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">remove</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>, sub)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    depend () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"property\">target</span>.<span class=\"title function_\">addDep</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    notify () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">            subs[i].<span class=\"title function_\">update</span>() <span class=\"comment\">// watcher.update</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>3 依赖生成（watcher）</p>\n<p>数据相关的依赖是 watcher，被收集在 Dep。</p>\n<p>举例子：实现 vm.$watch(‘a.b. c’, function(newVal, oldVal) {})</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Watcher 可能是模版，也可能是数据</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Watcher</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (vm, expOrFn, cb) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span> = vm</span><br><span class=\"line\">        <span class=\"comment\">// 执行 this.getter()，可以读取观察值的内容</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = <span class=\"title function_\">parsePath</span>(expOrFn) <span class=\"comment\">// parsePath</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span> = cb</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    get () &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">target</span> = <span class=\"variable language_\">this</span> <span class=\"comment\">//  this 就是当前 watcher</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">target</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    update () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> oldValue = <span class=\"variable language_\">this</span>.<span class=\"property\">value</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">vm</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">value</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">oldValue</span>) <span class=\"comment\">// 触发回调</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把 a.b.c 解析成 a[b][c]</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">parsePath</span> (<span class=\"attr\">path</span>: string): any &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (bailRE.<span class=\"title function_\">test</span>(path)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> segments = path.<span class=\"title function_\">split</span>(<span class=\"string\">&#x27;.&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> (<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; segments.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!obj) <span class=\"keyword\">return</span></span><br><span class=\"line\">            obj = obj[segments[i]]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这段代码可以把自己主动添加到 data.a.b.c 的 dep 中。</p>\n<ul>\n<li>new Watcher 的时候，① <strong>constructor</strong> 中的 <strong>get()</strong> 先把 <strong>window.target</strong> 设置成 this（当前 watcher 实例），② 然后调用 <strong>this.getter.call(this.vm, this.vm)</strong> 读取 data.a.b.c 的值时，就会触发对应 Object.defineProperty 的 <strong>getter</strong>。</li>\n<li><strong>getter</strong> 里触发了 <strong>dep.depend()<strong>，</strong>depend()</strong> 会把当前 <strong>window.target</strong>(watcher) 作为依赖添加到 dep 中。</li>\n<li>依赖 watcher 注入 dep 后，每当数据的值发生变化时，就会让 dep 依赖列表中的所有依赖（watcher）触发 **watcher.update()**。</li>\n</ul>\n<p>4 递归侦测 Object（Observer）</p>\n<p>前面的代码只能侦测数据中的某一个属性，我们希望能把数据中的所有属性（包括子属性）都侦测到，所以要封装一个 Observer 类。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">value: any</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = value</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value)) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">walk</span>(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    walk (<span class=\"attr\">obj</span>: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(obj)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">defineReactive</span>(obj, keys[i])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">defineReactive</span>(<span class=\"params\">obj, key, val</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 新增 递归子属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> val === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Observer</span>(val) <span class=\"comment\">// 递归循环 defineReactive</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, key, &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>5 总结图解</p>\n<p><img src=\"/images/js-vue/data.png\" alt=\"数据响应\"></p>\n<ul>\n<li>Data 通过 Observer 转换成了 gettter&#x2F;setter 的形式来追踪变化。</li>\n<li>当外界通过 Watcher 读取数据时，会触发 getter 从而把 watcher 添加到依赖 dep 中。</li>\n<li>当数据发生了变化，会触发 setter，从而向 dep 中的依赖（watcher）发送通知。</li>\n<li>watcher 接受到通知后，会通知外界，触发 update()，更新视图或触发回调。</li>\n</ul>\n<h5 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h5><p>6 侦测 Array 的变化</p>\n<p>侦测 Array 的方式和 Object 的不同，需要拦截覆盖 Array.prototype 的原生方法。</p>\n<p>源码：<em>vue&#x2F;src&#x2F;core&#x2F;observer&#x2F;array.js</em></p>\n<ul>\n<li>创建了变量 arrayMethods，用来覆盖 Array.prototype。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arrayProto = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> arrayMethods = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(arrayProto)</span><br><span class=\"line\"></span><br><span class=\"line\">;[</span><br><span class=\"line\">  <span class=\"string\">&#x27;push&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;pop&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;shift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;unshift&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;splice&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;sort&#x27;</span>,</span><br><span class=\"line\">  <span class=\"string\">&#x27;reverse&#x27;</span></span><br><span class=\"line\">].<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">method</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 缓存原生方法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> original = arrayProto[method]</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(arrayMethods, method, &#123;</span><br><span class=\"line\">    <span class=\"attr\">value</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">mutator</span> (...args) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> ob = <span class=\"variable language_\">this</span>.<span class=\"property\">__ob__</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> inserted</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;push&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;unshift&#x27;</span>:</span><br><span class=\"line\">                inserted = args</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;splice&#x27;</span>:</span><br><span class=\"line\">                inserted = args.<span class=\"title function_\">slice</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inserted) ob.<span class=\"title function_\">observeArray</span>(inserted)</span><br><span class=\"line\">        <span class=\"comment\">// notify change</span></span><br><span class=\"line\">        ob.<span class=\"property\">dep</span>.<span class=\"title function_\">notify</span>() <span class=\"comment\">// 触发依赖</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> original.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args) <span class=\"comment\">// 调用原生方法</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>再通过 Observer 生成响应式数组时，拦截器只会覆盖响应式数组的原型。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (<span class=\"attr\">value</span>: any) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新增</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">dep</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(value)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (hasProto) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">protoAugment</span>(value, arrayMethods)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">copyAugment</span>(value, arrayMethods, arrayKeys)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">walk</span>(value)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Augment a target Object or Array by intercepting</span></span><br><span class=\"line\"><span class=\"comment\"> * the prototype chain using __proto__</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">protoAugment</span> (target, <span class=\"attr\">src</span>: <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* eslint-disable no-proto */</span></span><br><span class=\"line\">  target.<span class=\"property\">__proto__</span> = src</span><br><span class=\"line\">  <span class=\"comment\">/* eslint-enable no-proto */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 直接暴力把 prototype 原生方法赋予属性 key-value</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">copyAugment</span> (<span class=\"attr\">target</span>: <span class=\"title class_\">Object</span>, <span class=\"attr\">src</span>: <span class=\"title class_\">Object</span>, <span class=\"attr\">keys</span>: <span class=\"title class_\">Array</span>&lt;string&gt;) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = keys.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> key = keys[i]</span><br><span class=\"line\">    <span class=\"title function_\">def</span>(target, key, src[key])</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><em>Array 在 getter 中收集依赖，在拦截器中触发依赖。</em></p>\n</li>\n<li><p>依赖 dep 必须在 getter 和拦截器中都可以访问到，所以 Array 的依赖列表存在了  Observer 中，不是 defineReactive 里，此时 dep 在 getter 和拦截器中都可以访问到。</p>\n</li>\n</ul>\n<h5 id=\"watch\"><a href=\"#watch\" class=\"headerlink\" title=\"$watch\"></a>$watch</h5><p>7 vm.$watch 的内部原理  </p>\n<ul>\n<li>执行 new Watcher 来实现 vm.$watch 的基本功能。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$watch</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    expOrFn: string | <span class=\"built_in\">Function</span>,</span></span><br><span class=\"line\"><span class=\"params\">    cb: any,</span></span><br><span class=\"line\"><span class=\"params\">    options?: <span class=\"built_in\">Object</span></span></span><br><span class=\"line\"><span class=\"params\"></span>): <span class=\"title class_\">Function</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span> = <span class=\"variable language_\">this</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 关键</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> watcher = <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(vm, expOrFn, cb, options)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.<span class=\"property\">immediate</span>) &#123;</span><br><span class=\"line\">        cb.<span class=\"title function_\">call</span>(vm, watcher.<span class=\"property\">value</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">unwatchFn</span> () &#123;</span><br><span class=\"line\">        watcher.<span class=\"title function_\">teardown</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>expOrFn</strong> 是支持函数的，Watcher 会同时观察 <strong>expOrFn</strong> 函数中读取的所有 Vue.js 实例的<strong>响应式数据</strong>。 计算属性（<strong>computed</strong>）的实现原理与其有很大的关系，函数中的所有响应式数据的 dep 都会添加这个 watcher，一旦其中的某个数据发生变化，dep 都会通知 watcher 更新。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Watcher</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (</span><br><span class=\"line\">    <span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>,</span><br><span class=\"line\">    <span class=\"attr\">expOrFn</span>: string | <span class=\"title class_\">Function</span>,</span><br><span class=\"line\">    <span class=\"attr\">cb</span>: <span class=\"title class_\">Function</span>,</span><br><span class=\"line\">    options?: ?<span class=\"title class_\">Object</span>,</span><br><span class=\"line\">    isRenderWatcher?: boolean</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span> = vm</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 新增</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expOrFn === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = expOrFn</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = <span class=\"title function_\">parsePath</span>(expOrFn)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span></span><br><span class=\"line\">      ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">      : <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Watcher 中添加 addDep 方法，会记录自己都订阅过哪些依赖 dep，同时也会把watcher 添加到 dep 中。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Watcher</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span> (</span><br><span class=\"line\">        <span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>,</span><br><span class=\"line\">        <span class=\"attr\">expOrFn</span>: string | <span class=\"title class_\">Function</span>,</span><br><span class=\"line\">        <span class=\"attr\">cb</span>: <span class=\"title class_\">Function</span>,</span><br><span class=\"line\">        options?: ?<span class=\"title class_\">Object</span>,</span><br><span class=\"line\">        isRenderWatcher?: boolean</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span> = vm</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span> = [] <span class=\"comment\">// 新增</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>() <span class=\"comment\">// 新增</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span></span><br><span class=\"line\">        ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">        : <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 记录 dep，同时把自己添加到 dep 中</span></span><br><span class=\"line\">    addDep (<span class=\"attr\">dep</span>: <span class=\"title class_\">Dep</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> id = dep.<span class=\"property\">id</span></span><br><span class=\"line\">        <span class=\"comment\">// 核心，双向绑定数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>.<span class=\"title function_\">has</span>(id)) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span>.<span class=\"title function_\">add</span>(id)</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span>.<span class=\"title function_\">push</span>(dep)</span><br><span class=\"line\">            dep.<span class=\"title function_\">addSub</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">    depend () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">window</span>.<span class=\"property\">target</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">window</span>.<span class=\"property\">target</span>.<span class=\"title function_\">addDep</span>(<span class=\"variable language_\">this</span>) <span class=\"comment\">// 新增 window.target === watcher</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Watcher 和 Dep 的关系图：多对多</p>\n<p><img src=\"/images/js-vue/watcher.png\" alt=\"数据响应\"></p>\n<p>举个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.$watch(<span class=\"keyword\">function</span> <span class=\"title function_\">me</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">age</span></span><br><span class=\"line\">&#125;, <span class=\"keyword\">function</span>(<span class=\"params\">newVal, oldVal</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(newVal, oldVal)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>观察的表达式是一个函数，函数中访问了 name 和 age 两个数据，这种情况下触发 name 和 age getter 的 <strong>dep</strong> 都会收集当前 <strong>watcher</strong> 实例，当前 <strong>watcher</strong> 也会记录 name 和 age 的 <strong>dep</strong>，这导致 name 和 age 中的任意一个数据发生变化（setter）时，<strong>watcher</strong> 都会收到通知。</p>\n<h4 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h4><p>在 Vue 中，我们使用模板（template）来描述状态（data status）与 DOM 之间的映射关系。Vue 通过编译将模板转换成渲染函数（render），执行渲染函数就可以得到一个虚拟节点树（Vnode），使用这个虚拟节点树就可以渲染页面。</p>\n<p>模板转换成视图的过程：</p>\n<p><img src=\"/images/js-vue/vnode.png\" alt=\"虚拟 DOM\"></p>\n<p>为了避免不必要的 DOM 操作，虚拟 DOM 在虚拟节点映射到视图的过程中，将虚拟节点与上一次渲染视图所使用的旧虚拟节点（oldVnode）作对比，找出真正需要更新的节点来进行 DOM 操作。</p>\n<p>虚拟 DOM 的执行流程：</p>\n<p><img src=\"/images/js-vue/patch.png\" alt=\"patch\"></p>\n<h5 id=\"VNode\"><a href=\"#VNode\" class=\"headerlink\" title=\"VNode\"></a>VNode</h5><p>核心：VNode 本质就是一个节点(DOM)描述(JS)对象。</p>\n<p>源码：<em>vue&#x2F;src&#x2F;core&#x2F;vdom&#x2F;vnode.js</em></p>\n<p>① Vue 中存在一个 VNode 类，使用它可以实例化不同类型的 vnode 实例，而不同类型的 vnode 实例各自表示不同类型的 DOM 元素。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VNode</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> (</span><br><span class=\"line\">    tag?: string,</span><br><span class=\"line\">    data?: <span class=\"title class_\">VNodeData</span>,</span><br><span class=\"line\">    children?: ?<span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">VNode</span>&gt;,</span><br><span class=\"line\">    text?: string,</span><br><span class=\"line\">    elm?: <span class=\"title class_\">Node</span>,</span><br><span class=\"line\">    context?: <span class=\"title class_\">Component</span>,</span><br><span class=\"line\">    componentOptions?: <span class=\"title class_\">VNodeComponentOptions</span>,</span><br><span class=\"line\">    asyncFactory?: <span class=\"title class_\">Function</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">tag</span> = tag</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">data</span> = data</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">children</span> = children</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">text</span> = text</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">elm</span> = elm</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">ns</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">context</span> = context</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fnContext</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fnOptions</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">fnScopeId</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = data &amp;&amp; data.<span class=\"property\">key</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">componentOptions</span> = componentOptions</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">componentInstance</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">parent</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">raw</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isStatic</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isRootInsert</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isComment</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isCloned</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isOnce</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">asyncFactory</span> = asyncFactory</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">asyncMeta</span> = <span class=\"literal\">undefined</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">isAsyncPlaceholder</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  get child (): <span class=\"title class_\">Component</span> | <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">componentInstance</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>② VNode 类型</p>\n<ul>\n<li>注释节点：createEmptyVNode(text)</li>\n<li>文本节点：createTextVNode(val)</li>\n<li>元素节点：createElement</li>\n<li>组件节点: createComponent</li>\n<li>函数式组件：createFunctionalComponent</li>\n<li>克隆节点：cloneVNode(vnode)</li>\n</ul>\n<h5 id=\"Patch\"><a href=\"#Patch\" class=\"headerlink\" title=\"Patch\"></a>Patch</h5><p>源码：<em>vue&#x2F;src&#x2F;core&#x2F;vdom&#x2F;patch.js</em></p>\n<p>虚拟 DOM 最核心的部分是 patch，它可以将 Vnode 渲染成真实的 DOM。</p>\n<p>patch 对现有 DOM 进行修改需要做三件事：</p>\n<ul>\n<li>创建新增的节点（① document.createElement ② parentNode.appendChild）</li>\n<li>删除已经废弃的节点</li>\n<li>修改需要更新的节点</li>\n</ul>\n<p><strong>patch：当 oldVNode 不存在时，直接使用 vnode 渲染视图；当 oldVNode 和 vnode 都存在但不是同一个节点时，使用 vnode 创建的 DOM 元素替换旧的 DOM 元素；当 oldVnode 和 vnode 是同一个节点时，使用更详细的对比操作（diff）对真实的 DOM 节点进行更新。</strong></p>\n<p>具体的规则待续…</p>\n<h4 id=\"模版编译\"><a href=\"#模版编译\" class=\"headerlink\" title=\"模版编译\"></a>模版编译</h4><p>源码：<em>vue&#x2F;src&#x2F;core&#x2F;compiler</em></p>\n<p><strong>渲染函数是创建 HTML 最原始的方法。模板最终会通过编译转换成渲染函数，渲染函数执行后，会得到一份 vnode 用于虚拟 DOM 渲染。</strong></p>\n<p><img src=\"/images/js-vue/render.png\" alt=\"patch\"></p>\n<p>模板编译成渲染函数可以分两个步骤：</p>\n<ol>\n<li>先将模板解析成 AST（抽象语法树）</li>\n<li>然后再使用 AST 生成渲染函数</li>\n</ol>\n<p>具体的模板编译分三部分内容：</p>\n<ol>\n<li>将模板解析为 AST</li>\n<li>遍历 AST 标记为静态节点</li>\n<li>使用 AST 生成渲染函数</li>\n</ol>\n<p>这三部分内容又可以抽象为三个模块来实现各自的动能：</p>\n<ol>\n<li>解析器：（HTML 解析器，文本解析器，过滤器解析器）</li>\n<li>优化器：（遍历 AST，检测出所有的静态子树）</li>\n<li>代码生成器 （生成代码字符串）</li>\n</ol>\n<p>模板编译的整体流程：</p>\n<p><img src=\"/images/js-vue/render-part.png\" alt=\"patch\"></p>\n<h5 id=\"解析器\"><a href=\"#解析器\" class=\"headerlink\" title=\"解析器\"></a>解析器</h5><p>源码：<em>vue&#x2F;src&#x2F;core&#x2F;compiler&#x2F;parser</em></p>\n<p>解析器要实现的功能是将模板解析成 AST。</p>\n<ul>\n<li>HTML 解析器（html-parser）</li>\n<li>文本解析器（text-parser）</li>\n<li>过滤器解析器（filter-parser）</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  模板 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AST</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">tag</span>: <span class=\"string\">&quot;div&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">staticRoot</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">static</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">plain</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">parent</span>: <span class=\"literal\">undefined</span>,</span><br><span class=\"line\">    <span class=\"attr\">attrList</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">attrsMap</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">tag</span>: <span class=\"string\">&quot;p&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">type</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">            <span class=\"attr\">staticRoot</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">static</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"attr\">plain</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            <span class=\"attr\">parent</span>: &#123;<span class=\"attr\">tag</span>: <span class=\"string\">&quot;div&quot;</span>, ...&#125;,</span><br><span class=\"line\">            <span class=\"attr\">attrList</span>: [],</span><br><span class=\"line\">            <span class=\"attr\">attrsMap</span>: &#123;&#125;,</span><br><span class=\"line\">            <span class=\"attr\">children</span>: [&#123;</span><br><span class=\"line\">                <span class=\"attr\">type</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">                <span class=\"attr\">text</span>: <span class=\"string\">&quot;&#123;&#123;name&#125;&#125;&quot;</span></span><br><span class=\"line\">                <span class=\"attr\">static</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">                <span class=\"attr\">expression</span>: <span class=\"string\">&quot;_s(name)&quot;</span></span><br><span class=\"line\">            &#125;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"优化器\"><a href=\"#优化器\" class=\"headerlink\" title=\"优化器\"></a>优化器</h5><p>源码：<em>vue&#x2F;src&#x2F;core&#x2F;compiler&#x2F;optimizer</em></p>\n<p>优化器的作用是在 AST 中找出静态子树打上标记。</p>\n<p>标记静态子树的好处：</p>\n<ul>\n<li>每次重新渲染时，不需要为静态子树创建新节点</li>\n<li>在虚拟 DOM 中打补丁（patching）的过程可以跳过</li>\n</ul>\n<p>AST 新增 static（静态节点） 和 staticRoot（静态根节点） 两个属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">optimize</span> (<span class=\"attr\">root</span>: ?<span class=\"title class_\">ASTElement</span>, <span class=\"attr\">options</span>: <span class=\"title class_\">CompilerOptions</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"comment\">// first pass: mark all non-static nodes.</span></span><br><span class=\"line\">    <span class=\"title function_\">markStatic</span>(root)</span><br><span class=\"line\">    <span class=\"comment\">// second pass: mark static roots.</span></span><br><span class=\"line\">    <span class=\"title function_\">markStaticRoots</span>(root, <span class=\"literal\">false</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"代码生成器\"><a href=\"#代码生成器\" class=\"headerlink\" title=\"代码生成器\"></a>代码生成器</h5><p>源码：<em>vue&#x2F;src&#x2F;core&#x2F;compiler&#x2F;codegen</em></p>\n<p>代码生成器就是通过 AST 生成代码字符串。</p>\n<p>代码字符串格式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">‘<span class=\"title function_\">with</span>(<span class=\"params\"><span class=\"variable language_\">this</span></span>)&#123;<span class=\"keyword\">return</span> <span class=\"title function_\">_c</span>(<span class=\"string\">&quot;div&quot;</span>, &#123;<span class=\"attr\">attrs</span>:&#123;<span class=\"string\">&quot;id&quot;</span>:<span class=\"string\">&quot;el&quot;</span>&#125;&#125;, [<span class=\"title function_\">_v</span>(<span class=\"string\">&quot;hello &quot;</span>+<span class=\"title function_\">_s</span>(name))])&#125;’</span><br></pre></td></tr></table></figure>\n\n<p>钩子生成函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _c</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">genElement</span> (<span class=\"attr\">el</span>: <span class=\"title class_\">ASTElement</span>, <span class=\"attr\">state</span>: <span class=\"title class_\">CodegenState</span>): string &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!el.<span class=\"property\">plain</span> || (el.<span class=\"property\">pre</span> &amp;&amp; state.<span class=\"title function_\">maybeComponent</span>(el))) &#123;</span><br><span class=\"line\">        data = <span class=\"title function_\">genData</span>(el, state)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> children = el.<span class=\"property\">inlineTemplate</span> ? <span class=\"literal\">null</span> : <span class=\"title function_\">genChildren</span>(el, state, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    code = <span class=\"string\">`_c(&#x27;<span class=\"subst\">$&#123;el.tag&#125;</span>&#x27;<span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        data ? <span class=\"string\">`,<span class=\"subst\">$&#123;data&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span> // data</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    &#125;</span><span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">        children ? <span class=\"string\">`,<span class=\"subst\">$&#123;children&#125;</span>`</span> : <span class=\"string\">&#x27;&#x27;</span> // children</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    &#125;</span>)`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _v</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">genText</span> (<span class=\"attr\">text</span>: <span class=\"title class_\">ASTText</span> | <span class=\"title class_\">ASTExpression</span>): string &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`_v(<span class=\"subst\">$&#123;text.type === <span class=\"number\">2</span></span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    ? text.expression // no need <span class=\"keyword\">for</span> () because already wrapped <span class=\"keyword\">in</span> _s()</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    : transformSpecialNewlines(<span class=\"built_in\">JSON</span>.stringify(text.text))</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">  &#125;</span>)`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// _e</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">genComment</span> (<span class=\"attr\">comment</span>: <span class=\"title class_\">ASTText</span>): string &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`_e(<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(comment.text)&#125;</span>)`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"挂载真实-DOM\"><a href=\"#挂载真实-DOM\" class=\"headerlink\" title=\"挂载真实 DOM\"></a>挂载真实 DOM</h4><p>_update</p>\n<h4 id=\"全局篇\"><a href=\"#全局篇\" class=\"headerlink\" title=\"全局篇\"></a>全局篇</h4><p><img src=\"/images/js-vue/new-vue.png\" alt=\"patch\"></p>\n<p>参考文章：</p>\n<p><a href=\".\">深入浅出 Vue.js-刘博文</a></p>\n","categories":["web"],"tags":["JavaScript"]},{"title":"SSE：基础用法","url":"/2024/03/20/sse-problem/","content":"<p>使用 <code>chatgpt</code> 提问后，答案逐字返回出现，其中背后的原理就涉及 SSE 连接机制了。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h3><p><img src=\"/images/sse-problem/sse-caniuse.png\" alt=\"Can I Use\"></p>\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><p>除了 IE 浏览器不能用，基本无坑。使用方法简易，具体可参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/EventSource\">MDN EventSource</a>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> evtSource = <span class=\"keyword\">new</span> <span class=\"title class_\">EventSource</span>(<span class=\"string\">&quot;/sse&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">evtSource.<span class=\"property\">onmessage</span> = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`message: <span class=\"subst\">$&#123;e.data&#125;</span>`</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h4><p>采用 express.js 实现一个 nodejs 后端服务：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cors = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cors&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> port = <span class=\"number\">3000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">cors</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&#x27;/sse&#x27;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">set</span>(&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;Content-Type&#x27;</span>: <span class=\"string\">&#x27;text/event-stream&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Connection&#x27;</span>: <span class=\"string\">&#x27;keep-alive&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;Cache-Control&#x27;</span>: <span class=\"string\">&#x27;no-cache, no-transform&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;X-Accel-Buffering&#x27;</span>: <span class=\"string\">&#x27;no&#x27;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    res.<span class=\"title function_\">flushHeaders</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">            <span class=\"attr\">message</span>: <span class=\"string\">`Current time is <span class=\"subst\">$&#123;<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().toLocaleTimeString()&#125;</span>`</span></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        res.<span class=\"title function_\">write</span>(<span class=\"string\">`data: <span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(data)&#125;</span>\\n\\n`</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(port, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Server started on port <span class=\"subst\">$&#123;port&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h3><h4 id=\"浏览器接收后端数据延迟的问题\"><a href=\"#浏览器接收后端数据延迟的问题\" class=\"headerlink\" title=\"浏览器接收后端数据延迟的问题\"></a>浏览器接收后端数据延迟的问题</h4><p>背景：前端通过 <code>EventSource</code> 连接后端时，后端会立即响应并返回数据，且在服务器上也打印出日志，但是浏览器的接口状态一直处于 <code>pending</code> 且 <code>EventStream</code> 无任何数据响应。在等待几分钟（差不多5分钟）后，<strong>浏览器才一次性接收到所有数据</strong>。</p>\n<p>关键：是浏览器接收不到数据流，排除了后端连不上或者断开连接的可能。</p>\n<p>解决方法：</p>\n<p>HTTP 响应头需要添加以下字段：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Content-Type: text/event-stream</span><br><span class=\"line\">Cache-Control: no-cache, no-transform</span><br><span class=\"line\">Connection: keep-alive</span><br><span class=\"line\">X-Accel-Buffering: no</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>Cache-Control</code> 中需要包含 <code>no-transform</code>，开发时，如果使用了 <code>create-react-app</code> 等工具来转发请求，数据流很可能被压缩（检查 proxy 的 compress 配置是否为 true），造成怎么也收不到响应。<a href=\"https://github.com/facebook/create-react-app/issues/1633\">issue</a></p>\n</li>\n<li><p><code>no-transform</code> 是开发环境中的遇到的问题，但是在生产环境仍然还存在问题。</p>\n</li>\n<li><p>如果网站使用 <code>nginx</code> 做反向代理的，默认会对应用的响应做缓冲(buffering)，以至于应用返回的消息没有立马发出去。所以我们需要给http头加上一条 X<code>-Accel-Buffering: no </code>。<a href=\"https://serverfault.com/questions/801628/for-server-sent-events-sse-what-nginx-proxy-configuration-is-appropriate\">issue</a></p>\n</li>\n</ul>\n<p>Nginx 配置：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_buffering</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_cache</span> <span class=\"literal\">off</span>;</span><br><span class=\"line\">  <span class=\"attribute\">proxy_pass_header</span> X-Accel-Buffering;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>排查过程不详述了，一句话总结，<strong>防止对数据流进行压缩或缓存</strong>。</p>\n<p>参考文章：</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/EventSource\">EventSource</a></p>\n<p><a href=\"https://www.ruanyifeng.com/blog/2017/05/server-sent_events.html\">Server-Sent Events 教程</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/47099953\">server-side-events(SSE)开发指南（Node）</a></p>\n"},{"title":"WEB：一次偶然的依赖库安全问题","url":"/2024/01/29/safe-problem/","content":"<p>背景：在大型企业部署应用后，多数会对系统进行安全扫描，至少需要处理高等级和中等级问题。</p>\n<span id=\"more\"></span>\n\n<p>项目：该项目是基于 <code>vue-cli</code> 创建的 <code>vue2</code> 前端项目。</p>\n<p>问题：扫描结果中有多个依赖的版本过低，存在安全问题，<strong>需要通过升级这些依赖的版本</strong>，从而解决问题。</p>\n<p>解决思路：</p>\n<ul>\n<li>1：扫描的依赖都属于深层依赖，是来源于 <code>package-lock.json</code> 的，而不是 <code>package.json</code>，无法直接通过修改依赖版本。</li>\n<li>2：仔细发现扫描出来有问题的依赖都属于构建工具，都是跟 <code>webpack</code> 相关，<strong>而通过验证后 <code>webpack5</code> 的相关版本都得到了升级</strong>，且满足安全要求。</li>\n<li>3：项目本身是基于 <code>vue-cli</code> 创建的，webpack 也是包含在 <code>@vue/cli</code> 工具依赖库里面，**且只有最新版本 <code>@vue/cli</code> 5.0.8 版本才引用的是 <code>webpack5</code>**。</li>\n<li>4：本地升级 <code>@vue/cli</code> 工具版本，创建新项目，并移植 <code>package-lock.json</code> 的相关依赖。</li>\n</ul>\n<p>总结：通过升级 <code>@vue/cli</code> 最新版本，从而带动 <code>webpack</code> 升级为 <code>webpack5</code>，曲折地升级所有有问题的依赖版本。</p>\n<p>PS：这是一次比较取巧的方案，要是死磕 <code>package-lock.json</code> 也可能得不到什么比较好且方便的方案。</p>\n"},{"title":"WEB：常见的安全问题","url":"/2024/01/09/security/","content":"<p>本文涉及公司内部镜像安全问题。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"镜像版本安全问题\"><a href=\"#镜像版本安全问题\" class=\"headerlink\" title=\"镜像版本安全问题\"></a>镜像版本安全问题</h3><h4 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h4><p>根据 <a href=\"https://zeuscoder.github.io/2020/09/06/docker/\">DevOps：Docker 实操笔记</a> 一文中 <a href=\"https://cli.vuejs.org/zh/guide/deployment.html#bitbucket-cloud\">Vue-cli 项目部署 Dockerfile 实例</a>，前端项目会在构建镜像时分别用到了 <code>node</code> 和 <code>nginx</code> 镜像。</p>\n<p>由于不同安全手段的测试，低版本镜像往往会检测出劫持漏洞问题，<strong>但仅需要升级对应的版本即可</strong>。</p>\n<h4 id=\"本地推送-docker-镜像到内部仓库\"><a href=\"#本地推送-docker-镜像到内部仓库\" class=\"headerlink\" title=\"本地推送 docker 镜像到内部仓库\"></a>本地推送 docker 镜像到内部仓库</h4><p>由于公司可能采用的是内部镜像仓库，往往需要手动推送合适的 docker 镜像到内部仓库。</p>\n<p>假设公司镜像仓库地址：registry.zeuscoder.com</p>\n<p>以推送不同版本 node 的 docker 镜像为例：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">本地打开终端（确认本地已安装且开启 docker）：</span></span><br><span class=\"line\">docker login --username=[自己的账号] registry.zeuscoder.com</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">输入密码：自己的密码</span></span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">从 dockerhub 拉取对应镜像：</span></span><br><span class=\"line\">docker push node:[镜像版本号]</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取镜像 imageId：</span></span><br><span class=\"line\">docker images ｜ grep node:[镜像版本号]</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">本地打 tag：</span></span><br><span class=\"line\">docker tag [ImageId]  registry.zeuscoder.com/library/node:[镜像版本号]</span><br><span class=\"line\"><span class=\"meta prompt_\"> </span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">推送到仓库：</span></span><br><span class=\"line\">docker push registry.zeuscoder.com/library/node:[镜像版本号]</span><br></pre></td></tr></table></figure>\n"},{"title":"Web：前端提效工具集合","url":"/2024/01/04/web-chrome-devtool/","content":"<p>工欲善其事，必先利其器。一款好的插件往往可以让你事半功倍。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Chrome-插件\"><a href=\"#Chrome-插件\" class=\"headerlink\" title=\"Chrome 插件\"></a>Chrome 插件</h2><table>\n<thead>\n<tr>\n<th align=\"left\">插件</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">FEHelper</td>\n<td align=\"left\">Web 前端助手</td>\n</tr>\n<tr>\n<td align=\"left\">EditCookie</td>\n<td align=\"left\">操作 cookie 的插件</td>\n</tr>\n<tr>\n<td align=\"left\">Vue DevTools</td>\n<td align=\"left\">Vue 开发工具，调试必备</td>\n</tr>\n<tr>\n<td align=\"left\">React Developer Tools</td>\n<td align=\"left\">React 开发工具</td>\n</tr>\n<tr>\n<td align=\"left\">Axure RP</td>\n<td align=\"left\">在线查看网页原型</td>\n</tr>\n<tr>\n<td align=\"left\">AdBlock</td>\n<td align=\"left\">广告屏蔽插件</td>\n</tr>\n<tr>\n<td align=\"left\">Google翻译</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">tampermonkey</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">GoFullPage</td>\n<td align=\"left\">网页截屏 长屏截图</td>\n</tr>\n<tr>\n<td align=\"left\">沉浸式翻译</td>\n<td align=\"left\">很好用的网页翻译</td>\n</tr>\n</tbody></table>\n<h2 id=\"VSCode-插件\"><a href=\"#VSCode-插件\" class=\"headerlink\" title=\"VSCode 插件\"></a>VSCode 插件</h2><table>\n<thead>\n<tr>\n<th align=\"left\">插件</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Vetur</td>\n<td align=\"left\">Vue 工具</td>\n</tr>\n<tr>\n<td align=\"left\">Prettier</td>\n<td align=\"left\">美化你的 JavaScript&#x2F;TypeScript&#x2F;CSS 代码</td>\n</tr>\n<tr>\n<td align=\"left\">Trailing Spaces</td>\n<td align=\"left\">高亮那些冗余的空格，可以快速删掉</td>\n</tr>\n<tr>\n<td align=\"left\">npm Intellisense</td>\n<td align=\"left\">可以在导入语句自动补全npm模块名称</td>\n</tr>\n<tr>\n<td align=\"left\">GitLens</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Git Project Manager</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Git History</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Live Server</td>\n<td align=\"left\">本地起 http server，避免加载本地资源跨越的的问题</td>\n</tr>\n<tr>\n<td align=\"left\">codegeex</td>\n<td align=\"left\">AI 工具</td>\n</tr>\n</tbody></table>\n<h2 id=\"npm-工具\"><a href=\"#npm-工具\" class=\"headerlink\" title=\"npm 工具\"></a>npm 工具</h2><table>\n<thead>\n<tr>\n<th align=\"left\">插件</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">n</td>\n<td align=\"left\">Node.js version management</td>\n</tr>\n<tr>\n<td align=\"left\">nrm</td>\n<td align=\"left\">NPM registry manager</td>\n</tr>\n<tr>\n<td align=\"left\">http-server</td>\n<td align=\"left\">为静态资源启动服务</td>\n</tr>\n<tr>\n<td align=\"left\">depcheck</td>\n<td align=\"left\">分析项目 package.json 中有哪些未使用的依赖</td>\n</tr>\n</tbody></table>\n<h2 id=\"资料网站\"><a href=\"#资料网站\" class=\"headerlink\" title=\"资料网站\"></a>资料网站</h2><table>\n<thead>\n<tr>\n<th align=\"left\">插件</th>\n<th align=\"left\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://docschina.org/\">https://docschina.org/</a></td>\n<td align=\"left\">中文官网集合</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://docschina.org/\">https://docschina.org/</a></td>\n<td align=\"left\">Web前端导航</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://mock.mengxuegu.com/\">https://mock.mengxuegu.com/</a></td>\n<td align=\"left\">在线mock工具</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"http://bbs.laoleng.vip/reference/index.html\">http://bbs.laoleng.vip/reference/index.html</a></td>\n<td align=\"left\">为开发人员分享快速参考备忘清单【速查表】。这是英文版 Reference 的中文版本，目的是为了方便自己的技术栈查阅，如果您提供一个清单，我将抽空搬运，立即撸起来 :)。如果您发现此处的备忘单不合适，您可以通过提交 PR 来修复它或提供更好的备忘清单，只针对【中文】用户。以下是开源天使提供的一些备忘清单和快速参考 :)。</td>\n</tr>\n</tbody></table>\n"},{"title":"vue3-diff","url":"/2023/10/04/vue3-diff/","content":"<p>Vue3 diff 算法与 Vue2 相比，最大的不同就是<strong>不再使用双端比较算法</strong>，而是<strong>使用最长递增子序列算法</strong>。</p>\n<blockquote>\n<p>最长递增子序列（Longest Increasing Subsequence，LIS）问题，是算法中经典的动态规划问题。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>在 Vue 3.x 版本中，编译时做了不少优化，为 <code>patch</code> 函数提供了便利。</p>\n<p><strong>其中核心算法函数为 <code>patchKeyedChildren</code> 函数****，</strong>源码位于 <code>packages/runtime-core/src/renderer.ts</code>。</p>\n<p><font color=\"red\"><strong>该函数分为 5 步，第 5 步又细分为 3 小步（复杂且关键），其中也包含了最长递增子序列的算法。</strong></font></p>\n<blockquote>\n<p>前言：需要区分与 Vue2 不同的维护变量</p>\n</blockquote>\n<h4 id=\"同步头部节点\"><a href=\"#同步头部节点\" class=\"headerlink\" title=\"同步头部节点\"></a>同步头部节点</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">patchKeyedChildren</span> = (<span class=\"params\">c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> l2 = c2.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e1 = c1.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 新子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. 从头部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 0, e1 = 3, e2 = 4</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n1 = c1[i]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n2 = c2[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isSameVNodeType</span>(n1, n2)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 相同的节点，递归执行 patch 更新节点</span></span><br><span class=\"line\">      <span class=\"title function_\">patch</span>(n1, n2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    i++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>diff 过程中需要维护的几个变量：<strong>头部的索引 i（可以理解为新旧节点公共的首部索引）、旧子节点的尾部索引 e1和新子节点的尾部索引 e2</strong>。</p>\n<p>同步头部节点就是从头部开始，依次对比新节点和旧节点，如果它们相同的则执行 patch 更新节点；如果不同或者索引 i 大于索引 e1 或者 e2，则同步过程结束。</p>\n<p><img src=\"/images/diff-vue-react/1716197845396.png\" alt=\"1716197845396\"></p>\n<p>完成头部节点同步后：i 是 2，e1 是 3，e2 是 4。</p>\n<h4 id=\"同步尾部节点\"><a href=\"#同步尾部节点\" class=\"headerlink\" title=\"同步尾部节点\"></a>同步尾部节点</h4><p>接着从尾部开始 <strong>同步尾部节点</strong> ，实现代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">patchKeyedChildren</span> = (<span class=\"params\">c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> l2 = c2.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e1 = c1.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 新子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. 从头部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 0, e1 = 3, e2 = 4</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 从尾部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 3, e2 = 4</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) (c d)</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e (c d)</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt;= e1 &amp;&amp; i &lt;= e2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n1 = c1[e1]</span><br><span class=\"line\">    <span class=\"keyword\">const</span> n2 = c2[e2]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isSameVNodeType</span>(n1, n2)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">patch</span>(n1, n2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    e1--</span><br><span class=\"line\">    e2--</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同步尾部节点就是从尾部开始，依次对比新节点和旧节点，如果相同的则执行 patch 更新节点；如果不同或者索引 i 大于索引 e1 或者 e2，则同步过程结束。</p>\n<p><img src=\"/images/diff-vue-react/1716198093362.png\" alt=\"1716198093362\"></p>\n<p>可以看到，完成尾部节点同步后：i 是 2，e1 是 1，e2 是 2。</p>\n<p><font color=\"red\"><strong>中途总结：前面 2 步非常容易理解，就是先去头去尾，剩下新旧节点的中间部分。</strong></font></p>\n<p>接下来只有 3 种情况要处理：</p>\n<ul>\n<li><strong>旧子节点都没有了</strong>，新子节点只有剩余要添加的新节点；</li>\n<li><strong>新子节点都没有了</strong>，旧子节点有剩余要删除的多余节点；</li>\n<li><strong>新子节点和旧子节点都同时还有剩余节点</strong>，未知子序列。</li>\n</ul>\n<h4 id=\"添加新的节点\"><a href=\"#添加新的节点\" class=\"headerlink\" title=\"添加新的节点\"></a>添加新的节点</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">patchKeyedChildren</span> = (<span class=\"params\">c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> l2 = c2.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e1 = c1.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 新子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. 从头部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 0, e1 = 3, e2 = 4</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 从尾部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 3, e2 = 4</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) (c d)</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e (c d)</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 挂载剩余的新节点</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 1, e2 = 2</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &gt; e1) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &lt;= e2) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> nextPos = e2 + <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> anchor = nextPos &lt; l2 ? c2[nextPos].<span class=\"property\">el</span> : parentAnchor</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (i &lt;= e2) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 挂载新节点</span></span><br><span class=\"line\">        <span class=\"title function_\">patch</span>(<span class=\"literal\">null</span>, c2[i], container, anchor, parentComponent, parentSuspense, isSVG)</span><br><span class=\"line\">     \ti++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果索引 i 大于尾部索引 e1（旧子节点都没有了）且 i 小于 e2（新子节点都还有剩余），那么从索引 i 开始到索引 e2 之间，<strong>我们直接挂载新子树这部分的节点</strong>。</p>\n<p><img src=\"/images/diff-vue-react/1716198948270.png\" alt=\"1716198948270\"></p>\n<p>添加完 e 节点后，旧子节点的 DOM 和新子节点对应的 vnode 映射一致，也就完成了更新。</p>\n<h4 id=\"删除多余节点\"><a href=\"#删除多余节点\" class=\"headerlink\" title=\"删除多余节点\"></a>删除多余节点</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">patchKeyedChildren</span> = (<span class=\"params\">c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> l2 = c2.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e1 = c1.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 新子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. 从头部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 0, e1 = 4, e2 = 3</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d e</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) d e</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 从尾部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 4, e2 = 3</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c (d e)</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) (d e)</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 普通序列挂载剩余的新节点</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 2, e2 = 1</span></span><br><span class=\"line\">  <span class=\"comment\">// 不满足</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &gt; e1) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 4. 普通序列删除多余的旧节点</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 2, e2 = 1</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &gt; e2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= e1) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 删除节点</span></span><br><span class=\"line\">      <span class=\"title function_\">unmount</span>(c1[i], parentComponent, parentSuspense, <span class=\"literal\">true</span>)</span><br><span class=\"line\">      i++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>如果索引 i 大于尾部索引 e2（新子节点都没有了且旧子节点都还有剩余），那么从索引 i 开始到索引 e1 之间，<strong>我们直接删除旧子树这部分的节点</strong>。</p>\n<p><img src=\"/images/diff-vue-react/1716199296806.png\" alt=\"1716199296806\"></p>\n<p>删除完 c 节点后，旧子节点的 DOM 和新子节点对应的 vnode 映射一致，也就完成了更新。</p>\n<p><font color=\"red\"><strong>中途总结：3 和 4 步的前提是基于新子节点或旧子节点有一方已经没有了（临近边界值情况下），直接挂载或卸载剩余节点。</strong> </font></p>\n<p>但是呢，如果两者都有剩余子序列，就需要进行最后一步了。</p>\n<h4 id=\"处理未知子序列\"><a href=\"#处理未知子序列\" class=\"headerlink\" title=\"处理未知子序列\"></a>处理未知子序列</h4><p>假设遇到这种情况：</p>\n<p><img src=\"/images/diff-vue-react/1716199809171.png\" alt=\"1716199809171\"></p>\n<h5 id=\"建立索引图\"><a href=\"#建立索引图\" class=\"headerlink\" title=\"建立索引图\"></a>建立索引图</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">patchKeyedChildren</span> = (<span class=\"params\">c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> l2 = c2.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e1 = c1.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 新子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. 从头部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 0, e1 = 7, e2 = 7</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d e f g h</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d i g h</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 从尾部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 7, e2 = 7</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d e f (g h)</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d i (g h)</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 普通序列挂载剩余的新节点， 不满足</span></span><br><span class=\"line\">  <span class=\"comment\">// 4. 普通序列删除多余的旧节点，不满足</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 4, e2 = 5</span></span><br><span class=\"line\">  <span class=\"comment\">// 旧子序列开始索引，从 i 开始记录</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> s1 = i</span><br><span class=\"line\">  <span class=\"comment\">// 新子序列开始索引，从 i 开始记录</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> s2 = i <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// 5.1 根据 key 建立新子序列的索引图</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> keyToNewIndexMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Map</span>()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = s2; i &lt;= e2; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextChild = c2[i]</span><br><span class=\"line\">    keyToNewIndexMap.<span class=\"title function_\">set</span>(nextChild.<span class=\"property\">key</span>, i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新旧子序列是从 i 开始的，所以我们先用 s1、s2 分别作为新旧子序列的开始索引，接着建立一个 keyToNewIndexMap 的 Map&lt;key, index&gt; 结构，遍历新子序列，把节点的 key 和 index 添加到这个 Map 中，注意我们这里假设所有节点都是有 key 标识的。</p>\n<p>keyToNewIndexMap 存储的就是新子序列中每个节点在新子序列中的索引，我们来看一下示例处理后的结果，如下图所示：</p>\n<p><img src=\"/images/diff-vue-react/1716200036280.png\" alt=\"1716200036280\"></p>\n<h5 id=\"更新和移除旧节点\"><a href=\"#更新和移除旧节点\" class=\"headerlink\" title=\"更新和移除旧节点\"></a>更新和移除旧节点</h5><p><strong>接下来，我们就需要遍历旧子序列，有相同的节点就通过 patch 更新，并且移除那些不在新子序列中的节点，同时找出是否有需要移动的节点，</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">patchKeyedChildren</span> = (<span class=\"params\">c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> l2 = c2.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e1 = c1.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 新子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. 从头部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 0, e1 = 7, e2 = 7</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d e f g h</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d i g h</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 从尾部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 7, e2 = 7</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d e f (g h)</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d i (g h)</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 普通序列挂载剩余的新节点，不满足</span></span><br><span class=\"line\">  <span class=\"comment\">// 4. 普通序列删除多余的旧节点，不满足</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 4, e2 = 5</span></span><br><span class=\"line\">  <span class=\"comment\">// 旧子序列开始索引，从 i 开始记录</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> s1 = i</span><br><span class=\"line\">  <span class=\"comment\">// 新子序列始索引，从 i 开始记录</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> s2 = i</span><br><span class=\"line\">  <span class=\"comment\">// 5.1 根据 key 建立新子序列的索引图</span></span><br><span class=\"line\">  <span class=\"comment\">// 5.2 正序遍历旧子序列，找到匹配的节点更新，删除不在新子序列中的节点，判断是否有移动节点</span></span><br><span class=\"line\">  <span class=\"comment\">// 新子序列已更新节点的数量</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> patched = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"comment\">// 新子序列待更新节点的数量，等于新子序列的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> toBePatched = e2 - s2 + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 是否存在要移动的节点</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> moved = <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\">// 用于跟踪判断是否有节点移动</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> maxNewIndexSoFar = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"comment\">// 这个数组存储新子序列中的元素在旧子序列节点的索引，用于确定最长递增子序列</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> newIndexToOldIndexMap = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(toBePatched)</span><br><span class=\"line\">  <span class=\"comment\">// 初始化数组，每个元素的值都是 0</span></span><br><span class=\"line\">  <span class=\"comment\">// 0 是一个特殊的值，如果遍历完了仍有元素的值为 0，则说明这个新节点没有对应的旧节点</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; toBePatched; i++)</span><br><span class=\"line\">    newIndexToOldIndexMap[i] = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"comment\">// 正序遍历旧子序列</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = s1; i &lt;= e1; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拿到每一个旧子序列节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> prevChild = c1[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (patched &gt;= toBePatched) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 所有新的子序列节点都已经更新，剩余的节点删除</span></span><br><span class=\"line\">      <span class=\"title function_\">unmount</span>(prevChild, parentComponent, parentSuspense, <span class=\"literal\">true</span>)</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 查找旧子序列中的节点在新子序列中的索引</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> newIndex = keyToNewIndexMap.<span class=\"title function_\">get</span>(prevChild.<span class=\"property\">key</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newIndex === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 找不到说明旧子序列已经不存在于新子序列中，则删除该节点</span></span><br><span class=\"line\">      <span class=\"title function_\">unmount</span>(prevChild, parentComponent, parentSuspense, <span class=\"literal\">true</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 更新新子序列中的元素在旧子序列中的索引，这里加 1 偏移，是为了避免 i 为 0 的特殊情况，影响对后续最长递增子序列的求解</span></span><br><span class=\"line\">      newIndexToOldIndexMap[newIndex - s2] = i + <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"comment\">// maxNewIndexSoFar 始终存储的是上次求值的 newIndex，如果不是一直递增，则说明有移动</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (newIndex &gt;= maxNewIndexSoFar) &#123;</span><br><span class=\"line\">        maxNewIndexSoFar = newIndex</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        moved = <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 更新新旧子序列中匹配的节点</span></span><br><span class=\"line\">      <span class=\"title function_\">patch</span>(prevChild, c2[newIndex], container, <span class=\"literal\">null</span>, parentComponent, parentSuspense, isSVG, optimized)</span><br><span class=\"line\">      patched++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>建立了一个 newIndexToOldIndexMap 的数组，来存储新子序列节点的索引和旧子序列节点的索引之间的映射关系，用于确定最长递增子序列，这个数组的长度为新子序列的长度，每个元素的初始值设为 0， 它是一个特殊的值，如果遍历完了仍有元素的值为 0，则说明遍历旧子序列的过程中没有处理过这个节点，这个节点是新添加的。</p>\n<p>下面我们说说具体的操作过程：正序遍历旧子序列，根据前面建立的 keyToNewIndexMap 查找旧子序列中的节点在新子序列中的索引，如果找不到就说明新子序列中没有该节点，就删除它；如果找得到则将它在旧子序列中的索引更新到 newIndexToOldIndexMap 中。</p>\n<p>注意这里索引加了长度为 1 的偏移，是为了应对 i 为 0 的特殊情况，如果不这样处理就会影响后续求解最长递增子序列。</p>\n<p>遍历过程中，我们用变量 maxNewIndexSoFar 跟踪判断节点是否移动，maxNewIndexSoFar 始终存储的是上次求值的 newIndex，一旦本次求值的 newIndex 小于 maxNewIndexSoFar，这说明顺序遍历旧子序列的节点在新子序列中的索引并不是一直递增的，也就说明存在移动的情况。</p>\n<p>除此之外，这个过程中我们也会更新新旧子序列中匹配的节点，另外如果所有新的子序列节点都已经更新，而对旧子序列遍历还未结束，说明剩余的节点就是多余的，删除即可。</p>\n<p>至此，我们完成了新旧子序列节点的更新、多余旧节点的删除，并且建立了一个 newIndexToOldIndexMap 存储新子序列节点的索引和旧子序列节点的索引之间的映射关系，并确定是否有移动。</p>\n<p><img src=\"/images/diff-vue-react/1716200275355.png\" alt=\"1716200275355\"></p>\n<p>可以看到， c、d、e 节点被更新，f 节点被删除，newIndexToOldIndexMap 的值为 [5, 3, 4 ,0]，此时 moved 也为 true，也就是存在节点移动的情况。</p>\n<h5 id=\"移动和挂载新节点\"><a href=\"#移动和挂载新节点\" class=\"headerlink\" title=\"移动和挂载新节点\"></a>移动和挂载新节点</h5><p>接下来，就到了处理未知子序列的最后一个流程，移动和挂载新节点，我们来看一下这部分逻辑的实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">patchKeyedChildren</span> = (<span class=\"params\">c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> l2 = c2.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e1 = c1.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 新子节点的尾部索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> e2 = l2 - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 1. 从头部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 0, e1 = 6, e2 = 7</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c d e f g</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) e c d h f g</span></span><br><span class=\"line\">  <span class=\"comment\">// 2. 从尾部开始同步</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 6, e2 = 7</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) c (d e)</span></span><br><span class=\"line\">  <span class=\"comment\">// (a b) (d e)</span></span><br><span class=\"line\">  <span class=\"comment\">// 3. 普通序列挂载剩余的新节点， 不满足</span></span><br><span class=\"line\">  <span class=\"comment\">// 4. 普通序列删除多余的节点，不满足</span></span><br><span class=\"line\">  <span class=\"comment\">// i = 2, e1 = 4, e2 = 5</span></span><br><span class=\"line\">  <span class=\"comment\">// 旧子节点开始索引，从 i 开始记录</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> s1 = i</span><br><span class=\"line\">  <span class=\"comment\">// 新子节点开始索引，从 i 开始记录</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> s2 = i <span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"comment\">// 5.1 根据 key 建立新子序列的索引图</span></span><br><span class=\"line\">  <span class=\"comment\">// 5.2 正序遍历旧子序列，找到匹配的节点更新，删除不在新子序列中的节点，判断是否有移动节点</span></span><br><span class=\"line\">  <span class=\"comment\">// 5.3 移动和挂载新节点</span></span><br><span class=\"line\">  <span class=\"comment\">// 仅当节点移动时生成最长递增子序列</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> increasingNewIndexSequence = moved</span><br><span class=\"line\">    ? <span class=\"title function_\">getSequence</span>(newIndexToOldIndexMap)</span><br><span class=\"line\">    : <span class=\"variable constant_\">EMPTY_ARR</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> j = increasingNewIndexSequence.<span class=\"property\">length</span> - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\">// 倒序遍历以便我们可以使用最后更新的节点作为锚点</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = toBePatched - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextIndex = s2 + i</span><br><span class=\"line\">    <span class=\"keyword\">const</span> nextChild = c2[nextIndex]</span><br><span class=\"line\">    <span class=\"comment\">// 锚点指向上一个更新的节点，如果 nextIndex 超过新子节点的长度，则指向 parentAnchor</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> anchor = nextIndex + <span class=\"number\">1</span> &lt; l2 ? c2[nextIndex + <span class=\"number\">1</span>].<span class=\"property\">el</span> : parentAnchor</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newIndexToOldIndexMap[i] === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 挂载新的子节点</span></span><br><span class=\"line\">      <span class=\"title function_\">patch</span>(<span class=\"literal\">null</span>, nextChild, container, anchor, parentComponent, parentSuspense, isSVG)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (moved) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 没有最长递增子序列（reverse 的场景）或者当前的节点索引不在最长递增子序列中，需要移动</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j &lt; <span class=\"number\">0</span> || i !== increasingNewIndexSequence[j]) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">move</span>(nextChild, container, anchor, <span class=\"number\">2</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 倒序递增子序列</span></span><br><span class=\"line\">        j--</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们前面已经判断了是否移动，如果 moved 为 true 就通过 getSequence(newIndexToOldIndexMap) 计算最长递增子序列，这部分算法我会放在后文详细介绍。</p>\n<p>接着我们采用倒序的方式遍历新子序列，因为倒序遍历可以方便我们使用最后更新的节点作为锚点。在倒序的过程中，锚点指向上一个更新的节点，然后判断 newIndexToOldIndexMap[i] 是否为 0，如果是则表示这是新节点，就需要挂载它；接着判断是否存在节点移动的情况，如果存在的话则看节点的索引是不是在最长递增子序列中，如果在则倒序最长递增子序列，否则把它移动到锚点的前面。</p>\n<p>为了便于你更直观地理解，我们用前面的例子展示一下这个过程，此时 toBePatched 的值为 4，j 的值为 1，最长递增子序列 increasingNewIndexSequence 的值是 [1, 2]。在倒序新子序列的过程中，首先遇到节点 i，发现它在 newIndexToOldIndexMap 中的值是 0，则说明它是新节点，我们需要挂载它；然后继续遍历遇到节点 d，因为 moved 为 true，且 d 的索引存在于最长递增子序列中，则执行 j– 倒序最长递增子序列，j 此时为 0；接着继续遍历遇到节点 c，它和 d 一样，索引也存在于最长递增子序列中，则执行 j–，j 此时为 -1；接着继续遍历遇到节点 e，此时 j 是 -1 并且 e 的索引也不在最长递增子序列中，所以做一次移动操作，把 e 节点移到上一个更新的节点，也就是 c 节点的前面。</p>\n<p>新子序列倒序完成，即完成了新节点的插入和旧节点的移动操作，也就完成了整个核心 diff 算法对节点的更新。</p>\n<p><img src=\"/images/diff-vue-react/1716200731849.png\" alt=\"1716200731849\"></p>\n<p>可以看到新子序列中的新节点 i 被挂载，旧子序列中的节点 e 移动到了 c 节点前面，至此，我们就在已知旧子节点 DOM 结构和 vnode、新子节点 vnode 的情况下，求解出生成新子节点的 DOM 的更新、移动、删除、新增等系列操作，并且以一种较小成本的方式完成 DOM 更新。</p>\n<p>我们知道了子节点更新调用的是 patch 方法， Vue.js 正是通过这种递归的方式完成了整个组件树的更新。</p>\n"},{"title":"Hexo：问题记录","url":"/2023/06/20/hexo-summary/","content":"<p>记录搭建 hexo 博客网站后，在扩展功能问题上的摸索。</p>\n<span id=\"more\"></span>\n\n<p>背景：使用 hexo ocean 主题搭建。</p>\n<h3 id=\"图片预览放大功能\"><a href=\"#图片预览放大功能\" class=\"headerlink\" title=\"图片预览放大功能\"></a>图片预览放大功能</h3><blockquote>\n<p>参考文章: <a href=\"http://gaothink.top/2020/03/31/%E6%9D%82%E8%AE%B0-Hexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7%E5%8A%9F%E8%83%BD/\">Hexo 添加图片放大功能</a></p>\n</blockquote>\n<p>本站图片文字太小，需要放大才能看清，于是想添加图片放大功能。发现 Ocean 主题是自带的，需要在配置文件(&#x2F;themes&#x2F;ocean&#x2F;_config.yml)中开启。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">fancybox</span></span><br><span class=\"line\">fancybox: true</span><br></pre></td></tr></table></figure>\n\n<p>配置后行不通，然后查看了 <a href=\"https://fancyapps.com/fancybox/getting-started/\">fancybox</a> 的官方文档和页面元素，原来是使用上出现了问题。这个库需要手动在图片代码上添加代码，而 Hexo 本身编译完的代码并不会帮我们主动处理，正确用法如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;image-a.jpeg&quot;</span> <span class=\"attr\">data-fancybox</span> <span class=\"attr\">data-caption</span>=<span class=\"string\">&quot;Single image&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;thumbnail-a.jpeg&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接着想着这样的事还是交给自动化吧，在 <code>/themes/ocean/js/</code> 文件夹下新增 <code>wrapImage.js</code> 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$(<span class=\"variable language_\">document</span>).<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">wrapImageWithFancyBox</span>();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Wrap images with fancybox support.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">wrapImageWithFancyBox</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    $(<span class=\"string\">&#x27;img&#x27;</span>).<span class=\"title function_\">not</span>(<span class=\"string\">&#x27;.sidebar-image img&#x27;</span>).<span class=\"title function_\">not</span>(<span class=\"string\">&#x27;#author-avatar img&#x27;</span>).<span class=\"title function_\">not</span>(<span class=\"string\">&quot;.mdl-menu img&quot;</span>).<span class=\"title function_\">not</span>(<span class=\"string\">&quot;.something-else-logo img&quot;</span>).<span class=\"title function_\">not</span>(<span class=\"string\">&#x27;[title=notice]&#x27;</span>).<span class=\"title function_\">each</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> $image = $(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> imageCaption = $image.<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;alt&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> $imageWrapLink = $image.<span class=\"title function_\">parent</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ($imageWrapLink.<span class=\"title function_\">size</span>() &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> src = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;src&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">var</span> idx = src.<span class=\"title function_\">lastIndexOf</span>(<span class=\"string\">&#x27;?&#x27;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (idx != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                src = src.<span class=\"title function_\">substring</span>(<span class=\"number\">0</span>, idx);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $imageWrapLink = $image.<span class=\"title function_\">wrap</span>(<span class=\"string\">&#x27;&lt;a href=&quot;&#x27;</span> + src + <span class=\"string\">&#x27;&quot;&gt;&lt;/a&gt;&#x27;</span>).<span class=\"title function_\">parent</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        $imageWrapLink.<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;data-fancybox&#x27;</span>, <span class=\"string\">&#x27;images&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (imageCaption) &#123;</span><br><span class=\"line\">            $imageWrapLink.<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;data-caption&#x27;</span>, imageCaption);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    $(<span class=\"string\">&#x27;[data-fancybox=&quot;images&quot;]&#x27;</span>).<span class=\"title function_\">fancybox</span>(&#123;</span><br><span class=\"line\">      buttons : [ </span><br><span class=\"line\">        <span class=\"string\">&#x27;slideShow&#x27;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&#x27;thumbs&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;zoom&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;fullScreen&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;close&#x27;</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      thumbs : &#123;</span><br><span class=\"line\">        autoStart : <span class=\"literal\">false</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后一步，在 <code>/themes/ocean/layout/_partial/after-footer.ejs</code> 引入 <code>wrapImage.js</code> 文件即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;% <span class=\"keyword\">if</span> (theme.<span class=\"property\">fancybox</span>)&#123; %&gt;</span><br><span class=\"line\">&lt;%- <span class=\"title function_\">js</span>(<span class=\"string\">&#x27;js/wrapImage&#x27;</span>) %&gt;</span><br><span class=\"line\">&lt;%- <span class=\"title function_\">js</span>(<span class=\"string\">&#x27;fancybox/jquery.fancybox.min&#x27;</span>) %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文章搜索功能\"><a href=\"#文章搜索功能\" class=\"headerlink\" title=\"文章搜索功能\"></a>文章搜索功能</h3>"},{"title":"WEB：常用 git 命令备忘录","url":"/2023/05/23/common-git/","content":"<p>虽然平时使用习惯 <code>vscode</code> 的 <code>git</code> 插件功能，但还是得记住常用的 <code>git</code> 命令。</p>\n<span id=\"more\"></span>\n\n<p>一般来说，日常使用只要记住下图6个命令，就可以了。</p>\n<p><img src=\"/images/common-git/all.png\" alt=\"总结\"></p>\n<p>几个专用名词的译名如下:</p>\n<ul>\n<li>Workspace：工作区（本地文件）</li>\n<li>Index &#x2F; Stage：暂存区</li>\n<li>Repository：仓库区（或本地仓库）</li>\n<li>Remote：远程仓库</li>\n</ul>\n<p><strong>关于常用的 git 命令，可以直接查看阮一峰大佬的 <a href=\"https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\">常用 Git 命令清单</a>。</strong></p>\n<h3 id=\"从下载到更新项目的命令\"><a href=\"#从下载到更新项目的命令\" class=\"headerlink\" title=\"从下载到更新项目的命令\"></a>从下载到更新项目的命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载一个项目和它的整个代码历史</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">clone</span> [url]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">切换到指定分支，并更新工作区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout [branch-name]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">取回远程仓库的变化，并与本地分支合并</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git pull [remote] [branch]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加当前目录的所有文件到暂存区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git add .</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">提交暂存区到仓库区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit -m [message]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">上传本地指定分支到远程仓库</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push [remote] [branch]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"开发时使用频率高的命令\"><a href=\"#开发时使用频率高的命令\" class=\"headerlink\" title=\"开发时使用频率高的命令\"></a>开发时使用频率高的命令</h3><h4 id=\"重写-commit-的提交信息\"><a href=\"#重写-commit-的提交信息\" class=\"headerlink\" title=\"重写 commit 的提交信息\"></a>重写 commit 的提交信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">改写上一次commit的提交信息</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git commit --amend -m [message]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"回滚-commit\"><a href=\"#回滚-commit\" class=\"headerlink\" title=\"回滚 commit\"></a>回滚 commit</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git reset --hard [commit]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git push --force</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"回滚-add\"><a href=\"#回滚-add\" class=\"headerlink\" title=\"回滚 add\"></a>回滚 add</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">恢复暂存区的所有文件到工作区</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git checkout .</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"缓存已修改的文件\"><a href=\"#缓存已修改的文件\" class=\"headerlink\" title=\"缓存已修改的文件\"></a>缓存已修改的文件</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">暂时将未提交的变化移除，稍后再移入</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git stash</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git stash pop</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"排查时使用频率高的命令\"><a href=\"#排查时使用频率高的命令\" class=\"headerlink\" title=\"排查时使用频率高的命令\"></a>排查时使用频率高的命令</h3><h4 id=\"查看变更文件信息\"><a href=\"#查看变更文件信息\" class=\"headerlink\" title=\"查看变更文件信息\"></a>查看变更文件信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示有变更的文件</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git status</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示暂存区和工作区的差异</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git diff</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示指定文件是什么人在什么时间修改过</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git blame [file]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看版本历史\"><a href=\"#查看版本历史\" class=\"headerlink\" title=\"查看版本历史\"></a>查看版本历史</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示当前分支的版本历史</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示指定文件相关的每一次diff</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> -p [file]</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">搜索提交历史，根据关键词</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"built_in\">log</span> -S [keyword]</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示当前分支的最近几次提交</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">git reflog</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>常用命令速查表</p>\n<p><img src=\"/images/common-git/shell.png\" alt=\"常用命令速查表\"></p>\n<p>参考文章：</p>\n<p><a href=\"https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\">常用 Git 命令清单</a></p>\n"},{"title":"WEB：webpack tapable","url":"/2023/05/09/web-webpack-tapable/","content":"<p> <code>Webpack</code> 的插件体系是一种基于 <a href=\"https://github.com/webpack/tapable\">Tapable</a> 实现的强耦合架构，在特定时机触发钩子时会附带上足够的上下文信息。插件定义的钩子回调中，能也只能与这些上下文背后的数据结构、接口交互产生 side effect，进而影响到编译状态和后续流程。</p>\n<span id=\"more\"></span>\n\n<p><code>tapable</code> 可以说是增强版的<strong>发布订阅模式</strong>，类似的库还有不少：</p>\n<ul>\n<li><code>redux</code> 的 <code>subscribe</code> 和 <code>dispatch</code></li>\n<li><code>Node.js</code> 的 <code>EventEmitter</code></li>\n<li><code>redux-saga</code> 的 <code>take</code> 和 <code>put</code></li>\n</ul>\n<h3 id=\"基础用法\"><a href=\"#基础用法\" class=\"headerlink\" title=\"基础用法\"></a>基础用法</h3><p><code>Tapable</code> 的基础用法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">SyncHook</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;tapable&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 创建钩子实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sleep = <span class=\"keyword\">new</span> <span class=\"title class_\">SyncHook</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 调用订阅接口注册回调</span></span><br><span class=\"line\">sleep.<span class=\"title function_\">tap</span>(<span class=\"string\">&quot;test&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;callback A&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 调用发布接口触发回调</span></span><br><span class=\"line\">sleep.<span class=\"title function_\">call</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 运行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// callback A</span></span><br></pre></td></tr></table></figure>\n\n<p>使用 Tapable 时通常需要经历三个步骤：</p>\n<ul>\n<li>创建钩子实例；</li>\n<li>调用订阅接口注册回调，包括：tap、tapAsync、tapPromise；</li>\n<li>调用发布接口触发回调，包括：call、callAsync、promise。</li>\n</ul>\n<h3 id=\"具体用法\"><a href=\"#具体用法\" class=\"headerlink\" title=\"具体用法\"></a>具体用法</h3><p>查看源码，发现官方提供的 API，<a href=\"https://github1s.com/webpack/tapable\">Readme 传送门</a>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">SyncHook</span>,</span><br><span class=\"line\">    <span class=\"title class_\">SyncBailHook</span>,</span><br><span class=\"line\">    <span class=\"title class_\">SyncWaterfallHook</span>,</span><br><span class=\"line\">    <span class=\"title class_\">SyncLoopHook</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AsyncParallelHook</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AsyncParallelBailHook</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AsyncSeriesHook</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AsyncSeriesBailHook</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AsyncSeriesLoopHook</span>,</span><br><span class=\"line\">    <span class=\"title class_\">AsyncSeriesWaterfallHook</span></span><br><span class=\"line\"> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;tapable&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>Tabable 提供如下类型的钩子：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>简介</th>\n<th>统计</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>SyncHook</code></td>\n<td>同步钩子</td>\n<td>Webpack 共出现 71 次，如 <code>Compiler.hooks.compilation</code></td>\n</tr>\n<tr>\n<td><code>SyncBailHook</code></td>\n<td>同步熔断钩子</td>\n<td>Webpack 共出现 66 次，如 <code>Compiler.hooks.shouldEmit</code></td>\n</tr>\n<tr>\n<td><code>SyncWaterfallHook</code></td>\n<td>同步瀑布流钩子</td>\n<td>Webpack 共出现 37 次，如 <code>Compilation.hooks.assetPath</code></td>\n</tr>\n<tr>\n<td><code>SyncLoopHook</code></td>\n<td>同步循环钩子</td>\n<td>Webpack 中未使用</td>\n</tr>\n<tr>\n<td><code>AsyncParallelHook</code></td>\n<td>异步并行钩子</td>\n<td>Webpack 仅出现 1 次：<code>Compiler.hooks.make</code></td>\n</tr>\n<tr>\n<td><code>AsyncParallelBailHook</code></td>\n<td>异步并行熔断钩子</td>\n<td>Webpack 中未使用</td>\n</tr>\n<tr>\n<td><code>AsyncSeriesHook</code></td>\n<td>异步串行钩子</td>\n<td>Webpack 共出现 16 次，如 <code>Compiler.hooks.done</code></td>\n</tr>\n<tr>\n<td><code>AsyncSeriesBailHook</code></td>\n<td>异步串行熔断钩子</td>\n<td>Webpack 中未使用</td>\n</tr>\n<tr>\n<td><code>AsyncSeriesLoopHook</code></td>\n<td>异步串行循环钩子</td>\n<td>Webpack 中未使用</td>\n</tr>\n<tr>\n<td><code>AsyncSeriesWaterfallHook</code></td>\n<td>异步串行瀑布流钩子</td>\n<td>Webpack 共出现 5 次，如 <code>NormalModuleFactory.hooks.beforeResolve</code></td>\n</tr>\n</tbody></table>\n<p>类型虽多，但整体遵循两种分类规则：</p>\n<p>按回调逻辑，分为：</p>\n<ul>\n<li>基本类型，名称不带 Waterfall&#x2F;Bail&#x2F;Loop 关键字：与通常 订阅&#x2F;回调 模式相似，按钩子注册顺序，逐次调用回调；</li>\n<li>waterfall 类型：前一个回调的返回值会被带入下一个回调；</li>\n<li>bail 类型：逐次调用回调，若有任何一个回调返回非 undefined 值，则终止后续调用；</li>\n<li>loop 类型：逐次、循环调用，直到所有回调函数都返回 undefined 。</li>\n</ul>\n<p>按执行回调的并行方式，分为：</p>\n<ul>\n<li>sync ：同步执行，启动后会按次序逐个执行回调，支持 call&#x2F;tap 调用语句；</li>\n<li>async ：异步执行，支持传入 callback 或 promise 风格的异步回调函数，支持 callAsync&#x2F;tapAsync 、promise&#x2F;tapPromise 两种调用语句</li>\n</ul>\n<p><strong>查看 <a href=\"https://webpack.js.org/api/compiler-hooks/\">webpack plugin hook</a> 类型与用法。</strong></p>\n<blockquote>\n<p>提示：Webpack 官方文档并没有覆盖介绍所有钩子，必要时建议读者直接翻阅 Webpack 源码，分析钩子类型。</p>\n</blockquote>\n<p>虽然多数情况下我们不需要手动调用 Tapable，但编写插件时可以借助这些知识，识别 Hook 类型与执行特性后，正确地调用，正确地实现交互。</p>\n<h3 id=\"高级特性\"><a href=\"#高级特性\" class=\"headerlink\" title=\"高级特性\"></a>高级特性</h3><h4 id=\"Intercept\"><a href=\"#Intercept\" class=\"headerlink\" title=\"Intercept\"></a>Intercept</h4><h4 id=\"HookMap\"><a href=\"#HookMap\" class=\"headerlink\" title=\"HookMap\"></a>HookMap</h4><h3 id=\"原理浅析\"><a href=\"#原理浅析\" class=\"headerlink\" title=\"原理浅析\"></a>原理浅析</h3><p>Hook 动态编译</p>\n<p><img src=\"/images/webpack-tapable/image.png\" alt=\"alt text\"></p>\n<p>编译过程主要涉及三个实体：</p>\n<ul>\n<li>tapable&#x2F;lib&#x2F;SyncHook.js ：定义 SyncHook 的入口文件；</li>\n<li>tapable&#x2F;lib&#x2F;Hook.js ：SyncHook 只是一个代理接口，内部实际上调用了 Hook 类，由 Hook 负责实现钩子的逻辑（其它钩子也是一样的套路）；</li>\n<li>tapable&#x2F;lib&#x2F;HookCodeFactory.js ：动态编译出 call、callAsync、promise 函数内容的工厂类，注意，其他钩子也都会用到 HookCodeFactory 工厂函数。</li>\n</ul>\n<p>tapable 提供的大多数特性都是基于 Hook + HookCodeFactory 实现的</p>\n<p>参考文章：</p>\n<p><a href=\"https://dennisgo.cn/Articles/Engineering/tapable-source-code.html\">webpack核心模块tapable源码解析</a></p>\n"},{"title":"WEB：Next Nuxt Nest 傻傻分不清楚","url":"/2023/04/18/next-nuxt-nest/","content":"<p><code>Next</code> 和 <code>Nuxt</code> 是常见的 <code>SSR</code> 框架，而 <code>Nest</code> 是 <code>Nodejs</code> 服务器端应用的框架。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Nuxt-Vue\"><a href=\"#Nuxt-Vue\" class=\"headerlink\" title=\"Nuxt(Vue)\"></a>Nuxt(Vue)</h3><blockquote>\n<p><a href=\"https://nuxt.com.cn/\">Nuxt</a> 是一个开源框架，它提供了一种直观且可扩展的方式来创建类型安全、高性能和生产级别的全栈Web应用和网站，使用的是Vue.js。</p>\n</blockquote>\n<h3 id=\"Next-React\"><a href=\"#Next-React\" class=\"headerlink\" title=\"Next(React)\"></a>Next(React)</h3><blockquote>\n<p><a href=\"https://www.nextjs.cn/\">Nextjs</a> 为您提供生产环境所需的所有功能以及最佳的开发体验：包括静态及服务器端融合渲染、 支持 TypeScript、智能化打包、 路由预取等功能 无需任何配置。</p>\n</blockquote>\n<h3 id=\"Nest-Turbo\"><a href=\"#Nest-Turbo\" class=\"headerlink\" title=\"Nest(Turbo)\"></a>Nest(Turbo)</h3><blockquote>\n<p><a href=\"https://nest.nodejs.cn/#google_vignette\">Nest</a> (NestJS) 是一个用于构建高效、可扩展的 Node.js 服务器端应用的框架。它使用渐进式 JavaScript，构建并完全支持 TypeScript（但仍然允许开发者使用纯 JavaScript 进行编码）并结合了 OOP（面向对象编程）、FP（函数式编程）和 FRP（函数式反应式编程）的元素。</p>\n</blockquote>\n<p>后续有时间再详细研究。</p>\n"},{"title":"WEB：Vue SSR","url":"/2023/04/13/vue-ssr/","content":"<p>SSR（Server-Side Rendering）: 服务端渲染，那它到底跟客户端渲染（CSR）有什么区别呢？</p>\n<span id=\"more\"></span>\n\n<hr>\n<p><strong><code>SSR</code> 指由服务侧完成页面的 <code>HTML</code> 结构拼接的页面处理技术，（把渲染完毕的 html 页面）发送到浏览器，然后为其绑定状态与事件，成为完全可交互页面的过程。</strong></p>\n<p>可以先分析两者在返回数据时的具体表现：</p>\n<p>CSR:</p>\n<p><img src=\"/images/vue-ssr/csr.png\" alt=\"CSR\"></p>\n<p>SSR:</p>\n<p><img src=\"/images/vue-ssr/ssr.png\" alt=\"SSR\"></p>\n<p>SSR、CSR、同构渲染之间的对比：</p>\n<table>\n    <tr>\n        <td></td>\n        <td>SSR</td>\n        <td>CSR</td>\n        <td>同构渲染</td>\n    </tr>\n    <tr>\n        <td>SEO</td>\n        <td>友好</td>\n        <td>不友好</td>\n        <td>友好</td>\n    </tr>\n    <tr>\n        <td>白屏问题</td>\n        <td>无</td>\n        <td>有</td>\n        <td>无</td>\n    </tr>\n    <tr>\n        <td>占用服务端资源</td>\n        <td>多</td>\n        <td>少</td>\n        <td>中</td>\n    </tr>\n    <tr>\n        <td>用户体验</td>\n        <td>差</td>\n        <td>好</td>\n        <td>好</td>\n    </tr>\n</table>\n\n<p>关于 <code>SSR</code> 与 <code>CSR</code> 的区别，在 <code>Vue SSR</code> 文章中已经给出了答案。具体可看 <a href=\"https://cn.vuejs.org/guide/scaling-up/ssr\">服务端渲染 (SSR)</a>：</p>\n<ul>\n<li>更好的 SEO：搜索引擎爬虫可以直接看到完全渲染的页面（<strong>首要原因，官网项目首选</strong>）。</li>\n<li>更快的首屏加载：减少浏览器请求数量（内部管理系统项目一般不考虑 SSR，不太在乎渲染速度）。</li>\n<li>统一的心智模型：前后端开发语言一致（Javascript）。</li>\n</ul>\n<hr>\n<p><strong>关键词：<code>renderToString</code>、<code>createSSRApp</code>、<code>vue-server-renderer</code>、服务端首屏渲染、客户端激活</strong>。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>完成 SSR 的两大核心步骤：<strong>服务端首屏渲染</strong>和<strong>客户端激活</strong>。</p>\n<p><img src=\"/images/vue-ssr/ssr-summary.png\" alt=\"ssr-summary\"></p>\n<p>简述：关注图片 <code>webpack</code> 右侧打包后的文件。</p>\n<ul>\n<li>第一步 <code>Server Bundle</code> 文件用于在服务端渲染生成 <code>html</code> 页面 <strong><code>&lt;body&gt;</code> 内容</strong>（string），然后嵌入到 html 模板里面。</li>\n<li>第二步 <code>Client Bundle</code> 文件直接嵌入到 <code>html</code> 页面的 <strong><code>&lt;script&gt;</code> 标签</strong>中，在浏览器渲染时用于激活 vue 实例（<strong>只激活不重新挂载渲染</strong>）。</li>\n</ul>\n<h4 id=\"服务端首屏渲染\"><a href=\"#服务端首屏渲染\" class=\"headerlink\" title=\"服务端首屏渲染\"></a>服务端首屏渲染</h4><p>同构代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.js (在服务器和客户端之间共享)</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createSSRApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createApp</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">createSSRApp</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: <span class=\"function\">() =&gt;</span> (&#123; <span class=\"attr\">count</span>: <span class=\"number\">1</span> &#125;),</span><br><span class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">`&lt;button @click=&quot;count++&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;`</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>小插曲：【同构】的含义是，同样一套代码即可以在服务端运行，也可以在客户端运行（Vue.js 的组件即可以在服务端运行，被渲染为 HTML 字符串；也可以在客户端运行，就像普通的 CSR 应用程序一样）。 <strong><font color=\"red\">同构渲染，组件的代码会在服务端和客户端分别执行一次。</font></strong></p>\n<p>服务端代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server.js 此文件运行在 Node.js 服务器上</span></span><br><span class=\"line\"><span class=\"comment\">// Vue 的服务端渲染 API 位于 `vue/server-renderer` 路径下</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; renderToString &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue/server-renderer&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>()</span><br><span class=\"line\"><span class=\"title function_\">renderToString</span>(app).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">html</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">send</span>(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;head&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;title&gt;Vue SSR Example&lt;/title&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/head&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;body&gt;</span></span><br><span class=\"line\"><span class=\"string\">        &lt;div id=&quot;app&quot;&gt;<span class=\"subst\">$&#123;html&#125;</span>&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;/body&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/html&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://cn.vuejs.org/api/ssr.html\">核心 API</a>：<code>renderToString</code></p>\n<p><code>renderToString()</code> 接收一个<strong>Vue 应用实例</strong>作为参数，返回一个 Promise，当 Promise resolve 时得到应用渲染的 HTML，嵌入到 HTML 模板中并返回给浏览器。</p>\n<h4 id=\"客户端激活-hydration\"><a href=\"#客户端激活-hydration\" class=\"headerlink\" title=\"客户端激活(hydration)\"></a>客户端激活(hydration)</h4><p>客户端激活指的是 Vue 在<strong>浏览器端</strong>接管由服务端发送的静态 HTML，使其变为由 Vue 管理的动态 DOM 的过程。</p>\n<p>在浏览器运行时主要做两件事：</p>\n<ul>\n<li>在页面中的 <code>DOM</code> 元素与虚拟节点对象之间建立联系</li>\n<li>为页面中的 <code>DOM</code> 元素添加事件绑定（服务端渲染时会忽略节点中与事件相关的 <code>props</code>）</li>\n</ul>\n<p><strong>但不会再次创建 <code>DOM</code> 元素。</strong></p>\n<p>客户端代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// client.js 该文件运行在浏览器中</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./app.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在客户端挂载一个 SSR 应用时会假定</span></span><br><span class=\"line\"><span class=\"comment\">// HTML 是预渲染的，然后执行激活过程，</span></span><br><span class=\"line\"><span class=\"comment\">// 而不是挂载新的 DOM 节点</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>().<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>&lt;script type=&quot;module&quot; src=&quot;/client.js&quot;&gt;&lt;/script&gt;</code> 添加到 HTML 外壳以加载客户端入口文件。</p>\n<p>总结: 只在首屏渲染时获取一次 html 文件，<strong>激活完成后，整个应用程序已经完全被 <code>Vue.js</code> 接管为 <code>CSR</code> 应用程序了</strong>。后续路由变化或等事件都是请求 js 文件，真正地复用 <code>Vue.js</code> 的 spa 功能。</p>\n<p><a href=\"/vue-ssr-example.zip\">代码完整实例</a>，可自行下载运行。</p>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><h4 id=\"Nuxt\"><a href=\"#Nuxt\" class=\"headerlink\" title=\"Nuxt\"></a>Nuxt</h4><p>可移步至  <a href=\"https://zeuscoder.github.io/2023/04/18/next-nuxt-nest/\">WEB：Next Nuxt Nest 傻傻分不清楚</a></p>\n<h4 id=\"Vite-SSR\"><a href=\"#Vite-SSR\" class=\"headerlink\" title=\"Vite SSR\"></a>Vite SSR</h4><p>参考文章：</p>\n<p><a href=\"https://cn.vuejs.org/guide/scaling-up/ssr\">服务端渲染 (SSR)</a></p>\n<p><a href=\"https://juejin.cn/post/6950802238524620837?searchId=20240321112333AB6B0212A536DE53B864\">理解Vue SSR原理，搭建项目框架</a></p>\n<p><a href>Vue.js 设计与实现 第六篇：服务端渲染</a></p>\n"},{"title":"随笔：论自己的博客风格","url":"/2023/03/22/write-blog/","content":"<p>每年都会断断续续地写几篇博客，自然而然也形成了自己写博客的风格。</p>\n<span id=\"more\"></span>\n\n<blockquote>\n<p>全篇为个人观点，论述自己喜欢的博客风格，也希望自己可以形成的博客风格，不论对错。</p>\n</blockquote>\n<p>我偏好开门见山，言简意赅，一针见血。</p>\n<p><strong>开篇先浓缩总结，表明观点，正文再娓娓道来，图文并茂，最后再来总结一番。</strong></p>\n<p>开篇部分希望可以看到浓缩版总结性言论（就简单几句话），先告诉我看的是什么，为什么，怎么做。</p>\n<p>我是典型的【拿走主义】，要是<strong>开篇再搭配上关键词和核心 API</strong>，就更完美了。</p>\n<p>如果开篇写得好，接下来正文的部分，我觉得可以不用看或者不用细看了。</p>\n<p><strong>正文部分，图文并茂当然是最好的（技术博客需要附上核心代码）。</strong>能用一张图说明的，没必要花大段文字总结。<em>二次阅读时</em>只需要简单观看图片就能了解文章。</p>\n<p><img src=\"/images/write-blog/blog.png\" alt=\"write-blog\"></p>\n<p>关于图，可以是流程图、思维导图，说明彼此之间的关联和注意事项。</p>\n<p>对于一张图的好坏评判，就在于下一次翻阅文章时，是不是只看图片就能明白了。</p>\n<p>关于文字，是更难的，首先是自己能看懂，然后还得别人看懂。<font color=\"red\">特别在大段文字中，适当加上颜色或加重字号等特殊标记，提醒重点是什么。</font></p>\n<p>在此，对<em>修言大佬</em>表示深深的崇敬和谢意（我蹭一蹭热度），每次看到大佬的文章，都会给我一种和朋友交流技术的感觉，志同道合，收获满满。</p>\n"},{"title":"WEB：算法的那些套路儿","url":"/2023/01/22/web-algorithm/","content":"<p>算法这回事，用则进，不用则废；学而时习之，共勉之。学习前端算法惯用的套路，以不变应万变，<strong>从难到易</strong>。</p>\n<span id=\"more\"></span>\n\n<hr>\n<blockquote>\n<p>一句话总结：算法的本质就是「穷举」，而穷举有两个关键难点：<strong>无遗漏、无冗余</strong>。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>本文讲解题目全部来源于 <a href=\"https://leetcode.cn/problemset/\">leetcode</a>，请根据题目序号查看题目内容。</p>\n</blockquote>\n<hr>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p>数据结构的存储方式只有两种：<strong>数组（顺序存储）</strong> 和 <strong>链表（链式存储）</strong> ，其余可以先忽略不计。</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>数组（二维数组）的核心是<strong>初始化和遍历</strong>，以及很多常用的 API。</p>\n<p>数组初始化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = (<span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(<span class=\"number\">8</span>)).<span class=\"title function_\">fill</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 二维数组</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    arr[i] = []</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组遍历：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr[i], i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> newArr = arr.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">item, index</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item, index)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>常用 API：<code>concat</code>、<code>some</code>、<code>slice</code>、<code>splice</code>、<code>join</code>、<code>sort</code>、<code>pop</code>、<code>push</code> 等等。</p>\n<h3 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h3><p>链表中，数据单位的名称叫做“结点”，而结点和结点的分布，在内存中可以是离散的。</p>\n<p>结点数据结构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ListNode</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">next</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建结点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> node = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">node.<span class=\"property\">next</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p>插入结点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 如果目标结点本来不存在，那么记得手动创建</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> node3 = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">// 把node3的 next 指针指向 node2（即 node1.next）</span></span><br><span class=\"line\">node3.<span class=\"property\">next</span> = node1.<span class=\"property\">next</span></span><br><span class=\"line\"><span class=\"comment\">// 把node1的 next 指针指向 node3</span></span><br><span class=\"line\">node1.<span class=\"property\">next</span> = node3</span><br></pre></td></tr></table></figure>\n\n<p>删除结点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用 node1 可以定位到 node3</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> target = node1.<span class=\"property\">next</span></span><br><span class=\"line\">node1.<span class=\"property\">next</span> = target.<span class=\"property\">next</span></span><br></pre></td></tr></table></figure>\n\n<p>&#x2F;&#x2F; TODO：分析下链表的几项基础类型题目</p>\n<p>环形链表基本问题——如何判断链表是否成环？</p>\n<h3 id=\"二叉树（演变结构）\"><a href=\"#二叉树（演变结构）\" class=\"headerlink\" title=\"二叉树（演变结构）\"></a>二叉树（演变结构）</h3><p>二叉树结点的构造函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">TreeNode</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">left</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">right</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>二叉树问题的重中之重便是<strong>遍历</strong>及其相关的演变。先学会二叉树的各种遍历方式（四种）：</p>\n<ul>\n<li>前序遍历</li>\n<li>中序遍历</li>\n<li>后序遍历</li>\n<li>层次遍历</li>\n</ul>\n<p>前三种属于递归遍历，最后一种属于迭代遍历。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 所有遍历函数的入参都是树的根结点对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> traverse = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 前序位置</span></span><br><span class=\"line\">    <span class=\"comment\">// console.log(&#x27;当前遍历的结点值是：&#x27;, root.val)</span></span><br><span class=\"line\">    <span class=\"title function_\">traverse</span>(root.<span class=\"property\">left</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 中序位置</span></span><br><span class=\"line\">    <span class=\"title function_\">traverse</span>(root.<span class=\"property\">right</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 后序位置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：这里指的前中后顺序，关键就在于 <strong>root.val</strong> 语句的处理位置。</p>\n<h2 id=\"方法论\"><a href=\"#方法论\" class=\"headerlink\" title=\"方法论\"></a>方法论</h2><h3 id=\"动态规划（Dynamic-Programming，DP）\"><a href=\"#动态规划（Dynamic-Programming，DP）\" class=\"headerlink\" title=\"动态规划（Dynamic Programming，DP）\"></a>动态规划（Dynamic Programming，DP）</h3><p>核心思想：</p>\n<ul>\n<li>动态规划问题的一般形式就是<strong>求最值</strong>，求解动态规划的核心问题是<strong>穷举</strong>。因为要求最值，肯定要把所有可行的答案穷举出来，然后在其中找最值。</li>\n</ul>\n<p>问题特点：</p>\n<ul>\n<li><strong>只要求</strong> 给出达成某个目的的 <strong><code>解法个数或最终答案</code></strong></li>\n<li><strong>不要求</strong> 给出每一种解法对应的 <strong><code>具体路径</code></strong></li>\n</ul>\n<p>关键特征（三要素）：</p>\n<ul>\n<li>具备【最优子结构】：能够通过子问题的最值得到原问题的最值</li>\n<li>存在【重叠子问题】</li>\n<li>列出 【状态转移方程】</li>\n</ul>\n<p>解答技巧：</p>\n<ul>\n<li><strong>明确 base case</strong>（很关键的一步）</li>\n<li>明确【状态】</li>\n<li>明确【选择】</li>\n<li>定义 <strong>dp</strong> 数组&#x2F;函数的含义</li>\n</ul>\n<p>套路框架：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>典例分析：</p>\n<ul>\n<li>P509 【斐波那契数列】</li>\n</ul>\n<p>一、暴力递归</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fib = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span> || n === <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">fib</span>(n - <span class=\"number\">1</span>) + <span class=\"title function_\">fib</span>(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>缺点：每求一个中间值都会存在大量重复计算，这就是存在了 <strong>【重叠子问题】</strong> 。</p>\n<p>二、带备忘录的递归解法</p>\n<p>在动态规划中，常常会遇到子问题的重复计算。DP table （通常是一个数组）的主要作用是在求解过程中保存已解决的子问题的结果，以便在后续的计算中直接使用，从而避免了重复计算，提高了算法的效率。</p>\n<blockquote>\n<p>请注意，这里 table 长度为 n + 1，而 table[0] 一般不用。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fib = <span class=\"keyword\">function</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 备忘录全初始化为 0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> memo = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(n + <span class=\"number\">1</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 进行带备忘录的递归</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">dp</span>(memo, n);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 带着备忘录进行递归</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> dp = <span class=\"keyword\">function</span>(<span class=\"params\">memo, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"comment\">// 已经计算过，不用再计算了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (memo[n] != <span class=\"number\">0</span>) <span class=\"keyword\">return</span> memo[n];</span><br><span class=\"line\">    memo[n] = <span class=\"title function_\">dp</span>(memo, n - <span class=\"number\">1</span>) + <span class=\"title function_\">dp</span>(memo, n - <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memo[n];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/web-algorithm/numbers.png\" alt=\"状态转移方程\"></p>\n<p>三、dp 数组的迭代（递推）解法</p>\n<p>请注意：这次的解法是【自底向上】的，而前面两种是【自顶向下】的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> fib = <span class=\"keyword\">function</span>(<span class=\"params\">N</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (N === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> dp = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(N + <span class=\"number\">1</span>).<span class=\"title function_\">fill</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>; dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 状态转移</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">2</span>; i &lt;= N; i++) &#123;</span><br><span class=\"line\">        dp[i] = dp[i - <span class=\"number\">1</span>] + dp[i - <span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[N];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>P322 【零钱兑换】</li>\n</ul>\n<p>TODO: 描述解题技巧</p>\n<p><img src=\"/images/web-algorithm/coins.png\" alt=\"状态转移方程\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义：要凑出金额 n，至少要 dp(coins, n) 个硬币</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">coinChange</span>(<span class=\"params\">coins, amount</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// base case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (amount == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (amount &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"title class_\">Infinity</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> coin <span class=\"keyword\">of</span> coins) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 计算子问题的结果</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> subProblem = <span class=\"title function_\">coinChange</span>(coins, amount - coin);</span><br><span class=\"line\">        <span class=\"comment\">// 子问题无解则跳过</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (subProblem == -<span class=\"number\">1</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 在子问题中选择最优解，然后加一</span></span><br><span class=\"line\">        res = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(res, subProblem + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res == <span class=\"title class_\">Infinity</span> ? -<span class=\"number\">1</span> : res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>个人体验来说，我更喜欢自底向上的迭代算法，更直观，更容易理解。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> coinChange = <span class=\"keyword\">function</span>(<span class=\"params\">coins, amount</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dp = <span class=\"keyword\">new</span> <span class=\"title class_\">Array</span>(amount + <span class=\"number\">1</span>).<span class=\"title function_\">fill</span>(amount + <span class=\"number\">1</span>);</span><br><span class=\"line\">     <span class=\"comment\">// The size of the array is amount + 1, and the initial value is also amount + 1</span></span><br><span class=\"line\">    <span class=\"comment\">//  dp[i] represents the minimum number of coins needed for the amount i</span></span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// The outer loop is traversing all the values of all states</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; dp.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// The inner loop is to find the minimum value of all choices</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> coin <span class=\"keyword\">of</span> coins) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Sub-problems are unsolvable, skip</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i - coin &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[i] = <span class=\"title class_\">Math</span>.<span class=\"title function_\">min</span>(dp[i], <span class=\"number\">1</span> + dp[i - coin]);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (dp[amount] == amount + <span class=\"number\">1</span>) ? -<span class=\"number\">1</span> : dp[amount];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>相关问题：\n<a href=\"https://leetcode-cn.com/problems/climbing-stairs/description/\">70.排楼梯</a>\n<a href=\"https://leetcode-cn.com/problems/house-robber/descrip+tion/\">198. 打家劫舍</a></p>\n<h4 id=\"0-1-背包模型（动态规划升级版）\"><a href=\"#0-1-背包模型（动态规划升级版）\" class=\"headerlink\" title=\"0-1 背包模型（动态规划升级版）\"></a>0-1 背包模型（动态规划升级版）</h4><p>DP table 通常是一个数组，但在背包问题中，需要升级为二维数组，并求出对应二维下标的目标值是多少。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">int[][] dp[N+<span class=\"number\">1</span>][W+<span class=\"number\">1</span>]</span><br><span class=\"line\">dp[<span class=\"number\">0</span>][..] = <span class=\"number\">0</span></span><br><span class=\"line\">dp[..][<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> [<span class=\"number\">1.</span>.<span class=\"property\">N</span>]:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> w <span class=\"keyword\">in</span> [<span class=\"number\">1.</span>.<span class=\"property\">W</span>]:</span><br><span class=\"line\">        dp[i][w] = <span class=\"title function_\">max</span>(</span><br><span class=\"line\">            把物品 i 装进背包,</span><br><span class=\"line\">            不把物品 i 装进背包</span><br><span class=\"line\">        )</span><br><span class=\"line\"><span class=\"keyword\">return</span> dp[N][W]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"回溯算法（backtrack）\"><a href=\"#回溯算法（backtrack）\" class=\"headerlink\" title=\"回溯算法（backtrack）\"></a>回溯算法（backtrack）</h3><p>应用场景：排列、组合、子集问题。</p>\n<p>套路框架：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> backtrack = <span class=\"keyword\">function</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; root.<span class=\"property\">children</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> child = root.<span class=\"property\">children</span>[i];</span><br><span class=\"line\">    <span class=\"comment\">// 做选择</span></span><br><span class=\"line\">    <span class=\"title function_\">printf</span>(<span class=\"string\">&quot;从 &quot;</span> + root + <span class=\"string\">&quot; 到 &quot;</span> + child);</span><br><span class=\"line\">    <span class=\"title function_\">backtrack</span>(child);</span><br><span class=\"line\">    <span class=\"comment\">// 撤销选择</span></span><br><span class=\"line\">    <span class=\"title function_\">printf</span>(<span class=\"string\">&quot;从 &quot;</span> + child + <span class=\"string\">&quot; 到 &quot;</span> + root);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><span style=\"color: red\">牢记，核心中的核心：前序位置（的代码）是进入一个节点的时候，后序位置（的代码）是离开一个节点的时候！！！</span></p>\n<h3 id=\"BFS（广度优先搜素）\"><a href=\"#BFS（广度优先搜素）\" class=\"headerlink\" title=\"BFS（广度优先搜素）\"></a>BFS（广度优先搜素）</h3><p>BFS 算法都是用<strong>队列</strong>这种数据结构，每次将一个节点周围的所有节点加入队列。\n每次把下一行的所有节点先存放在队列中，放到下一次轮询来遍历，以此类推。</p>\n<p>套路框架：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">BFS</span>(<span class=\"params\">root</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = [] <span class=\"comment\">// 初始化队列queue</span></span><br><span class=\"line\">    <span class=\"comment\">// 根结点首先入队</span></span><br><span class=\"line\">    queue.<span class=\"title function_\">push</span>(root)</span><br><span class=\"line\">    <span class=\"comment\">// 队列不为空，说明没有遍历完全</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(queue.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> top = queue[<span class=\"number\">0</span>] <span class=\"comment\">// 取出队头元素</span></span><br><span class=\"line\">        <span class=\"comment\">// 访问 top</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(top.<span class=\"property\">val</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 如果左子树存在，左子树入队</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(top.<span class=\"property\">left</span>) &#123;</span><br><span class=\"line\">            queue.<span class=\"title function_\">push</span>(top.<span class=\"property\">left</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果右子树存在，右子树入队</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(top.<span class=\"property\">right</span>) &#123;</span><br><span class=\"line\">            queue.<span class=\"title function_\">push</span>(top.<span class=\"property\">right</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        queue.<span class=\"title function_\">shift</span>() <span class=\"comment\">// 访问完毕，队头元素出队</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 111 题「二叉树的最小深度」</p>\n<h3 id=\"二分搜索\"><a href=\"#二分搜索\" class=\"headerlink\" title=\"二分搜索\"></a>二分搜索</h3><p>适用数据类型：有序数组。</p>\n<h3 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h3><p>适用类型：数组、链表、字符串。</p>\n<p>双指针分两种类型：__快慢指针和左右指针（对撞指针）__。</p>\n<h4 id=\"滑动窗口（快慢指针）\"><a href=\"#滑动窗口（快慢指针）\" class=\"headerlink\" title=\"滑动窗口（快慢指针）\"></a>滑动窗口（快慢指针）</h4><p>适用数据类型：字符串、数组。</p>\n<p>套路框架：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> left = <span class=\"number\">0</span>, right = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"variable language_\">window</span> = [];</span><br><span class=\"line\"><span class=\"keyword\">while</span> (left &lt; right &amp;&amp; right &lt; s.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 增大窗口</span></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">add</span>(s[right]);</span><br><span class=\"line\">    right++;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"variable language_\">window</span> needs shrink) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 缩小窗口</span></span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"title function_\">remove</span>(s[left]);</span><br><span class=\"line\">        left++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运用滑动窗口算法，具体要回答下面几个问题：</p>\n<ol>\n<li>什么时候应该扩大窗口？</li>\n<li>什么时候应该缩小窗口？</li>\n<li>什么时候应该更新答案？</li>\n</ol>\n<h4 id=\"左右指针\"><a href=\"#左右指针\" class=\"headerlink\" title=\"左右指针\"></a>左右指针</h4><p>主要应用在<strong>数组和字符串</strong>上，因为该数据结构具备<strong>前后下标</strong>。</p>\n<p>关键字：<strong>有序</strong>和<strong>数组</strong>。</p>\n<p>相关问题：\n<a href=\"https://leetcode.cn/problems/two-sum/\">1.两数之和</a>\n<a href=\"https://leetcode.cn/problems/3sum/description/\">15. 三数之和</a></p>\n<h2 id=\"经验总结（重点浓缩版）\"><a href=\"#经验总结（重点浓缩版）\" class=\"headerlink\" title=\"经验总结（重点浓缩版）\"></a>经验总结（重点浓缩版）</h2><ol>\n<li>涉及链表操作、尤其是涉及结点删除的题目，建议大家写代码的时候直接把 dummy 节点（虚拟头节点）给用起来，建立好的编程习惯。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> dummy = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>()</span><br><span class=\"line\"><span class=\"comment\">// 这里的 head 是链表原有的第一个结点</span></span><br><span class=\"line\">dummy.<span class=\"property\">next</span> = head</span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"2\">\n<li>写算法题的小经验：如果有返回值，记得先写 return 。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dp</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> res = []</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>单链表常考的技巧就是双指针，特别出现【倒数】字眼（因为链表是不知道自身长度的）。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> removeNthFromEnd = <span class=\"keyword\">function</span>(<span class=\"params\">head, n</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 dummy 结点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> dummy = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>()</span><br><span class=\"line\">    <span class=\"comment\">// dummy指向头结点</span></span><br><span class=\"line\">    dummy.<span class=\"property\">next</span> = head</span><br><span class=\"line\">    <span class=\"comment\">// 初始化快慢指针，均指向dummy</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> fast = dummy</span><br><span class=\"line\">    <span class=\"keyword\">let</span> slow = dummy</span><br></pre></td></tr></table></figure>\n\n\n\n"},{"title":"WEB：前端学习网站指南","url":"/2022/04/19/web-study/","content":"<p>读书和学习是在别人思想和知识的帮助下，建立起自己的思想和知识。 —普希金</p>\n<span id=\"more\"></span>\n\n<hr>\n<h3 id=\"中文官网集\"><a href=\"#中文官网集\" class=\"headerlink\" title=\"中文官网集\"></a>中文官网集</h3><p>毕竟是中文官网，看起来还是容易点的。</p>\n<ul>\n<li><a href=\"https://docschina.org/\">印记中文</a></li>\n</ul>\n<h3 id=\"吃灰收藏集\"><a href=\"#吃灰收藏集\" class=\"headerlink\" title=\"吃灰收藏集\"></a>吃灰收藏集</h3><p>收藏从未停止，学习从未开始。既然你进来了，那就翻开看看吧。</p>\n<ul>\n<li><a href=\"https://github.com/zeuscoder?tab=stars\">github</a></li>\n<li><a href=\"https://juejin.cn/user/4283353030729480/collections\">juejin</a></li>\n</ul>\n<h3 id=\"付费收看区\"><a href=\"#付费收看区\" class=\"headerlink\" title=\"付费收看区\"></a>付费收看区</h3><p>什么都没有学会，就学会了花钱。学到就是赚到，升职加薪不是梦。</p>\n<ul>\n<li><a href=\"https://kaiwu.lagou.com/hasBuy/special\">拉勾教育</a></li>\n<li><a href=\"https://juejin.cn/my-course\">掘金小册</a></li>\n<li><a href=\"https://gitbook.cn/gitchat/ordered/columns\">GitChat</a></li>\n<li><a href=\"http://www.javascriptpeixun.cn/course/3709/task/248257/show#\">珠峰培训</a></li>\n</ul>\n<h3 id=\"前沿学习区\"><a href=\"#前沿学习区\" class=\"headerlink\" title=\"前沿学习区\"></a>前沿学习区</h3><p>除了上班，还要学习。学海无涯，总有一款你想看的前沿技术。</p>\n<ul>\n<li><a href=\"https://weekly.75.team/\">奇舞周刊</a></li>\n</ul>\n<h3 id=\"源码狂虐区\"><a href=\"#源码狂虐区\" class=\"headerlink\" title=\"源码狂虐区\"></a>源码狂虐区</h3><p><a href=\"https://cloud.tencent.com/developer/article/1581855\">看源码</a></p>\n<ul>\n<li><a href=\"https://react.iamkasong.com/preparation/idea.html#react%E7%90%86%E5%BF%B5\">React</a></li>\n<li><a href=\"https://react.jokcy.me/\">React</a></li>\n<li><a href=\"https://github.com/7kms/react-illustration-series\">React</a></li>\n<li><a href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=326#/detail/pc?id=4054\">Vue3</a></li>\n<li><a href=\"https://github.com/cuixiaorui/mini-vue\">Vue3</a></li>\n<li><a href=\"https://ustbhuangyi.github.io/vue-analysis/v2/prepare/\">Vue2</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=MzA3NTk4NjQ1OQ==&mid=2247484649&idx=1&sn=8ee67553193fda33e7c637568bb0a86f&chksm=9f69679da81eee8bba046776de07f8848ad9061e6c04ca781bf052fc9bcee70ea34a48c81864&token=103240474&lang=zh_CN#rd\">ElementUI</a></li>\n</ul>\n<h3 id=\"算法必刷区\"><a href=\"#算法必刷区\" class=\"headerlink\" title=\"算法必刷区\"></a>算法必刷区</h3><p>考算法</p>\n<ul>\n<li><a href=\"https://juejin.cn/book/6844733800300150797/section/6844733800371453966\">算法小册</a></li>\n<li><a href=\"https://github.com/CyC2018/CS-Notes/blob/master/notes/Leetcode%20%E9%A2%98%E8%A7%A3%20-%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.md#leetcode-%E9%A2%98%E8%A7%A3---%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92\">Leetcode 题解</a></li>\n</ul>\n"},{"title":"DevOps：常用快捷键备忘录","url":"/2021/11/27/common-shell/","content":"<p>不同开发工具的频繁切换，记录下常用好用的快捷键，还是能省下不少时间的。</p>\n<span id=\"more\"></span>\n\n<p>基于 Mac 环境下操作：</p>\n<h3 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h3><h4 id=\"移动光标\"><a href=\"#移动光标\" class=\"headerlink\" title=\"移动光标\"></a>移动光标</h4><ul>\n<li>移动光标到命令行首：<code>Ctrl + a</code></li>\n<li>移动光标到命令行尾：<code>Ctrl + e</code></li>\n<li>移动到当前单词的开头：<code>Esc + b</code></li>\n<li>移动光标到命令行尾：<code>Esc + f</code></li>\n<li>光标在命令行中光标最后两次出现的位置间进行切换：<code>Ctrl + x + x</code></li>\n</ul>\n<h4 id=\"删除命令\"><a href=\"#删除命令\" class=\"headerlink\" title=\"删除命令\"></a>删除命令</h4><ul>\n<li>剪切光标之前的一个词：<code>Ctrl + w</code></li>\n<li>剪切光标之后的一个词：<code>Alt + d</code></li>\n<li>从当前光标所在位置向左剪切全部命令：<code>Ctrl + u</code></li>\n<li>从当前光标所在位置向右剪切全部命令：<code>Ctrl + k</code></li>\n</ul>\n<h4 id=\"历史命令\"><a href=\"#历史命令\" class=\"headerlink\" title=\"历史命令\"></a>历史命令</h4><ul>\n<li>查看历史命令：<code>history</code></li>\n<li>执行history历史命令列表中第num条命令：<code>!num</code></li>\n<li>执行history历史命令列表中上一条命令：<code>!!</code></li>\n<li>执行含有string字符串的最新命令：<code>!?string?</code></li>\n</ul>\n<h4 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h4><ul>\n<li>按一次补全，按两次列出所有相关信息：<code>Tab</code></li>\n<li>强制终止当前命令：<code>Ctrl + c</code></li>\n<li>__清屏__：<code>Ctrl + l</code></li>\n</ul>\n<h4 id=\"Shell-脚本教程\"><a href=\"#Shell-脚本教程\" class=\"headerlink\" title=\"Shell 脚本教程\"></a>Shell 脚本教程</h4><p><a href=\"https://www.runoob.com/linux/linux-shell.html\">脚本教程</a></p>\n<hr>\n<h3 id=\"VS-Code\"><a href=\"#VS-Code\" class=\"headerlink\" title=\"VS Code\"></a>VS Code</h3><p>VS Code中的每个命令也可以通过使用 <code>Ctrl + Shift + P</code> 和搜索查询的命令提示符来执行。</p>\n<h4 id=\"代码命令\"><a href=\"#代码命令\" class=\"headerlink\" title=\"代码命令\"></a>代码命令</h4><ul>\n<li>选择当前行：<code>Ctrl + K</code></li>\n<li>移动当前行：<code>Alt + up/down</code></li>\n<li>复制当前行：<code>Shift + Alt +up/down</code></li>\n<li>删除当前行：<code>Ctrl + Shift + K</code></li>\n</ul>\n<h4 id=\"查找命令\"><a href=\"#查找命令\" class=\"headerlink\" title=\"查找命令\"></a>查找命令</h4><ul>\n<li>查找跳转到指定行：<code>Ctrl + G</code></li>\n</ul>\n<h4 id=\"工具命令\"><a href=\"#工具命令\" class=\"headerlink\" title=\"工具命令\"></a>工具命令</h4><ul>\n<li>控制台终端显示与隐藏：<code>Ctrl + ～</code></li>\n<li>左侧目录栏显示与隐藏：<code>Ctrl + B</code></li>\n<li>新建一个窗口：<code>Ctrl + Shift + N</code></li>\n</ul>\n<hr>\n<h3 id=\"Vim\"><a href=\"#Vim\" class=\"headerlink\" title=\"Vim\"></a>Vim</h3><p>vi 的最常用的两种模式： <strong>普通模式</strong> | <strong>输入模式</strong></p>\n<ul>\n<li>按指令 <code>i</code> 后会在光标位置开始输入，这时候左下角会有 <strong>— INSERT —</strong> 提示，表示当前正在输入模式。</li>\n<li>要切换到 普通模式 只需要按一下键盘的最左上角 <code>esc</code> 键即可。</li>\n</ul>\n<h4 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h4><ul>\n<li>存储文本：<code>:w</code></li>\n<li>退出文本：<code>:q</code></li>\n<li>退出不保存文本：<code>:q!</code></li>\n<li>保存并退出文本：<code>:wq</code></li>\n<li>显示行号：<code>:set nu</code></li>\n<li>不显示行号：<code>:set nonu</code></li>\n<li>删除当前行：<code>dd</code></li>\n</ul>\n"},{"title":"DevOps：Nginx 安装部署 SSL 证书","url":"/2021/11/24/nginx-https/","content":"<p>接着上次部署遇到的问题，简单描述下云服务器安装 SSL 证书的过程。</p>\n<span id=\"more\"></span>\n\n<p>多数云服务器网站都有部署相关的<a href=\"https://cloud.tencent.com/document/product/1207/47027\">教程</a>，这里就基于腾讯云服务器<code>东拼西凑</code>下实现步骤。</p>\n<h3 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h3><ul>\n<li>服务器操作系统：CentOS 8.0</li>\n<li>服务器 Nginx 版本：Nginx 1.18.0</li>\n<li>本地 SSH 工具：Mac Termius</li>\n</ul>\n<h4 id=\"安装-Nginx\"><a href=\"#安装-Nginx\" class=\"headerlink\" title=\"安装 Nginx\"></a>安装 Nginx</h4><p>通过账号密码登录到 CentOS 服务器，<a href=\"https://cloud.tencent.com/document/product/214/33413\">安装 Nginx 步骤</a>：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装 Nginx：</span></span><br><span class=\"line\">yum <span class=\"literal\">-y</span> install nginx</span><br><span class=\"line\"><span class=\"comment\"># 查看 Nginx 版本</span></span><br><span class=\"line\">nginx <span class=\"literal\">-v</span></span><br><span class=\"line\"><span class=\"comment\"># 查看 Nginx 安装目录</span></span><br><span class=\"line\">rpm <span class=\"literal\">-ql</span> nginx</span><br><span class=\"line\"><span class=\"comment\"># 启动 Nginx</span></span><br><span class=\"line\">service nginx <span class=\"built_in\">start</span></span><br></pre></td></tr></table></figure>\n\n<p>然后访问云服务器的公网 IP，如果可以显示出 Nginx 默认的静态页面，则证明 Nginx 部署成功。</p>\n<blockquote>\n<p>Nginx 的默认端口是80，如果想修改端口请修改配置文件并重启 Nginx。</p>\n</blockquote>\n<h3 id=\"证书部署\"><a href=\"#证书部署\" class=\"headerlink\" title=\"证书部署\"></a>证书部署</h3><p>SSL 证书是需要 CA 颁发的，在购买域名时一般都会有个一年的免费证书。为了测试方便，也可以使用自签名证书。</p>\n<h4 id=\"CA-证书\"><a href=\"#CA-证书\" class=\"headerlink\" title=\"CA 证书\"></a>CA 证书</h4><p>前往服务器 <code>SSL 证书管理控制台</code> 中下载 SSL 证书</p>\n<h4 id=\"自签名证书\"><a href=\"#自签名证书\" class=\"headerlink\" title=\"自签名证书\"></a>自签名证书</h4><p>生成自签名证书，可以通过<a href=\"https://cloud.tencent.com/developer/article/1160294\">该教程</a>生成。</p>\n<h4 id=\"证书安装\"><a href=\"#证书安装\" class=\"headerlink\" title=\"证书安装\"></a>证书安装</h4><p>最后生成的证书种有两个文件：__**.crt 证书文件__ 和 __**.key 私钥文件__。</p>\n<p>我们需要做的是把这两个文件放到服务器的目录以及修改 Nginx 配置文件，<a href=\"https://cloud.tencent.com/document/product/1207/47027\">具体教程</a>：</p>\n<ol>\n<li><p>我是通过本地 Termius 软件左侧的 <code>SFTP</code> 功能可视化放进两个文件的，也可以通过本地 <code>scp</code> 命令或者在服务器 <code>rz</code> 命令来传输文件，这里放在了服务器的 <code>/etc/nginx</code> 目录下。</p>\n</li>\n<li><p>编辑 Nginx 默认配置文件目录中的 nginx.conf 文件，<code>vim /etc/nginx/nginx.conf</code>，在 http 字段里添加：</p>\n</li>\n</ol>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  listen         <span class=\"number\">443</span>;</span><br><span class=\"line\">  server_name  ***.com;    <span class=\"comment\">#更换上所绑定的域名，一定要是申请了证书的域名</span></span><br><span class=\"line\">  ssl                  on;     <span class=\"comment\">#这一行是另外添加的，意思是打开ssl功能，一定要添加。</span></span><br><span class=\"line\">  ssl_certificate      /etc/nginx/****.crt;  <span class=\"comment\">#这是下载下来的nginx证书的crt文件路径，绝对或者相对路径都可以</span></span><br><span class=\"line\">  ssl_certificate_key  /etc/nginx/******.key;   <span class=\"comment\">#和crt的规则一样</span></span><br><span class=\"line\">  ssl_session_cache    shared:SSL:<span class=\"number\">1</span>m;</span><br><span class=\"line\">  ssl_session_timeout  <span class=\"number\">5</span>m;</span><br><span class=\"line\">  ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class=\"line\">  ssl_prefer_server_ciphers  on;</span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">    root   html;</span><br><span class=\"line\">    index  index.html index.htm;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>保存修改后退出，运行 <code>nginx -s reload</code> 重启 Nginx 生效。</p>\n<h4 id=\"设置-HTTP-请求自动跳转-HTTPS\"><a href=\"#设置-HTTP-请求自动跳转-HTTPS\" class=\"headerlink\" title=\"设置 HTTP 请求自动跳转 HTTPS\"></a>设置 HTTP 请求自动跳转 HTTPS</h4><p>还可以通过配置服务器，让其自动将 HTTP 的请求重定向到 HTTPS。编辑 Nginx 默认配置文件目录中的 nginx.conf 文件，<code>vim /etc/nginx/nginx.conf</code>，在 http 字段里添加：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen <span class=\"number\">80</span>;</span><br><span class=\"line\">    server_name cloud.tencent.com;    <span class=\"comment\">#填写您的证书绑定的域名，例如：cloud.tencent.com</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">301</span> https://<span class=\"variable\">$host</span><span class=\"variable\">$request_uri</span>;       <span class=\"comment\">#将http的域名请求转成https</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>附上：<a href=\"https://cloud.tencent.com/developer/article/1611144\">其他教程</a></p>\n"},{"title":"DevOps：Nginx 部署的一个有趣问题","url":"/2021/11/23/nginx-error/","content":"<p>浏览器访问服务器 IP 地址，页面显示的是 Apache 的默认页面。但是服务器起的是 Nginx 服务。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h3><p>Ubuntu 云服务器部署 SSL 证书，先安装了 Apache 服务，停止服务后，重新安装了 Nginx 服务。</p>\n<h3 id=\"排查问题过程\"><a href=\"#排查问题过程\" class=\"headerlink\" title=\"排查问题过程\"></a>排查问题过程</h3><ul>\n<li>首先通过 <code>lsof -i:80</code> 查看端口占用情况：</li>\n</ul>\n<p><img src=\"/images/nginx-error/lsof.png\" alt=\"PCM\"></p>\n<ul>\n<li><p>发现端口都是 nginx 服务在占用，然后打算重启 nginx 服务试试：<code>nginx -s reload</code>，发现页面显示的还是 Apache 的默认页面。</p>\n</li>\n<li><p>再通过 <code>kill -9 PID</code> 命令杀掉了 nginx 对应的进程后（或者可以通过 <code>nginx -s stop</code> 停止 nginx 服务），重新访问 IP 发现无法访问，证明这个 80 端口的确是 nginx 起的服务。</p>\n</li>\n<li><p>接下来就查看 nginx 配置文件指向的页面到底有没有问题，<code>cd /var/www/html</code> 目录后，发现目录下竟然有两个 html 文件：分别是 index.html 和 index.nginx-debian.html，<code>vim index.html</code> 一看，是 apache 的页面，真相大白。</p>\n</li>\n</ul>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>最后通过重命名 <code>mv index.nginx-debian.html index.html</code> 替换默认的 index.html。</p>\n<p>总结：安装 Apache 服务时生成了默认的 index.html 文件，而后安装的 Nginx 服务生成的默认文件无法替换，才导致起的 Nginx 服务，显示 Apache 页面的有趣问题。</p>\n"},{"title":"JS：函数式编程小结","url":"/2021/02/20/js-function-programming/","content":"<p>Javascript 到底适不适合函数式编程呢？</p>\n<span id=\"more\"></span>\n\n<p>在 2021 年看完的第一本书《Javascript 函数式编程指南》，接着看完了《前端函数式编程演进》，确实让我稍微打开了函数式编程的大门。</p>\n\n\n\t<div class=\"row\">\n    <embed src=\"/images/js-function-programming/Javascript_函数式编程.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n"},{"title":"DevOps：Docker 实操笔记","url":"/2020/09/06/docker/","content":"<p>Docker 是一个用于开发，发布和运行应用程序的开放平台，也是跨平台的解决方案。</p>\n<span id=\"more\"></span>\n\n<p>首先来看看这张 docker 的架构图：</p>\n<p><img src=\"/images/docker/docker-architecture.webp\" alt=\"架构图\"></p>\n<p>总体来讲，必须了解 Docker 三剑客概念：仓库、镜像、容器。</p>\n<h3 id=\"常见操作\"><a href=\"#常见操作\" class=\"headerlink\" title=\"常见操作\"></a>常见操作</h3><ul>\n<li>拉取镜像：<code>docker pull &lt;image_name&gt;</code></li>\n<li>分析镜像：<code>docker inspect &lt;image_name&gt;</code></li>\n<li>列出本地镜像列表：<code>docker images</code></li>\n</ul>\n<p>调试两部曲：</p>\n<ul>\n<li>列出所有容器：<code>docker ps</code></li>\n<li>进入容器调试：<code>docker exec -it &lt;container_name&gt; sh</code></li>\n</ul>\n<h3 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h3><p>Dockerfile 的各个指令可参考 <a href=\"https://docs.docker.com/engine/reference/builder/\">Dockerfile Reference</a>。</p>\n<p>使用 <code>docker build</code> 构建镜像，<code>docker build</code> 会使用当前目录的 Dockerfile 构建镜像，</p>\n<ul>\n<li>构建镜像：<code>docker build</code></li>\n<li>启动容器：<code>docker run &lt;image_name&gt;</code></li>\n</ul>\n<p>最后来看看 <a href=\"https://cli.vuejs.org/zh/guide/deployment.html#bitbucket-cloud\">Vue-cli 项目部署 Dockerfile 实例</a>：</p>\n<figure class=\"highlight docker\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> ./ /app</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\"> /app</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> npm install &amp;&amp; npm run build</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> nginx</span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> <span class=\"built_in\">mkdir</span> /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> --from=0 /app/dist /app</span></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> nginx.conf /etc/nginx/nginx.conf</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker compose\"></a>docker compose</h3><p>启动 docker-compose.yaml 文件：<code>docker compose up</code></p>\n"},{"title":"JS：浅析 mpvue","url":"/2020/05/03/js-mpvue/","content":"<p><a href=\"https://github.com/Meituan-Dianping/mpvue\">mpvue</a> 是一个使用 Vue.js 开发<strong>小程序</strong>的前端框架。框架基于 Vue.js 核心，mpvue 修改了 Vue.js 的 <code>runtime</code> 和 <code>compiler</code> 实现，使其可以运行在小程序环境中，从而为小程序开发引入了整套 Vue.js 开发体验。</p>\n<blockquote>\n<p>引用自 <a href=\"http://mpvue.com/\">mpvue</a> 官网的介绍。</p>\n</blockquote>\n<span id=\"more\"></span>\n\n<p>基于官方的解释，可以初步认为 mpvue 是：</p>\n<ul>\n<li>基于 Vue.js 源码修改，是小程序获得 Vue.js 的开发体验；</li>\n<li>修改 Vue.js 的 <code>runtime</code> 和 <code>compiler</code> 源码，兼容小程序环境。</li>\n</ul>\n<p>上述两点是全文的<strong>核心</strong>。</p>\n<p>关于 mpvue 的基础用法，请参考 <a href=\"http://mpvue.com/\">mpvue</a> 官网，这里不再详细介绍。</p>\n<h3 id=\"构建流程\"><a href=\"#构建流程\" class=\"headerlink\" title=\"构建流程\"></a>构建流程</h3><p>首先 mpvue 借鉴了 Vue 的实现思路，实现了与其类似的生态：</p>\n<ul>\n<li>mpvue.js：mpvue 的小程序核心库；</li>\n<li>mpvue-quickstart：基于 Vue-CLI 2.0 的 mpvue 脚手架；</li>\n<li>mpvue-loader：实现自定义 .vue 文件的解析，将其解析为 wxml、wxss 和 js 文件。</li>\n</ul>\n<p>① 通过 <code>mpvue-quickstart</code> 快速构建 mpvue 项目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue init mpvue/mpvue-quickstart mpvue-project</span><br></pre></td></tr></table></figure>\n\n<p>② <code>mpvue</code> 通过 <code>webpack</code> 构建和 <code>mpvue-loader</code> 解析将 .vue 文件转化为小程序能够识别的 wxml、wxss 和 js 文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">    <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;mpvue-loader&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">options</span>: vueLoaderConfig</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>mpvue-loader</code> 中，使用了 <code>mpvue-template-compiler</code> 对 .vue 文件中的 <code>template</code> 进行了解析。<code>mpvue-template-compiler</code> 是核心的解析逻辑，将 .vue 文件中的 <code>template</code> 解析为小程序 <code>wxml</code> 对应的字符串。</p>\n<h3 id=\"构建模式\"><a href=\"#构建模式\" class=\"headerlink\" title=\"构建模式\"></a>构建模式</h3><p>mpvue 的构建过程中分为 dev 模式和 build 模式：</p>\n<ul>\n<li>dev 模式：使用了 source-map 模式，增加了对文件的监听；</li>\n<li>build 模式：关闭了 source-map 模式，一次性构建，且压缩源码。</li>\n</ul>\n<p>在 dev 模式下，使用了 <code>webpack-dev-middleware-hard-disk</code> 进行文件修改的监听，每次对代码进行修改，都会触发 <code>webpack</code> 重新 <code>compiler</code>。</p>\n<h3 id=\"实例化\"><a href=\"#实例化\" class=\"headerlink\" title=\"实例化\"></a>实例化</h3><p>前置条件：<a href=\"https://zeuscoder.github.io/2019/07/23/js-vue/\">浅析 Vue</a>。</p>\n<p>mpvue 的分析是从 <code>const app = new Vue(App)</code> 开始的。</p>\n<p>由于 mpvue 是基于 Vue.js 源码修改的，源码执行流程与 Vue.js 大致相同。Vue 的实例化从 <code>_init</code> 方法开始：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">initLifecycle</span>(vm);</span><br><span class=\"line\"><span class=\"title function_\">initEvents</span>(vm);</span><br><span class=\"line\"><span class=\"title function_\">initRender</span>(vm);</span><br><span class=\"line\"><span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;beforeCreate&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">initInjections</span>(vm); <span class=\"comment\">// resolve injections before data/props</span></span><br><span class=\"line\"><span class=\"title function_\">initState</span>(vm);</span><br><span class=\"line\"><span class=\"title function_\">initProvide</span>(vm); <span class=\"comment\">// resolve provide after data/props</span></span><br><span class=\"line\"><span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;created&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (vm.<span class=\"property\">$options</span>.<span class=\"property\">el</span>) &#123;</span><br><span class=\"line\">    vm.$mount(vm.<span class=\"property\">$options</span>.<span class=\"property\">el</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>首先 <code>initRender</code> 函数中的 <code>vm.$createElement</code> 在小程序中并不生效，小程序渲染逻辑与 Web 不同，小程序通过 wxml 对界面进行渲染，可以忽略 <code>initRender</code> 函数。</li>\n<li>然后 <code>initState</code> 函数完成了 <code>props</code>、<code>methods</code>、<code>data</code>、<code>computed</code> 和 <code>watch</code> 5 个属性的初始化。</li>\n<li>最后在调用了 <code>beforeCreate</code> 和 <code>created</code> 生命回调函数，完成 Vue 实例化后，继续执行 <code>$mount</code> 方法。</li>\n</ol>\n<p>mpvue 的 <code>$mount</code> 方法定义在 <code>platform/mp/runtime/index.js</code> 中，<code>platform</code> 目录存放了区别 <code>mpvue</code>、<code>web</code> 和 <code>weex</code> 的 **<code>runtime</code> 和 <code>compiler</code>**。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// public mount method</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$mount</span> = <span class=\"keyword\">function</span> (<span class=\"params\">el, hydrating</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化小程序生命周期相关</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = <span class=\"variable language_\">this</span>.<span class=\"property\">$options</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options &amp;&amp; (options.<span class=\"property\">render</span> || options.<span class=\"property\">mpType</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; mpType = <span class=\"string\">&#x27;page&#x27;</span> &#125; = options</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">_initMP</span>(mpType, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">mountComponent</span>(<span class=\"variable language_\">this</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">mountComponent</span>(<span class=\"variable language_\">this</span>, <span class=\"literal\">undefined</span>, <span class=\"literal\">undefined</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>$mount</code> 方法主要判断 <code>mpType</code> 的类型（默认值是 page），实例化 App 或 Page。mpvue 与 vue 的不同之处在于 mpvue 将不执行界面的更新行为，只负责更新数据，其更新行为都将交由小程序框架程序处理。</p>\n<p><code>_initMP</code> 方法位于 &#x2F;packages&#x2F;mpvue&#x2F;index.js 中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initMP</span> (mpType, next) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mp.<span class=\"property\">status</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 处理子组件的小程序生命周期</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mpType === <span class=\"string\">&#x27;app&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">callHook$1</span>(<span class=\"variable language_\">this</span>, <span class=\"string\">&#x27;onLaunch&#x27;</span>, mp.<span class=\"property\">appOptions</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">callHook$1</span>(<span class=\"variable language_\">this</span>, <span class=\"string\">&#x27;onLoad&#x27;</span>, mp.<span class=\"property\">query</span>);</span><br><span class=\"line\">            <span class=\"title function_\">callHook$1</span>(<span class=\"variable language_\">this</span>, <span class=\"string\">&#x27;onReady&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mp.<span class=\"property\">mpType</span> = mpType;</span><br><span class=\"line\">    mp.<span class=\"property\">status</span> = <span class=\"string\">&#x27;register&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 简化</span></span><br><span class=\"line\">    <span class=\"title function_\">createMP</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注：<code>MPPage</code> 源码位于 <code>test/mp/helpers/mp.runtime.js</code>。</p>\n<p><code>createMP</code> 方法调用 global 方法实例化 App 或 Page 对象，其中 global.App 和 global.Page 都继承自 <code>MPPage</code>。其构造函数会调用 <code>_initLifecycle</code> 函数，会分别执行 <code>onLaunch</code> 和 <code>onShow</code> 或 <code>onLoad</code>、<code>onReady</code> 和 <code>onShow</code> 回调函数，执行完毕后会调用传入的回调函数 <code>next</code>，也就是 <code>mountComponent</code>：</p>\n<blockquote>\n<p>BUG：首次初始化不执行 onShow 回调函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">mountComponent</span> (</span><br><span class=\"line\">    <span class=\"attr\">vm</span>: <span class=\"title class_\">Component</span>,</span><br><span class=\"line\">    <span class=\"attr\">el</span>: ?<span class=\"title class_\">Element</span>,</span><br><span class=\"line\">    hydrating?: boolean</span><br><span class=\"line\">): <span class=\"title class_\">Component</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;beforeMount&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; config.<span class=\"property\">performance</span> &amp;&amp; mark) &#123;</span><br><span class=\"line\">        updateComponent = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        vm.<span class=\"title function_\">_update</span>(vnode, hydrating)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        updateComponent = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            vm.<span class=\"title function_\">_update</span>(vm.<span class=\"title function_\">_render</span>(), hydrating)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vm.<span class=\"property\">_watcher</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(vm, updateComponent, noop)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vm.<span class=\"property\">$vnode</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        vm.<span class=\"property\">_isMounted</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;mounted&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vm</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>mountComponent</code> 方法在执行 <code>beforeMount</code> 生命周期函数之后，紧接着会执行一个<strong>关键步骤</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">vm.<span class=\"property\">_watcher</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(vm, updateComponent, noop);</span><br></pre></td></tr></table></figure>\n\n<p><strong>mpvue 不依赖 Vue 进行渲染，但是依赖 Vue 完成响应式功能</strong>。实例化渲染 Watcher 后会调用 mounted 生命周期回调函数，一个组件对应一个 Watcher。</p>\n<p>整个 mpvue 的实例化和渲染过程完成。</p>\n<h3 id=\"响应式\"><a href=\"#响应式\" class=\"headerlink\" title=\"响应式\"></a>响应式</h3><p>响应式数据收集依赖的相关知识请参考：<a href=\"https://cn.vuejs.org/v2/guide/reactivity.html\">深入响应式原理</a></p>\n<p>实例化渲染 Watcher 后，当赋值 data 时， mpvue 会调用 Dep 的 notify 方法实现界面更新。</p>\n<p>仔细分析 <code>_.initMp</code> 方法中对 Page 进行的初始化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = <span class=\"variable language_\">global</span>.<span class=\"title function_\">getApp</span>();</span><br><span class=\"line\"><span class=\"variable language_\">global</span>.<span class=\"title class_\">Page</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">$root</span>: &#123;&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 全局事件代理的方式</span></span><br><span class=\"line\">    <span class=\"attr\">handleProxy</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">handleProxy</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rootVueVM.$handleProxyWithVue(e)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// mp lifecycle for vue</span></span><br><span class=\"line\">    <span class=\"comment\">// 生命周期函数--监听页面加载</span></span><br><span class=\"line\">    <span class=\"attr\">onLoad</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">onLoad</span> (query) &#123;</span><br><span class=\"line\">        mp.<span class=\"property\">page</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        mp.<span class=\"property\">query</span> = query;</span><br><span class=\"line\">        mp.<span class=\"property\">status</span> = <span class=\"string\">&#x27;load&#x27;</span>;</span><br><span class=\"line\">        <span class=\"title function_\">getGlobalData</span>(app, rootVueVM);</span><br><span class=\"line\">        <span class=\"title function_\">callHook$1</span>(rootVueVM, <span class=\"string\">&#x27;onLoad&#x27;</span>, query);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 生命周期函数--监听页面显示</span></span><br><span class=\"line\">    <span class=\"attr\">onShow</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">onShow</span> () &#123;</span><br><span class=\"line\">        mp.<span class=\"property\">page</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">        mp.<span class=\"property\">status</span> = <span class=\"string\">&#x27;show&#x27;</span>;</span><br><span class=\"line\">        <span class=\"title function_\">callHook$1</span>(rootVueVM, <span class=\"string\">&#x27;onShow&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 只有页面需要 setData</span></span><br><span class=\"line\">        rootVueVM.$nextTick(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        rootVueVM.<span class=\"title function_\">_initDataToMP</span>();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 生命周期函数--监听页面初次渲染完成</span></span><br><span class=\"line\">    <span class=\"attr\">onReady</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">onReady</span> () &#123;</span><br><span class=\"line\">        mp.<span class=\"property\">status</span> = <span class=\"string\">&#x27;ready&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"title function_\">callHook$1</span>(rootVueVM, <span class=\"string\">&#x27;onReady&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">next</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>调用 <code>global.Page</code> 初始化 <code>Page</code> 对象，从而实现页面的初始化；</li>\n<li>初始化 Page 的 data 为 <code>$root</code>，且 <code>$root</code> 为空；</li>\n<li>定义了事件代理方法 <code>handleProxy</code>（重点）；</li>\n<li>依次定义了 Page 的所有生命周期回调函数，用 <code>callHook$1</code> 绑定 Vue 实例 options 对应的生命周期回调函数。</li>\n</ul>\n<p>且在 onReady 函数调用完毕后，会调用 next 回调函数，即 mountComponent 函数。</p>\n<p>上面提到了 data 中 $root 的值为空，其中 mountComponent 函数会将完成 mpvue 实例中的 data 与 Page 中的 data 的映射：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mountComponent</span> (vm, el,hydrating) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> updateComponent = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        vm.<span class=\"title function_\">_update</span>(vm.<span class=\"title function_\">_render</span>(), hydrating);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    vm.<span class=\"property\">_watcher</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(vm, updateComponent, noop);</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> vm</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Watcher</code> 的逻辑不做详细描述。集中精神分析 mpvue 的核心 <code>updateComponent</code>。首先执行 <code>vm._render</code> 函数生成 vnode，然后调用 <code>vm._update</code> 完成界面渲染。小程序界面渲染由小程序处理，与 mpvue 没有关联，直接关注 vm._update 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_update</span> = <span class=\"keyword\">function</span> (<span class=\"params\">vnode, hydrating</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    vm.<span class=\"title function_\">__patch__</span>(prevVnode, vnode)</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>vm.__patch__</code> 方法进行 <strong>diff</strong> 算法，找出差异项进行最小颗粒度的更新：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// src/platforms/mp/runtime/patch.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">patch</span> () &#123;</span><br><span class=\"line\">    corePatch.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.$updateDataToMP()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以忽略一切与界面渲染相关的代码 <code>corePatch</code>。因为 mpvue 实际做的，是监听 data 的变化，当 mpvue 实例的 data 变化时，调用 setData 方法对小程序界面进行更新：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// packages/mpvue/index.js</span></span><br><span class=\"line\"><span class=\"comment\">// 优化js变量动态变化时候引起全量更新</span></span><br><span class=\"line\"><span class=\"comment\">// 优化每次 setData 都传递大量新数据</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">updateDataToMP</span> () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> page = <span class=\"title function_\">getPage</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!page) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = <span class=\"title function_\">formatVmData</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"title function_\">diffData</span>(<span class=\"variable language_\">this</span>, data);</span><br><span class=\"line\">  <span class=\"title function_\">throttleSetData</span>(page.<span class=\"property\">setData</span>.<span class=\"title function_\">bind</span>(page), data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>formatVmData 方法初始化 page 实例下的 data 对象，包含 props、computed 的数据；</li>\n<li>diffData 将 mpvue 实例下的 data 对象与 page 实例下的 data 对象进行对比，如果不一致则进行更新；</li>\n<li>最后通过 throttleSetData 方法调用 page.setData 完成对界面的渲染和更新，throttleSetData 方法主要优化了频繁调用 setData 的场景，限制了 setData 的调用间隔为 50ms，因为频繁调用 setData 会造成页面的卡顿，所以 mpvue 对此进行了优化。</li>\n</ul>\n<h3 id=\"事件代理\"><a href=\"#事件代理\" class=\"headerlink\" title=\"事件代理\"></a>事件代理</h3><p>mpvue 通过全局事件代理 <strong><code>handleProxy</code></strong> 的方式，实现事件的响应，事件响应过程中，通过 view 的 data 中的 eventid 和 comkey 区分事件和组件。</p>\n<p>打包后的文件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- wxml --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;handleProxy&quot;</span> <span class=\"attr\">data-eventid</span>=<span class=\"string\">&quot;&#123;&#123;&#x27;3&#x27;&#125;&#125;&quot;</span> <span class=\"attr\">data-comkey</span>=<span class=\"string\">&quot;&#123;&#123;$k&#125;&#125;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;_div data-v-4cf53cc1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>this._initMp</code> 方法中，完成了上述打包文件 data 的注入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">global</span>.<span class=\"title class_\">Page</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">$root</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">handleProxy</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">handleProxy</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rootVueVM.$handleProxyWithVue(e)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">onShow</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">onShow</span> () &#123;</span><br><span class=\"line\">    mp.<span class=\"property\">page</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    mp.<span class=\"property\">status</span> = <span class=\"string\">&#x27;show&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_\">callHook$1</span>(rootVueVM, <span class=\"string\">&#x27;onShow&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    rootVueVM.$nextTick(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      rootVueVM.<span class=\"title function_\">_initDataToMP</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义了 data 只包含一个 $root 属性，该属性为空对象；</li>\n<li>定义了 handleProxy 函数，即事件代理；</li>\n<li>通过 <code>rootVueVM._initDataToMP</code> 方法实现了 data 的注入。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initDataToMP</span> () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = <span class=\"title function_\">collectVmData</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$root</span>);</span><br><span class=\"line\">    page.<span class=\"title function_\">setData</span>(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">collectVmData</span> (vm, res) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( res === <span class=\"keyword\">void</span> <span class=\"number\">0</span> ) res = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> vms = vm.<span class=\"property\">$children</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vms &amp;&amp; vms.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        vms.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">v</span>) &#123; <span class=\"keyword\">return</span> <span class=\"title function_\">collectVmData</span>(v, res); &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(res, <span class=\"title function_\">formatVmData</span>(vm))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终 initDataToMP 生成的 data 数据格式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">$root<span class=\"number\">.0</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">$k</span>: <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">$kk</span>: <span class=\"string\">&quot;0_&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">$p</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>$k 即组件的 comkey，$kk 为父组件的前缀，$p 这里没有用到，所以为空。获得 data 之后，mpvue 调用 page.setData(data) 完成 data 的注入。</p>\n<p>事件代理：每个 page 实例只会绑定一个 handleProxy 方法，核心实现：</p>\n<ul>\n<li>通过 event 获取 comkey，通过 comkey 获取对应的 mpvue 页面或组件实例；</li>\n<li>通过 event 获取 eventid，通过 eventid 获取对应的事件处理方法；</li>\n<li>执行方法时会传入一个 event 对象，该 event 对象为 mpvue 额外包装的，包装的方法为：getWebEventByMP。</li>\n</ul>\n<h3 id=\"mpvue-loader\"><a href=\"#mpvue-loader\" class=\"headerlink\" title=\"mpvue-loader\"></a>mpvue-loader</h3><p>前置条件：<a href=\"https://zeuscoder.github.io/2020/03/08/web-webpack/\">webpack</a>。</p>\n<p>mpvue 框架从运行环境来分，可以分为运行时和构建时。mpvue 运行时指 mpvue 编写的小程序在运行时的环境；<strong>运行前需要将 .vue 编写的 mpvue 源码编译为小程序源码，其通过 webpack 进行构建的过程，被称为 mpvue 构建时</strong>。</p>\n<p>构建时最关键的一个步骤是将 .vue 源码编译为小程序源码。.vue 文件是 Vue.js 自定义的文件类型，符合 <a href=\"https://vue-loader.vuejs.org/zh/spec.html#%E7%AE%80%E4%BB%8B\">SFC</a> 规范。</p>\n<p>通过对比 mpvue 和 vue 的 SFC 规范，得出 mpvue 构建时的<strong>主要改动</strong>：</p>\n<ul>\n<li>修改 vue-loader 为 mpvue-loader：<ul>\n<li>template 导出为小程序布局文件 wxml</li>\n<li>style 导出为小程序样式文件 wxss</li>\n</ul>\n</li>\n<li>修改 vue-template-compiler 为 mpvue-template-compiler，编译 mpvue 的 template。</li>\n</ul>\n<p>首先通过观察 mpvue-loader 构建 .vue 文件后输出的结果，分析可以较为直观。</p>\n<p>构建前的 .vue 文件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    data () &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">            <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello World&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-tag\">div</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>构建后的 js 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">injectStyle</span> (ssrContext) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">&quot;!!../../../node_modules/_extract-text-webpack-plugin@3.0.2@extract-text-webpack-plugin/dist/loader.js?&#123;\\&quot;omit\\&quot;:1,\\&quot;remove\\&quot;:true&#125;!vue-style-loader!css-loader?&#123;\\&quot;minimize\\&quot;:true,\\&quot;sourceMap\\&quot;:false&#125;!../../../node_modules/_mpvue-loader@2.0.1@mpvue-loader/lib/style-compiler/index?&#123;\\&quot;vue\\&quot;:true,\\&quot;id\\&quot;:\\&quot;data-v-32ccf774\\&quot;,\\&quot;scoped\\&quot;:true,\\&quot;hasInlineConfig\\&quot;:false&#125;!px2rpx-loader?&#123;\\&quot;baseDpr\\&quot;:1,\\&quot;rpxUnit\\&quot;:0.5&#125;!postcss-loader?&#123;\\&quot;sourceMap\\&quot;:true&#125;!../../../node_modules/_mpvue-loader@2.0.1@mpvue-loader/lib/selector?type=styles&amp;index=0!../../../build/rules/test-loader/index.js!./index.vue&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> normalizeComponent = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;!../../../node_modules/_mpvue-loader@2.0.1@mpvue-loader/lib/component-normalizer&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">/* script */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> __vue_script__ <span class=\"keyword\">from</span> <span class=\"string\">&quot;!!babel-loader!../../../node_modules/_mpvue-loader@2.0.1@mpvue-loader/lib/selector?type=script&amp;index=0!../../../build/rules/test-loader/index.js!./index.vue&quot;</span></span><br><span class=\"line\"><span class=\"comment\">/* template */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> __vue_template__ <span class=\"keyword\">from</span> <span class=\"string\">&quot;!!../../../node_modules/_mpvue-loader@2.0.1@mpvue-loader/lib/template-compiler/index?&#123;\\&quot;id\\&quot;:\\&quot;data-v-32ccf774\\&quot;,\\&quot;hasScoped\\&quot;:true,\\&quot;transformToRequire\\&quot;:&#123;\\&quot;video\\&quot;:\\&quot;src\\&quot;,\\&quot;source\\&quot;:\\&quot;src\\&quot;,\\&quot;img\\&quot;:\\&quot;src\\&quot;,\\&quot;image\\&quot;:\\&quot;xlink:href\\&quot;&#125;,\\&quot;fileExt\\&quot;:&#123;\\&quot;template\\&quot;:\\&quot;wxml\\&quot;,\\&quot;script\\&quot;:\\&quot;js\\&quot;,\\&quot;style\\&quot;:\\&quot;wxss\\&quot;,\\&quot;platform\\&quot;:\\&quot;wx\\&quot;&#125;&#125;!../../../node_modules/_mpvue-loader@2.0.1@mpvue-loader/lib/selector?type=template&amp;index=0!../../../build/rules/test-loader/index.js!./index.vue&quot;</span></span><br><span class=\"line\"><span class=\"comment\">/* styles */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> __vue_styles__ = injectStyle</span><br><span class=\"line\"><span class=\"comment\">/* scopeId */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> __vue_scopeId__ = <span class=\"string\">&quot;data-v-32ccf774&quot;</span></span><br><span class=\"line\"><span class=\"comment\">/* moduleIdentifier (server only) */</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> __vue_module_identifier__ = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Component</span> = <span class=\"title function_\">normalizeComponent</span>(</span><br><span class=\"line\">  __vue_script__,</span><br><span class=\"line\">  __vue_template__,</span><br><span class=\"line\">  __vue_styles__,</span><br><span class=\"line\">  __vue_scopeId__,</span><br><span class=\"line\">  __vue_module_identifier__</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Component</span>.<span class=\"property\">exports</span></span><br></pre></td></tr></table></figure>\n\n<p>mpvue-loader 的主要功能就是将 mpvue 的 .vue 文件输出为一个 Component.exports 对象。</p>\n<h3 id=\"mpvue-template-compiler\"><a href=\"#mpvue-template-compiler\" class=\"headerlink\" title=\"mpvue-template-compiler\"></a>mpvue-template-compiler</h3><p>源码： <code>node_modules/mpvue-template-compiler/build.js</code>。</p>\n<p>mpvue-loader 中会调用 mpvue-template-compiler 实现 template 解析，这样做的目的是为了节约在运行时解析 template 所带来的开销。引用自 <code>mpvue-loader/lib/template-compiler/index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> compiled = compiler.<span class=\"title function_\">compile</span>(html, compilerOptions)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>html 参数就是 .vue 文件的 template 字符串，通过 compile 函数生成 AST 和 render 函数；</li>\n<li>AST 是抽象代码树的含义，它会将 html 标签解析为一个 js 对象，通过该对象最终生成 render 函数；</li>\n<li>执行 render 会生成 vnode 对象，该 vnode 对象对应 template 的结构。</li>\n</ul>\n<p>① 生成了 AST 之后，即是上述的 compiled，会继续执行 compileMPML：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">compileMPML.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, compiled, html, options)</span><br></pre></td></tr></table></figure>\n\n<p>② compileMPML 是实际生成 wxml 文件的方法，这里不做详述。</p>\n<p>其实呢，<code>mpvue</code> 的 <code>compiler.compile</code> 和 <code>vue</code> 的 <code>compile</code> 生成 <code>AST</code> 是同样的三个步骤：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">baseCompile</span> (template, options) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> originAst = <span class=\"title function_\">parse</span>(template.<span class=\"title function_\">trim</span>(), options);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ast = <span class=\"title function_\">markComponent</span>(originAst, options);</span><br><span class=\"line\">    <span class=\"title function_\">optimize</span>(ast, options);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> code = <span class=\"title function_\">generate</span>(ast, options);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">ast</span>: ast,</span><br><span class=\"line\">        <span class=\"attr\">render</span>: code.<span class=\"property\">render</span>,</span><br><span class=\"line\">        <span class=\"attr\">staticRenderFns</span>: code.<span class=\"property\">staticRenderFns</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>生成 ast：通过 parse 方法生成 ast；</li>\n<li>优化 ast：通过 optimize 优化 ast，主要是对 ast 中的静态节点进行识别和标记；</li>\n<li>生成 render 函数：通过 generate 方法将 ast 转化为 render 函数。</li>\n</ul>\n<p>不同的是 mpvue 解析出的 AST 中的 tag 是对应 WXML 标签 view 的。</p>\n<p>参考文章：</p>\n<p><a href=\"https://www.imooc.com/read/45/article/769\">mpvue原理深入解析36讲</a></p>\n"},{"title":"JS：this 备忘录","url":"/2020/03/22/js-this/","content":"<p>阅读源码的时候，深刻理解 <em>this</em> 的指向至关重要；同时设计 npm 库和插件的时候，也会需要改变 <em>this</em> 的指向。</p>\n<span id=\"more\"></span>\n\n<p>如果只用一句话概括 this 指向的话：</p>\n<p>最简单的说法（平时记住这句话就得了）：</p>\n<blockquote>\n<p><strong>this 永远指向最后调用它的那个对象</strong></p>\n</blockquote>\n<p>更准确的说法：</p>\n<blockquote>\n<p><strong>this 的指向，是在调用函数时根据执行上下文所动态决定的</strong></p>\n</blockquote>\n<p>至于 this 的具体环节和规则，<strong>死记硬背</strong>以下几条规则：</p>\n<ul>\n<li>在函数体中，简单调用该函数时（非显式&#x2F;隐式绑定下），严格模式下 this 绑定到 undefined，否则绑定到全局对象 window／global；</li>\n<li>一般构造函数 new 调用，绑定到新创建的对象上；</li>\n<li>一般由 call&#x2F;apply&#x2F;bind 方法显式调用，绑定到指定参数的对象上；</li>\n<li>一般由上下文对象调用，绑定在该对象上；</li>\n<li>箭头函数中，根据外层上下文绑定的 this 决定 this 指向。</li>\n</ul>\n<h4 id=\"实例一：函数调用\"><a href=\"#实例一：函数调用\" class=\"headerlink\" title=\"实例一：函数调用\"></a>实例一：函数调用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 非严格模式下，独立声明的函数体挂载在 window 上</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span> () &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里等同于调用 window.f1()</span></span><br><span class=\"line\"><span class=\"title function_\">fn</span>() <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初级版</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Zeus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">fn</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用 fn 的是 person，this 指向 person</span></span><br><span class=\"line\">person.<span class=\"title function_\">fn</span>() <span class=\"comment\">// &#123;name: &#x27;Zeus&#x27;, fn: ƒ&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 升级版</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn1 = foo.<span class=\"property\">fn</span></span><br><span class=\"line\"><span class=\"comment\">// fn1 是声明挂载在 window 上的函数，调用 fn1 的是 window，this 指向 window</span></span><br><span class=\"line\"><span class=\"title function_\">fn1</span>() <span class=\"comment\">// window</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最终版</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person1 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">fn</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person2 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">fn</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> person1.<span class=\"title function_\">fn</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person3 = &#123;</span><br><span class=\"line\">    <span class=\"attr\">fn</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fn = person1.<span class=\"property\">fn</span> <span class=\"comment\">// 这里 fn 直接挂载 window 调用了</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o1.<span class=\"title function_\">fn</span>())  <span class=\"comment\">// person1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o2.<span class=\"title function_\">fn</span>())  <span class=\"comment\">// person1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(o3.<span class=\"title function_\">fn</span>())  <span class=\"comment\">// window</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>this 指向的是最后调用它的对象。</strong></p>\n<p>要记住了：</p>\n<blockquote>\n<p>在执行函数时，如果函数中的 this 是被上一级的对象所调用，那么 this 指向的就是上一级的对象；否则指向全局环境。</p>\n</blockquote>\n<h4 id=\"实例二：bind-call-apply-都是用来改变-this-指向\"><a href=\"#实例二：bind-call-apply-都是用来改变-this-指向\" class=\"headerlink\" title=\"实例二：bind&#x2F;call&#x2F;apply 都是用来改变 this 指向\"></a>实例二：bind&#x2F;call&#x2F;apply 都是用来改变 this 指向</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// call</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;&#125;</span><br><span class=\"line\">fn.<span class=\"title function_\">call</span>(target, <span class=\"string\">&#x27;arg1&#x27;</span>, <span class=\"string\">&#x27;arg2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// apply</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;&#125;</span><br><span class=\"line\">fn.<span class=\"title function_\">apply</span>(target, [<span class=\"string\">&#x27;arg1&#x27;</span>, <span class=\"string\">&#x27;arg2&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bind 不会执行相关函数，而是返回一个新的函数，这个新的函数已经自动绑定了新的 this 指向</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> target = &#123;&#125;</span><br><span class=\"line\">fn.<span class=\"title function_\">bind</span>(target, <span class=\"string\">&#x27;arg1&#x27;</span>, <span class=\"string\">&#x27;arg2&#x27;</span>)()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 简单的例子</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> zeus = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Zeus&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">logName</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> chloe = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Chloe&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(zeus.<span class=\"property\">logName</span>.<span class=\"title function_\">call</span>(chloe)) <span class=\"comment\">// Chloe</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实例三：new-构造函数和-this\"><a href=\"#实例三：new-构造函数和-this\" class=\"headerlink\" title=\"实例三：new 构造函数和 this\"></a>实例三：new 构造函数和 this</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;Zeus&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span>)  <span class=\"comment\">// Zeus</span></span><br></pre></td></tr></table></figure>\n\n<p>new 操作符调用构造函数，具体做了什么？以下供参考：</p>\n<ul>\n<li>创建一个新的对象；</li>\n<li>将构造函数的 this 指向这个新对象；</li>\n<li>为这个对象添加属性、方法等；</li>\n<li>最终返回新对象。</li>\n</ul>\n<p>类似于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj  = &#123;&#125;</span><br><span class=\"line\">obj.<span class=\"property\">__proto__</span> = <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"title function_\">call</span>(obj)</span><br></pre></td></tr></table></figure>\n\n<p>有一点必须注意的是：</p>\n<blockquote>\n<p>如果构造函数中显式返回一个值，且返回的是一个对象，那么 this 就指向这个返回的对象；如果返回的不是一个对象，那么 this 仍然指向实例。</p>\n</blockquote>\n<h4 id=\"实例四：箭头函数\"><a href=\"#实例四：箭头函数\" class=\"headerlink\" title=\"实例四：箭头函数\"></a>实例四：箭头函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person1 = &#123;  </span><br><span class=\"line\">    <span class=\"attr\">fn</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person2 = &#123;  </span><br><span class=\"line\">    <span class=\"attr\">fn</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;  </span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;  </span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person1.<span class=\"title function_\">fn</span>()) <span class=\"comment\">// window</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person2.<span class=\"title function_\">fn</span>()) <span class=\"comment\">// person2</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实例五：this-优先级\"><a href=\"#实例五：this-优先级\" class=\"headerlink\" title=\"实例五：this 优先级\"></a>实例五：this 优先级</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span> (a) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = a</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj1 = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = foo.<span class=\"title function_\">bind</span>(obj1)</span><br><span class=\"line\"><span class=\"title function_\">bar</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">a</span>) <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"keyword\">new</span> <span class=\"title function_\">bar</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj2.<span class=\"property\">a</span>) <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj1.<span class=\"property\">a</span>) <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>new 绑定修改了 bind 绑定中的 this，因此 new 绑定的优先级比显式 bind 绑定更高。</p>\n</blockquote>\n<p>参考文章:</p>\n<p><a href=\"https://gitbook.cn/gitchat/column/5c91c813968b1d64b1e08fde/topic/5c99a854ccb24267c1d0194f\">一网打尽 this，对执行上下文说 Yes</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\">this MDN</a></p>\n","categories":["web"],"tags":["JavaScript"]},{"title":"JS：浅析 Vue-Router","url":"/2020/03/19/js-vue-router/","content":"<p><a href=\"https://router.vuejs.org/zh/\">Vue Router</a> 是 Vue.js 构建单页面应用的路由管理器库，支持 <strong>hash</strong>、<strong>history</strong>、<strong>abstract</strong> 3种路由方式，提供了 <strong>&lt;router-view&gt;</strong> 和 <strong>&lt;router-link&gt;</strong> 2种组件。</p>\n<span id=\"more\"></span>\n\n<p>基本使用例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello App!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/foo&quot;</span>&gt;</span>Go to Foo<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/bar&quot;</span>&gt;</span>Go to Bar<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 路由出口 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">VueRouter</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-router&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">VueRouter</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. 定义路由</span></span><br><span class=\"line\"><span class=\"comment\">// 每个路由应该映射一个组件。 其中&quot;component&quot; 可以是</span></span><br><span class=\"line\"><span class=\"comment\">// 通过 Vue.extend() 创建的组件构造器，</span></span><br><span class=\"line\"><span class=\"comment\">// 或者，只是一个组件配置对象。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/foo&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./foo.vue&#x27;</span>) &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/bar&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./bar.vue&#x27;</span>) &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 创建 router 实例，然后传 `routes` 配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>(&#123;</span><br><span class=\"line\">  routes</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 创建和挂载根实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\">h</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">h</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  router <span class=\"comment\">// 记得要通过 router 配置参数注入路由，从而让整个应用都有路由功能</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>分析源码时会涉及不少辅助函数，无需详细分析其函数，只需要通过 <em>test&#x2F;unit&#x2F;specs</em> 中的断言了解该辅助函数的作用输出即可。</p>\n</blockquote>\n<h4 id=\"路由注册\"><a href=\"#路由注册\" class=\"headerlink\" title=\"路由注册\"></a>路由注册</h4><p>使用 <code>Vue.use(VueRouter)</code> 其实是主动调用 <code>VueRouter</code> 的 <strong>install</strong> 方法。</p>\n<p>install 源代码：<em>src&#x2F;install.js</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">install</span> (<span class=\"title class_\">Vue</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">isDef</span> = v =&gt; v !== <span class=\"literal\">undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">registerInstance</span> = (<span class=\"params\">vm, callVal</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = vm.<span class=\"property\">$options</span>.<span class=\"property\">_parentVnode</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(i) &amp;&amp; <span class=\"title function_\">isDef</span>(i = i.<span class=\"property\">data</span>) &amp;&amp; <span class=\"title function_\">isDef</span>(i = i.<span class=\"property\">registerRouteInstance</span>)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">i</span>(vm, callVal)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Vue</span>.<span class=\"title function_\">mixin</span>(&#123;</span><br><span class=\"line\">    beforeCreate () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$options</span>.<span class=\"property\">router</span>)) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_routerRoot</span> = <span class=\"variable language_\">this</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_router</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">$options</span>.<span class=\"property\">router</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_router</span>.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">        <span class=\"title class_\">Vue</span>.<span class=\"property\">util</span>.<span class=\"title function_\">defineReactive</span>(<span class=\"variable language_\">this</span>, <span class=\"string\">&#x27;_route&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">_router</span>.<span class=\"property\">history</span>.<span class=\"property\">current</span>)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_routerRoot</span> = (<span class=\"variable language_\">this</span>.<span class=\"property\">$parent</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">$parent</span>.<span class=\"property\">_routerRoot</span>) || <span class=\"variable language_\">this</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">registerInstance</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    destroyed () &#123;</span><br><span class=\"line\">      <span class=\"title function_\">registerInstance</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;$router&#x27;</span>, &#123;</span><br><span class=\"line\">    get () &#123; <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_routerRoot</span>.<span class=\"property\">_router</span> &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">&#x27;$route&#x27;</span>, &#123;</span><br><span class=\"line\">    get () &#123; <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_routerRoot</span>.<span class=\"property\">_route</span> &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;RouterView&#x27;</span>, <span class=\"title class_\">View</span>)</span><br><span class=\"line\">  <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;RouterLink&#x27;</span>, <span class=\"title class_\">Link</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 跟 created 一样的合并策略</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> strats = <span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">optionMergeStrategies</span></span><br><span class=\"line\">  <span class=\"comment\">// use the same hook merging strategy for route hooks</span></span><br><span class=\"line\">  strats.<span class=\"property\">beforeRouteEnter</span> = strats.<span class=\"property\">beforeRouteLeave</span> = strats.<span class=\"property\">beforeRouteUpdate</span> = strats.<span class=\"property\">created</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先利用 <code>Vue.mixin</code> 在每个组件中的 <code>beforeCreate</code> 和 <code>destroyed</code> 钩子函数中注入实例。</li>\n<li>接着在 Vue 原型上定义了 <code>$router</code> 和 <code>$route</code> 2个属性的 get 方法，也就是 <code>this.$router</code> 和 <code>this.$route</code>。</li>\n<li>然后通过 <code>Vue.component</code> 定义 <code>&lt;router-view&gt;</code> 和 <code>&lt;router-link&gt;</code> 两个组件。</li>\n<li>最后定义路由中 <code>beforeRouteEnter</code>、<code>beforeRouteLeave</code>、<code>beforeRouteUpdate</code> 等钩子函数的合并策略，和普通的钩子函数一样。</li>\n</ul>\n<h4 id=\"VueRouter\"><a href=\"#VueRouter\" class=\"headerlink\" title=\"VueRouter\"></a>VueRouter</h4><p>Vue-router 的入口文件是 <em>src&#x2F;index.js</em>, 声明了 <strong>VueRouter</strong> 类，也实现了 <strong>install</strong> 的静态方法：<code>VueRouter.install = install</code>。</p>\n<p>VueRouter 源代码：<em>src&#x2F;index.js</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// VueRouter</span></span><br><span class=\"line\"><span class=\"title function_\">constructor</span> (<span class=\"attr\">options</span>: <span class=\"title class_\">RouterOptions</span> = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">app</span> = <span class=\"literal\">null</span> <span class=\"comment\">// 根 Vue 实例</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">apps</span> = [] <span class=\"comment\">// 持有 $options.router 属性的 Vue 实例</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">options</span> = options <span class=\"comment\">// 路由配置</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">beforeHooks</span> = [] <span class=\"comment\">// 全局 beforeEach</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolveHooks</span> = [] <span class=\"comment\">// 全局 beforeResolve</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">afterHooks</span> = [] <span class=\"comment\">// 全局 afterEach</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">matcher</span> = <span class=\"title function_\">createMatcher</span>(options.<span class=\"property\">routes</span> || [], <span class=\"variable language_\">this</span>) <span class=\"comment\">// 路由匹配器</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">mode</span> = options.<span class=\"property\">mode</span> || <span class=\"string\">&#x27;hash&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 以下都是继承了 History 基类</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (mode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;history&#x27;</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">history</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HTML5History</span>(<span class=\"variable language_\">this</span>, options.<span class=\"property\">base</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;hash&#x27;</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">history</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">HashHistory</span>(<span class=\"variable language_\">this</span>, options.<span class=\"property\">base</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">fallback</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;abstract&#x27;</span>:</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">history</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">AbstractHistory</span>(<span class=\"variable language_\">this</span>, options.<span class=\"property\">base</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>业务项目上调用 <code>const router = new VueRouter(&#123;routes&#125;)</code> 实例化 <code>VueRouter</code> 后会返回它的实例 <code>router</code>，再在 <code>const app = new Vue(&#123;router&#125;)</code> 时把 <code>router</code> 作为配置（$options）的属性传入，然后在 <code>install</code> 方法中 mixin 的 <code>beforeCreate</code> 函数使用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">beforeCreate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">$options</span>.<span class=\"property\">router</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_router</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">$options</span>.<span class=\"property\">router</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_router</span>.<span class=\"title function_\">init</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当 <code>new Vue</code> 根组件执行 <code>beforeCreate</code> 钩子函数的时候，如果传入了 <code>router</code> 实例，都会执行 <code>router.init</code> 方法初始化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">init (<span class=\"attr\">app</span>: any <span class=\"comment\">/* Vue component instance */</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">apps</span>.<span class=\"title function_\">push</span>(app) <span class=\"comment\">// app 就是持有 $options.router 属性的 Vue 实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">app</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">app</span> = app</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> history = <span class=\"variable language_\">this</span>.<span class=\"property\">history</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (history <span class=\"keyword\">instanceof</span> <span class=\"title class_\">HTML5History</span>) &#123;</span><br><span class=\"line\">      history.<span class=\"title function_\">transitionTo</span>(history.<span class=\"title function_\">getCurrentLocation</span>())</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (history <span class=\"keyword\">instanceof</span> <span class=\"title class_\">HashHistory</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"title function_\">setupHashListener</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        history.<span class=\"title function_\">setupListeners</span>()</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      history.<span class=\"title function_\">transitionTo</span>(</span><br><span class=\"line\">        history.<span class=\"title function_\">getCurrentLocation</span>(),</span><br><span class=\"line\">        setupHashListener,</span><br><span class=\"line\">        setupHashListener</span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    history.<span class=\"title function_\">listen</span>(<span class=\"function\"><span class=\"params\">route</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">apps</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        app.<span class=\"property\">_route</span> = route</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>init</code> 传入的 <code>app</code> 参数是根 <code>Vue</code> 实例，然后存储到 <code>this.apps</code> 中。再根据 history 类型执行 <code>history.transitionTo</code> 方法，该方法定义在 <code>History</code> 基类中。源代码：<em>src&#x2F;history&#x2F;base.js</em>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 路由过渡</span></span><br><span class=\"line\">transitionTo (<span class=\"attr\">location</span>: <span class=\"title class_\">RawLocation</span>, onComplete?: <span class=\"title class_\">Function</span>, onAbort?: <span class=\"title class_\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> route = <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"title function_\">match</span>(location, <span class=\"variable language_\">this</span>.<span class=\"property\">current</span>)</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用 <code>this.router.match</code> 实际上是调用了 <code>this.matcher.match</code> 去做匹配。</p>\n<h4 id=\"Matcher\"><a href=\"#Matcher\" class=\"headerlink\" title=\"Matcher\"></a>Matcher</h4><p>matcher 源代码：<em>src&#x2F;create-matcher.js</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> type <span class=\"title class_\">Matcher</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">match</span>: <span class=\"function\">(<span class=\"params\">raw: RawLocation, current?: Route, redirectedFrom?: Location</span>) =&gt;</span> <span class=\"title class_\">Route</span>;</span><br><span class=\"line\">    <span class=\"attr\">addRoutes</span>: <span class=\"function\">(<span class=\"params\">routes: <span class=\"built_in\">Array</span>&lt;RouteConfig&gt;</span>) =&gt;</span> <span class=\"keyword\">void</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Matcher</code> 返回了2个方法：<code>match</code> 和 <code>adddRoutes</code>。</p>\n<h5 id=\"createMatcher\"><a href=\"#createMatcher\" class=\"headerlink\" title=\"createMatcher\"></a>createMatcher</h5><p>在 <code>new VueRouter(&#123;routes&#125;)</code> 时, <code>VueRouter</code> 的 <code>constructor</code> 通过 <code>this.matcher = createMatcher(options.routes || [], this)</code> 创建 matcher。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createMatcher</span> (</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">RouteConfig</span>&gt;,</span><br><span class=\"line\">  <span class=\"attr\">router</span>: <span class=\"title class_\">VueRouter</span></span><br><span class=\"line\">): <span class=\"title class_\">Matcher</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; pathList, pathMap, nameMap &#125; = <span class=\"title function_\">createRouteMap</span>(routes)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">addRoutes</span> (routes) &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">match</span> (</span><br><span class=\"line\">        <span class=\"attr\">raw</span>: <span class=\"title class_\">RawLocation</span>,</span><br><span class=\"line\">        currentRoute?: <span class=\"title class_\">Route</span>,</span><br><span class=\"line\">        redirectedFrom?: <span class=\"title class_\">Location</span></span><br><span class=\"line\">    ): <span class=\"title class_\">Route</span> &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        match,</span><br><span class=\"line\">        addRoutes</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p><code>createMatcher</code> 接受了 2 个参数，一个是 <code>routes</code>，它是用户定义的路由配置，一个是 <code>router</code>，是 <code>new VueRouter</code> 时返回的实例 <code>this</code>。</p>\n</li>\n<li><p><code>const &#123; pathList, pathMap, nameMap &#125; = createRouteMap(routes)</code> 深度遍历 <code>routes</code> 创建了一个映射路由表，<code>pathList</code> 存储所有的 <code>path</code>，<code>pathMap</code> 表示一个 <code>path</code> 到 <code>RouteRecord</code> 的映射关系，而 <code>nameMap</code> 表示 <code>name</code> 到 <code>RouteRecord</code> 的映射关系。<code>RouteRecord</code> 的数据结构如下：</p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// flow/declarations.js</span></span><br><span class=\"line\">declare type <span class=\"title class_\">RouteRecord</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: string;</span><br><span class=\"line\">    <span class=\"attr\">regex</span>: <span class=\"title class_\">RouteRegExp</span>;</span><br><span class=\"line\">    <span class=\"attr\">components</span>: <span class=\"title class_\">Dictionary</span>&lt;any&gt;;</span><br><span class=\"line\">    <span class=\"attr\">instances</span>: <span class=\"title class_\">Dictionary</span>&lt;any&gt;;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: ?string;</span><br><span class=\"line\">    <span class=\"attr\">parent</span>: ?<span class=\"title class_\">RouteRecord</span>;</span><br><span class=\"line\">    <span class=\"attr\">redirect</span>: ?<span class=\"title class_\">RedirectOption</span>;</span><br><span class=\"line\">    <span class=\"attr\">matchAs</span>: ?string;</span><br><span class=\"line\">    <span class=\"attr\">beforeEnter</span>: ?<span class=\"title class_\">NavigationGuard</span>;</span><br><span class=\"line\">    <span class=\"attr\">meta</span>: any;</span><br><span class=\"line\">    <span class=\"attr\">props</span>: boolean | <span class=\"title class_\">Object</span> | <span class=\"title class_\">Function</span> | <span class=\"title class_\">Dictionary</span>&lt;boolean | <span class=\"title class_\">Object</span> | <span class=\"title class_\">Function</span>&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"addRoutes\"><a href=\"#addRoutes\" class=\"headerlink\" title=\"addRoutes\"></a>addRoutes</h5><p><code>addRoutes</code> 方法的作用是动态添加路由配置.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">addRoutes</span> (routes) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">createRouteMap</span>(routes, pathList, pathMap, nameMap)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"match\"><a href=\"#match\" class=\"headerlink\" title=\"match\"></a>match</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">match</span> (</span><br><span class=\"line\">    <span class=\"attr\">raw</span>: <span class=\"title class_\">RawLocation</span>,</span><br><span class=\"line\">    currentRoute?: <span class=\"title class_\">Route</span>,</span><br><span class=\"line\">    redirectedFrom?: <span class=\"title class_\">Location</span></span><br><span class=\"line\">  ): <span class=\"title class_\">Route</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> location = <span class=\"title function_\">normalizeLocation</span>(raw, currentRoute, <span class=\"literal\">false</span>, router)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; name &#125; = location</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> record = nameMap[name]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!record) <span class=\"keyword\">return</span> <span class=\"title function_\">_createRoute</span>(<span class=\"literal\">null</span>, location)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> paramNames = record.<span class=\"property\">regex</span>.<span class=\"property\">keys</span></span><br><span class=\"line\">            .<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> !key.<span class=\"property\">optional</span>)</span><br><span class=\"line\">            .<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> key.<span class=\"property\">name</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> location.<span class=\"property\">params</span> !== <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">            location.<span class=\"property\">params</span> = &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentRoute &amp;&amp; <span class=\"keyword\">typeof</span> currentRoute.<span class=\"property\">params</span> === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> currentRoute.<span class=\"property\">params</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> location.<span class=\"property\">params</span>) &amp;&amp; paramNames.<span class=\"title function_\">indexOf</span>(key) &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    location.<span class=\"property\">params</span>[key] = currentRoute.<span class=\"property\">params</span>[key]</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location.<span class=\"property\">path</span> = <span class=\"title function_\">fillParams</span>(record.<span class=\"property\">path</span>, location.<span class=\"property\">params</span>, <span class=\"string\">`named route &quot;<span class=\"subst\">$&#123;name&#125;</span>&quot;`</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">_createRoute</span>(record, location, redirectedFrom)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (location.<span class=\"property\">path</span>) &#123;</span><br><span class=\"line\">        location.<span class=\"property\">params</span> = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; pathList.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">const</span> path = pathList[i]</span><br><span class=\"line\">            <span class=\"keyword\">const</span> record = pathMap[path]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">matchRoute</span>(record.<span class=\"property\">regex</span>, location.<span class=\"property\">path</span>, location.<span class=\"property\">params</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">_createRoute</span>(record, location, redirectedFrom)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// no match</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">_createRoute</span>(<span class=\"literal\">null</span>, location)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">_createRoute</span> (</span><br><span class=\"line\">    <span class=\"attr\">record</span>: ?<span class=\"title class_\">RouteRecord</span>,</span><br><span class=\"line\">    <span class=\"attr\">location</span>: <span class=\"title class_\">Location</span>,</span><br><span class=\"line\">    redirectedFrom?: <span class=\"title class_\">Location</span></span><br><span class=\"line\">): <span class=\"title class_\">Route</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (record &amp;&amp; record.<span class=\"property\">redirect</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">redirect</span>(record, redirectedFrom || location)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (record &amp;&amp; record.<span class=\"property\">matchAs</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">alias</span>(record, location, record.<span class=\"property\">matchAs</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">createRoute</span>(record, location, redirectedFrom, router)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>match</code> 方法接收3个参数，<code>raw</code> 可以是 url 字符串，也可以是 Location 对象,<code>currentRoute</code> 表示当前路径，<code>redirectedFrom</code> 与重定向相关。<code>_createRoute</code> 返回值是一个 <code>Route</code> 路径。</p>\n<p><code>_createRoute</code> 最终会调用 <code>createRoute</code> 方法，createRoute 源代码：<em>src&#x2F;uitl&#x2F;route.js</em>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">createRoute</span> (</span><br><span class=\"line\">    <span class=\"attr\">record</span>: ?<span class=\"title class_\">RouteRecord</span>,</span><br><span class=\"line\">    <span class=\"attr\">location</span>: <span class=\"title class_\">Location</span>,</span><br><span class=\"line\">    redirectedFrom?: ?<span class=\"title class_\">Location</span>,</span><br><span class=\"line\">    router?: <span class=\"title class_\">VueRouter</span></span><br><span class=\"line\">): <span class=\"title class_\">Route</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stringifyQuery = router &amp;&amp; router.<span class=\"property\">options</span>.<span class=\"property\">stringifyQuery</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"attr\">query</span>: any = location.<span class=\"property\">query</span> || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        query = <span class=\"title function_\">clone</span>(query)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">route</span>: <span class=\"title class_\">Route</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: location.<span class=\"property\">name</span> || (record &amp;&amp; record.<span class=\"property\">name</span>),</span><br><span class=\"line\">        <span class=\"attr\">meta</span>: (record &amp;&amp; record.<span class=\"property\">meta</span>) || &#123;&#125;,</span><br><span class=\"line\">        <span class=\"attr\">path</span>: location.<span class=\"property\">path</span> || <span class=\"string\">&#x27;/&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">hash</span>: location.<span class=\"property\">hash</span> || <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">        query,</span><br><span class=\"line\">        <span class=\"attr\">params</span>: location.<span class=\"property\">params</span> || &#123;&#125;,</span><br><span class=\"line\">        <span class=\"attr\">fullPath</span>: <span class=\"title function_\">getFullPath</span>(location, stringifyQuery),</span><br><span class=\"line\">        <span class=\"attr\">matched</span>: record ? <span class=\"title function_\">formatMatch</span>(record) : []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (redirectedFrom) &#123;</span><br><span class=\"line\">        route.<span class=\"property\">redirectedFrom</span> = <span class=\"title function_\">getFullPath</span>(redirectedFrom, stringifyQuery)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">freeze</span>(route)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>createRoute</code> 可以根据 <code>record</code> 和 <code>location</code> 创建出来，最终返回的是一条 <code>Route</code> 路径，在 Vue-Router 中，所有的 <code>Route</code> 最终都会通过 <code>createRoute</code> 函数创建，并且它最后是<strong>不可以被外部修改</strong>的。Route 对象中有一个非常重要属性是 <code>matched</code>，它通过 <code>formatMatch(record)</code> 计算而来。</p>\n<blockquote>\n<p><code>matched</code> 属性非常有用，它为之后渲染组件提供了依据。</p>\n</blockquote>\n<h4 id=\"路径切换（重点）\"><a href=\"#路径切换（重点）\" class=\"headerlink\" title=\"路径切换（重点）\"></a>路径切换（重点）</h4><p><code>history.transitionTo</code> 是 <code>Vue-Router</code> 中非常重要的方法，在切换路由线路时执行。</p>\n<p>上面分析了 <code>matcher</code> 的相关实现，知道它是如何找到匹配的新线路，那么匹配到新线路后又做了哪些事情，这就涉及到 <code>transitionTo</code> 的实现了。源代码 <em>src&#x2F;history&#x2F;base.js</em>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">transitionTo (<span class=\"attr\">location</span>: <span class=\"title class_\">RawLocation</span>, onComplete?: <span class=\"title class_\">Function</span>, onAbort?: <span class=\"title class_\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> route = <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"title function_\">match</span>(location, <span class=\"variable language_\">this</span>.<span class=\"property\">current</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">confirmTransition</span>(route, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateRoute</span>(route)</span><br><span class=\"line\">        onComplete &amp;&amp; <span class=\"title function_\">onComplete</span>(route)</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">ensureURL</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// fire ready cbs once</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">ready</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">ready</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">readyCbs</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123; <span class=\"title function_\">cb</span>(route) &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (onAbort) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onAbort</span>(err)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err &amp;&amp; !<span class=\"variable language_\">this</span>.<span class=\"property\">ready</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">ready</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">readyErrorCbs</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123; <span class=\"title function_\">cb</span>(err) &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先根据目标 <code>location</code> 和当前路径 <code>this.current</code> 执行 <code>this.router.match</code> 方法去匹配到目标的路径 <code>route</code>, <code>transitionTo</code> 实际上也就是在切换 <code>this.current</code>。</li>\n<li><strong>拿到新的路径后，接下来会执行 <code>confirmTransition</code> 做真正的切换（关键点）</strong>。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">confirmTransition (<span class=\"attr\">route</span>: <span class=\"title class_\">Route</span>, <span class=\"attr\">onComplete</span>: <span class=\"title class_\">Function</span>, onAbort?: <span class=\"title class_\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> current = <span class=\"variable language_\">this</span>.<span class=\"property\">current</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">abort</span> = err =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isError</span>(err)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">errorCbs</span>.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">errorCbs</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123; <span class=\"title function_\">cb</span>(err) &#125;)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">warn</span>(<span class=\"literal\">false</span>, <span class=\"string\">&#x27;uncaught error during route navigation:&#x27;</span>)</span><br><span class=\"line\">                <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(err)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        onAbort &amp;&amp; <span class=\"title function_\">onAbort</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        <span class=\"title function_\">isSameRoute</span>(route, current) &amp;&amp;</span><br><span class=\"line\">        <span class=\"comment\">// in the case the route map has been dynamically appended to</span></span><br><span class=\"line\">        route.<span class=\"property\">matched</span>.<span class=\"property\">length</span> === current.<span class=\"property\">matched</span>.<span class=\"property\">length</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">ensureURL</span>()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">abort</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        updated,</span><br><span class=\"line\">        deactivated,</span><br><span class=\"line\">        activated</span><br><span class=\"line\">    &#125; = <span class=\"title function_\">resolveQueue</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">current</span>.<span class=\"property\">matched</span>, route.<span class=\"property\">matched</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">queue</span>: <span class=\"title class_\">Array</span>&lt;?<span class=\"title class_\">NavigationGuard</span>&gt; = [].<span class=\"title function_\">concat</span>(</span><br><span class=\"line\">        <span class=\"title function_\">extractLeaveGuards</span>(deactivated),</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"property\">beforeHooks</span>,</span><br><span class=\"line\">        <span class=\"title function_\">extractUpdateHooks</span>(updated),</span><br><span class=\"line\">        activated.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">beforeEnter</span>),</span><br><span class=\"line\">        <span class=\"title function_\">resolveAsyncComponents</span>(activated)</span><br><span class=\"line\">    )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">pending</span> = route</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">iterator</span> = (<span class=\"params\">hook: NavigationGuard, next</span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">pending</span> !== route) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">abort</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">hook</span>(route, current, <span class=\"function\">(<span class=\"params\">to: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (to === <span class=\"literal\">false</span> || <span class=\"title function_\">isError</span>(to)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// next(false) -&gt; abort navigation, ensure current URL</span></span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">ensureURL</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                <span class=\"title function_\">abort</span>(to)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                <span class=\"keyword\">typeof</span> to === <span class=\"string\">&#x27;string&#x27;</span> ||</span><br><span class=\"line\">                (<span class=\"keyword\">typeof</span> to === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; (</span><br><span class=\"line\">                <span class=\"keyword\">typeof</span> to.<span class=\"property\">path</span> === <span class=\"string\">&#x27;string&#x27;</span> ||</span><br><span class=\"line\">                <span class=\"keyword\">typeof</span> to.<span class=\"property\">name</span> === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">                ))</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// next(&#x27;/&#x27;) or next(&#123; path: &#x27;/&#x27; &#125;) -&gt; redirect</span></span><br><span class=\"line\">                <span class=\"title function_\">abort</span>()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> to === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; to.<span class=\"property\">replace</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">replace</span>(to)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">push</span>(to)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// confirm transition and pass on the value</span></span><br><span class=\"line\">                <span class=\"title function_\">next</span>(to)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">abort</span>(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">runQueue</span>(queue, iterator, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> postEnterCbs = []</span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"title function_\">isValid</span> = (<span class=\"params\"></span>) =&gt; <span class=\"variable language_\">this</span>.<span class=\"property\">current</span> === route</span><br><span class=\"line\">        <span class=\"comment\">// wait until async components are resolved before</span></span><br><span class=\"line\">        <span class=\"comment\">// extracting in-component enter guards</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> enterGuards = <span class=\"title function_\">extractEnterGuards</span>(activated, postEnterCbs, isValid)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> queue = enterGuards.<span class=\"title function_\">concat</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"property\">resolveHooks</span>)</span><br><span class=\"line\">        <span class=\"title function_\">runQueue</span>(queue, iterator, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">pending</span> !== route) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">abort</span>()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">pending</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">            <span class=\"title function_\">onComplete</span>(route)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"property\">app</span>) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"property\">app</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                    postEnterCbs.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123; <span class=\"title function_\">cb</span>() &#125;)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先定义了 <code>abort</code> 函数，判断要跳转的 <code>route</code> 和当前 <code>current</code> 是相同路径的话，直接调用 <code>this.ensureURL</code> 和 <code>abort</code>。</li>\n<li>接着根据 <code>current.matched</code> 和 <code>route.matched</code> 执行了 <code>resolveQueue</code> 方法解析出 3 个队列（这里是开始管理更新路由栈），拿到 <code>updated</code>(已更新)、<code>activated</code>（激活）、<code>deactivated</code>（失活） 3 个 <code>ReouteRecord</code> 数组后，接下来就是路径变换后的一个重要部分，执行一系列的钩子函数（<a href=\"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E5%85%A8%E5%B1%80%E5%89%8D%E7%BD%AE%E5%AE%88%E5%8D%AB\">导航守卫</a>）。</li>\n</ul>\n<h5 id=\"导航守卫\"><a href=\"#导航守卫\" class=\"headerlink\" title=\"导航守卫\"></a>导航守卫</h5><p>路由切换的时候，会执行一系列的钩子函数，我们称之为导航守卫。</p>\n<p><img src=\"/images/js-vue-router/vue-router-guard.png\" alt=\"完整的导航解析流程\"></p>\n<p>接着继续看上面 <code>confirmTransition</code> 函数中是怎样执行这些钩子函数的，首先构造出一个队列 <code>queue</code>，实际是一个导航守卫数组；然后再定义一个迭代器函数 <code>iterator</code>；最后再执行 <code>runQueue</code> 方法来执行这个队列。</p>\n<p><code>runQueue</code> 方法源代码：<em>src&#x2F;util&#x2F;async.js</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">runQueue</span> (<span class=\"attr\">queue</span>: <span class=\"title class_\">Array</span>&lt;?<span class=\"title class_\">NavigationGuard</span>&gt;, <span class=\"attr\">fn</span>: <span class=\"title class_\">Function</span>, <span class=\"attr\">cb</span>: <span class=\"title class_\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">step</span> = index =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= queue.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">cb</span>()</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (queue[index]) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">fn</span>(queue[index], <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">step</span>(index + <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">step</span>(index + <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">step</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>runQueue</code> 是一个非常经典的异步函数队列执行的模式（小程序请求数限制的优化方案）。<code>queue</code> 是一个 <code>NavigationGuard</code> 类型的数组，这里的 <code>fn</code> 是刚才的 <code>iterator</code> 函数。回到之前 <code>iterator</code> 函数的定义：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">iterator</span> = (<span class=\"params\">hook: NavigationGuard, next</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">pending</span> !== route) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">abort</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">hook</span>(route, current, <span class=\"function\">(<span class=\"params\">to: any</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (to === <span class=\"literal\">false</span> || <span class=\"title function_\">isError</span>(to)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// next(false) -&gt; abort navigation, ensure current URL</span></span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">ensureURL</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">                <span class=\"title function_\">abort</span>(to)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                <span class=\"keyword\">typeof</span> to === <span class=\"string\">&#x27;string&#x27;</span> ||</span><br><span class=\"line\">                (<span class=\"keyword\">typeof</span> to === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; (</span><br><span class=\"line\">                <span class=\"keyword\">typeof</span> to.<span class=\"property\">path</span> === <span class=\"string\">&#x27;string&#x27;</span> ||</span><br><span class=\"line\">                <span class=\"keyword\">typeof</span> to.<span class=\"property\">name</span> === <span class=\"string\">&#x27;string&#x27;</span></span><br><span class=\"line\">                ))</span><br><span class=\"line\">            ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// next(&#x27;/&#x27;) or next(&#123; path: &#x27;/&#x27; &#125;) -&gt; redirect</span></span><br><span class=\"line\">                <span class=\"title function_\">abort</span>()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> to === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; to.<span class=\"property\">replace</span>) &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"title function_\">replace</span>(to)</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"variable language_\">this</span>.<span class=\"title function_\">push</span>(to)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// confirm transition and pass on the value</span></span><br><span class=\"line\">                <span class=\"title function_\">next</span>(to)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">abort</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>iterator</code> 函数的逻辑就是去执行每一个导航守卫 <code>hook</code>，并传入了 <code>route</code>、<code>current</code> 和匿名函数，这三个参数对应 vue-router 官方文档中的 <code>to</code>、<code>from</code>、<code>next</code>。只有执行 next 的时候，才会前进到下一个导航守卫钩子函数中。</p>\n<p>最后我们可以看看被遍历执行的 <code>queue</code> 是怎么构造的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">queue</span>: <span class=\"title class_\">Array</span>&lt;?<span class=\"title class_\">NavigationGuard</span>&gt; = [].<span class=\"title function_\">concat</span>(</span><br><span class=\"line\">    <span class=\"title function_\">extractLeaveGuards</span>(deactivated),</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"property\">beforeHooks</span>,</span><br><span class=\"line\">    <span class=\"title function_\">extractUpdateHooks</span>(updated),</span><br><span class=\"line\">    activated.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> m.<span class=\"property\">beforeEnter</span>),</span><br><span class=\"line\">    <span class=\"title function_\">resolveAsyncComponents</span>(activated)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>按照顺序如下：</p>\n<ol>\n<li>在失活的组件里调用离开守卫。</li>\n<li>调用全局的 beforeEach 守卫。</li>\n<li>在重用的组件里调用 beforeRouteUpdate 守卫。</li>\n<li>在激活的路由配置里调用 beforeEnter。</li>\n<li>解析异步路由组件。</li>\n</ol>\n<p>这里执行了<a href=\"https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E7%BB%84%E4%BB%B6%E5%86%85%E7%9A%84%E5%AE%88%E5%8D%AB\">完整的导航解析流程</a>的上半部分。</p>\n<ul>\n<li>第一步是通过执行 <code>extractLeavaGuards(deactivated)</code>, 在失活的组件里调用离开守卫 <code>beforeRouteLeave</code>:</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">extractLeaveGuards</span> (<span class=\"attr\">deactivated</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">RouteRecord</span>&gt;): <span class=\"title class_\">Array</span>&lt;?<span class=\"title class_\">Function</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">extractGuards</span>(deactivated, <span class=\"string\">&#x27;beforeRouteLeave&#x27;</span>, bindGuard, <span class=\"literal\">true</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>内部调用了 <code>extractGuards</code> 的通用方法，可以从 <code>RouteRecord</code> 数组中提取各个阶段的守卫：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">extractGuards</span> (</span><br><span class=\"line\">    <span class=\"attr\">records</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">RouteRecord</span>&gt;,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: string,</span><br><span class=\"line\">    <span class=\"attr\">bind</span>: <span class=\"title class_\">Function</span>,</span><br><span class=\"line\">    reverse?: boolean</span><br><span class=\"line\">): <span class=\"title class_\">Array</span>&lt;?<span class=\"title class_\">Function</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> guards = <span class=\"title function_\">flatMapComponents</span>(records, <span class=\"function\">(<span class=\"params\">def, instance, match, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// def 是 route</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> guard = <span class=\"title function_\">extractGuard</span>(def, name)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (guard) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(guard)</span><br><span class=\"line\">                ? guard.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">guard</span> =&gt;</span> <span class=\"title function_\">bind</span>(guard, instance, match, key))</span><br><span class=\"line\">                : <span class=\"title function_\">bind</span>(guard, instance, match, key)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">flatten</span>(reverse ? guards.<span class=\"title function_\">reverse</span>() : guards)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">flatMapComponents</span> (</span><br><span class=\"line\">    <span class=\"attr\">matched</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">RouteRecord</span>&gt;,</span><br><span class=\"line\">    <span class=\"attr\">fn</span>: <span class=\"title class_\">Function</span></span><br><span class=\"line\">): <span class=\"title class_\">Array</span>&lt;?<span class=\"title class_\">Function</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">flatten</span>(matched.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(m.<span class=\"property\">components</span>).<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> <span class=\"title function_\">fn</span>(</span><br><span class=\"line\">            m.<span class=\"property\">components</span>[key],</span><br><span class=\"line\">            m.<span class=\"property\">instances</span>[key],</span><br><span class=\"line\">            m, key</span><br><span class=\"line\">        ))</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// flatten 作用是把二维数组扁平为一维数组</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">flatten</span> (<span class=\"attr\">arr</span>: <span class=\"title class_\">Array</span>&lt;any&gt;): <span class=\"title class_\">Array</span>&lt;any&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">concat</span>.<span class=\"title function_\">apply</span>([], arr)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>flatMapComponents</code> 的作用就是返回一个数组</strong>。数组的元素是从 <code>matched</code> 里获取到所有组件的 <code>key</code>，然后返回 <code>fn</code> 函数执行的结果，<code>flatten</code> 作用是把二维数组扁平为一维数组。</p>\n<p>那么对于 <code>extractGuards</code> 中 <code>flatMapComponents</code> 的调用，执行每个 <code>fn</code> 的时候，<strong>通过 <code>extractGuard(def, name)</code> 获取到组件中对应 <code>name</code> 的导航守卫 <code>def.options[key]</code></strong></p>\n<p>获取到 <code>guard</code> 后，还会调用 <code>bind</code> 方法把组件的实例 <code>instance</code> 作为函数执行的上下文绑定到 <code>guard</code> 上，<code>bind</code> 方法的对应的是 <code>bindGuard</code>:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bindGuard</span> (<span class=\"attr\">guard</span>: <span class=\"title class_\">NavigationGuard</span>, <span class=\"attr\">instance</span>: ?_Vue): ?<span class=\"title class_\">NavigationGuard</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (instance) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">boundRouteGuard</span> () &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> guard.<span class=\"title function_\">apply</span>(instance, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>总结：<strong>那么对于 <code>extractLeaveGuards(deactivated)</code> 而言，获取到的就是所有失活组件中定义的 <code>beforeRouteLeave</code> 钩子函数。</strong></p>\n<ul>\n<li><p>第二步是 <code>this.router.beforeHooks</code>, 获取的就是用户注册的全局 <code>beforeEach</code> 守卫。</p>\n</li>\n<li><p>第三步执行了 <code>extractUpdateHooks(updated)</code>，和 <code>extractLeaveGuards(deactivated)</code> 类似，<code>extractUpdateHooks(updated)</code> 获取到的就是所有重用的组件中定义的 <code>beforeRouteUpdate</code> 钩子函数。</p>\n</li>\n<li><p>第四步执行了 <code>activated.map(m =&gt; m.beforeEnter)</code>，获取的是在激活的路由配置中定义的 <code>beforeEnter</code> 函数。</p>\n</li>\n<li><p>第五步是执行 <code>resolveAsyncComponents(activated)</code> 解析<strong>异步组件</strong>，解析完所有激活的异步组件后，我们就可以拿到这一次所有激活的组件。</p>\n</li>\n</ul>\n<p>终于可以来到了重点的执行环节了：<code>runQueue</code>！</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">runQueue</span>(queue, iterator, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> postEnterCbs = []</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">isValid</span> = (<span class=\"params\"></span>) =&gt; <span class=\"variable language_\">this</span>.<span class=\"property\">current</span> === route</span><br><span class=\"line\">    <span class=\"comment\">// wait until async components are resolved before</span></span><br><span class=\"line\">    <span class=\"comment\">// extracting in-component enter guards</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> enterGuards = <span class=\"title function_\">extractEnterGuards</span>(activated, postEnterCbs, isValid)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> queue = enterGuards.<span class=\"title function_\">concat</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"property\">resolveHooks</span>)</span><br><span class=\"line\">    <span class=\"title function_\">runQueue</span>(queue, iterator, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">pending</span> !== route) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">abort</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">pending</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"title function_\">onComplete</span>(route)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"property\">app</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">router</span>.<span class=\"property\">app</span>.$nextTick(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">                postEnterCbs.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> &#123; <span class=\"title function_\">cb</span>() &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li>\n<li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li>\n<li>导航被确认。</li>\n<li>调用全局的 afterEach 钩子。</li>\n</ol>\n<p>关于钩子函数的逻辑，后面有空再详细分析。路由在切换时除了执行钩子函数，还有关键的 2 个地方会发生变化：<strong>一个是 url 发生变化，一个是组件发生变化</strong>。</p>\n<h5 id=\"URL\"><a href=\"#URL\" class=\"headerlink\" title=\"URL\"></a>URL</h5><p>必须得搞懂！</p>\n<p>不管是点击 <code>router-link</code> 还是直接调用直接调用 <code>this.$router.push</code>，都是调用 <code>history.push</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">push (<span class=\"attr\">location</span>: <span class=\"title class_\">RawLocation</span>, onComplete?: <span class=\"title class_\">Function</span>, onAbort?: <span class=\"title class_\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">history</span>.<span class=\"title function_\">push</span>(location, onComplete, onAbort)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们看看 <code>hash</code> 模式下 <code>push</code> 函数的实现，源代码：<em>src&#x2F;history&#x2F;hash.js</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">push (<span class=\"attr\">location</span>: <span class=\"title class_\">RawLocation</span>, onComplete?: <span class=\"title class_\">Function</span>, onAbort?: <span class=\"title class_\">Function</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; <span class=\"attr\">current</span>: fromRoute &#125; = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">transitionTo</span>(location, <span class=\"function\"><span class=\"params\">route</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">pushHash</span>(route.<span class=\"property\">fullPath</span>)</span><br><span class=\"line\">        <span class=\"title function_\">handleScroll</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">router</span>, route, fromRoute, <span class=\"literal\">false</span>)</span><br><span class=\"line\">        onComplete &amp;&amp; <span class=\"title function_\">onComplete</span>(route)</span><br><span class=\"line\">    &#125;, onAbort)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>push 函数会先执行 this.transitionTo 切换路径（具体流程参考上面分析），在切换完成后执行回调函数，pushHash 函数：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pushHash</span> (path) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (supportsPushState) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">pushState</span>(<span class=\"title function_\">getUrl</span>(path))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">hash</span> = path</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">pushState</span> (url?: string, replace?: boolean) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">saveScrollPosition</span>() <span class=\"comment\">// 保存当前组件的滑动位置</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> history = <span class=\"variable language_\">window</span>.<span class=\"property\">history</span></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (replace) &#123;</span><br><span class=\"line\">      history.<span class=\"title function_\">replaceState</span>(&#123; <span class=\"attr\">key</span>: _key &#125;, <span class=\"string\">&#x27;&#x27;</span>, url)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      _key = <span class=\"title function_\">genKey</span>()</span><br><span class=\"line\">      history.<span class=\"title function_\">pushState</span>(&#123; <span class=\"attr\">key</span>: _key &#125;, <span class=\"string\">&#x27;&#x27;</span>, url)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>[replace ? <span class=\"string\">&#x27;replace&#x27;</span> : <span class=\"string\">&#x27;assign&#x27;</span>](url)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>pushState</code> 会调用浏览器原生的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/History_API\"><code>window.history</code></a> 的 <code>pushState</code> 接口或者 <code>replaceState</code> 接口，添加和修改历史记录条目，更新浏览器的 <code>url</code> 地址，并把当前 <code>url</code> 压入历史栈中。</p>\n<p>关于 <code>pushState</code> 的详细讲解，请参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/History_API\"><code>MDN</code></a>。</p>\n<p><strong>注意，调用 pushState 后浏览器并不会立即加载这个URL，但可能会在稍后某些情况下加载这个URL，比如在用户重新打开浏览器时。</strong></p>\n<p>而且在 VueRouter 初始化 history 时，会调用 <code>history.setupListeners()</code> 设置一个监听器，监听历史栈的变化：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">setupListeners () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> router = <span class=\"variable language_\">this</span>.<span class=\"property\">router</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> expectScroll = router.<span class=\"property\">options</span>.<span class=\"property\">scrollBehavior</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> supportsScroll = supportsPushState &amp;&amp; expectScroll</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (supportsScroll) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setupScroll</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"title function_\">addEventListener</span>(supportsPushState ? <span class=\"string\">&#x27;popstate&#x27;</span> : <span class=\"string\">&#x27;hashchange&#x27;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> current = <span class=\"variable language_\">this</span>.<span class=\"property\">current</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title function_\">ensureSlash</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">transitionTo</span>(<span class=\"title function_\">getHash</span>(), <span class=\"function\"><span class=\"params\">route</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (supportsScroll) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">handleScroll</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">router</span>, route, current, <span class=\"literal\">true</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!supportsPushState) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">replaceHash</span>(route.<span class=\"property\">fullPath</span>)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当点击浏览器返回按钮的时候，则会触发 <code>popstate</code> 事件，然后拿到当前要跳转的 <code>hash</code>，执行 <code>transtionTo</code> 方法做一次路径转换。</p>\n<p>总结：<code>pushState</code> 和 <code>onpopstate</code> 就是 <code>hash</code> 模式下 <code>url</code> 变化过程的核心了。</p>\n<h5 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h5><p>当我们知道路由 url 的切换过程后，接下来就需要了解 <code>&lt;router-view&gt;</code> 组件是如何自动渲染最新路由的。源代码：<em>srx&#x2F;components&#x2F;view.js</em>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">render (_, &#123; props, children, parent, data &#125;) &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">h</span>(component, data, children)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>组件 <code>render</code> 渲染函数首先获取当前的路径：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> route = parent.<span class=\"property\">$route</span></span><br></pre></td></tr></table></figure>\n\n<p><code>&lt;router-view&gt;</code> 是支持嵌套的，需要遍历父节点，找出当前 <code>router-view</code> 的深度 <code>depth</code>，再根据当前线路匹配的路径和 <code>depth</code> 找到对应的 <code>RouteRecord</code>，进而找到该渲染的组件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> depth = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (parent &amp;&amp; parent.<span class=\"property\">_routerRoot</span> !== parent) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent.<span class=\"property\">$vnode</span> &amp;&amp; parent.<span class=\"property\">$vnode</span>.<span class=\"property\">data</span>.<span class=\"property\">routerView</span>) &#123;</span><br><span class=\"line\">        depth++</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parent = parent.<span class=\"property\">$parent</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> matched = route.<span class=\"property\">matched</span>[depth]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> component = cache[name] = matched.<span class=\"property\">components</span>[name]</span><br></pre></td></tr></table></figure>\n\n<p>除了找到了应该渲染的组件 <code>component</code>，还定义了一个注册路由实例的方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">data.<span class=\"property\">registerRouteInstance</span> = <span class=\"function\">(<span class=\"params\">vm, val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> current = matched.<span class=\"property\">instances</span>[name]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        (val &amp;&amp; current !== vm) ||</span><br><span class=\"line\">        (!val &amp;&amp; current === vm)</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        matched.<span class=\"property\">instances</span>[name] = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>给 <code>vnode</code> 的 <code>data</code> 定义了 <code>registerRouteInstance</code> 方法，其实在文章一开始的 <code>install</code> 时 <code>beforeCreate</code> 钩子函数 <code>mixin</code> 调用的 <code>registerInstance</code>，本质上就是调用上述的 <code>data.registerRouteInstance</code> 函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">registerInstance</span> = (<span class=\"params\">vm, callVal</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = vm.<span class=\"property\">$options</span>.<span class=\"property\">_parentVnode</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(i) &amp;&amp; <span class=\"title function_\">isDef</span>(i = i.<span class=\"property\">data</span>) &amp;&amp; <span class=\"title function_\">isDef</span>(i = i.<span class=\"property\">registerRouteInstance</span>)) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">i</span>(vm, callVal)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">mixin</span>(&#123;</span><br><span class=\"line\">  beforeCreate () &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 相当于调用了 data.registerRouteInstance</span></span><br><span class=\"line\">    <span class=\"title function_\">registerInstance</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  destroyed () &#123;</span><br><span class=\"line\">    <span class=\"title function_\">registerInstance</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>registerInstance</code> 的目的是给 <code>matched.instances[name]</code> 赋值当前组件的 <code>vm</code> 实例。</p>\n<p><code>render</code> 函数的最后根据 <code>component</code> 渲染出对应的组件 <code>vonde</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"title function_\">h</span>(component, data, children)</span><br></pre></td></tr></table></figure>\n\n<p><strong>关键点</strong>：那么当我们执行 <code>transitionTo</code> 来更改路由线路后，组件是如何重新渲染的呢？</p>\n<p>答案是 <code>beforeCreate</code> 钩子函数的 <code>Vue.util.defineReactive(this, &#39;_route&#39;, this._router.history.current)</code> 中的 <code>_route</code>。</p>\n<p>由于根Vue实例的 <code>_route</code> 属性是响应式的，当 <code>render</code> 函数访问 <code>parent.$route</code> 时，两者就产生了依赖。所以每当执行完 <code>transitionTo</code> 后，修改 <code>app._route</code> 时，就会通知渲染 <code>watcher</code> 更新，重新渲染组件。</p>\n<p>one more time analyse（再回顾收集依赖和触发依赖的过程）：</p>\n<p><code>&lt;router-view&gt;</code> 异步组件中的 <code>render</code> 渲染函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> route = parent.<span class=\"property\">$route</span></span><br></pre></td></tr></table></figure>\n\n<p>而这个 <code>parent</code> 实例的 <code>$route</code> 是在 <code>src/install.js</code> 中定义的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>, <span class=\"string\">`$route`</span>, &#123;</span><br><span class=\"line\">    get () &#123; <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_routerRoot</span>.<span class=\"property\">_route</span> &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>① <code>render</code> 函数读取 <code>parent.$route</code> 时就会触发 <code>render</code> 的 <code>getter</code>，收集其依赖。</p>\n<p>然后再 <code>new Vue(&#123;router&#125;)</code> 时执行 <code>this._router.init</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">history.<span class=\"title function_\">listen</span>(<span class=\"function\"><span class=\"params\">route</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">apps</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        app.<span class=\"property\">_route</span> = route</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">listen (<span class=\"attr\">cb</span>: <span class=\"title class_\">Function</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span> = cb</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>history.listen</code> 接收的函数参数，是被设置为完成更新路由后的回调函数 <code>cb</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">history.<span class=\"title function_\">listen</span>(<span class=\"function\"><span class=\"params\">route</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">apps</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">app</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        app.<span class=\"property\">_route</span> = route</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">listen (<span class=\"attr\">cb</span>: <span class=\"title class_\">Function</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span> = cb</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>会在更新路由函数 <code>updateRoute</code> 执行 <code>this.cb</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">updateRoute (<span class=\"attr\">route</span>: <span class=\"title class_\">Route</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> prev = <span class=\"variable language_\">this</span>.<span class=\"property\">current</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">current</span> = route</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"title function_\">cb</span>(route)  <span class=\"comment\">// 被执行的回调函数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是执行 <code>transitionTo</code> 方法最后执行的 <code>updateRoute</code> 的时候执行回调 <code>cb</code>, 会将 <code>this.apps</code> 保存的组件实例 <code>app</code> 的 <code>_route</code> 设置为当前 <code>route</code>（<code>this.apps</code> 数组保存的实例的特点都是在初始化的时候有传入了 <code>router</code> 配置项的，一般的场景数组只会保存根 <code>Vue</code> 实例，数组长度为 1，因为我们只有在 <code>new Vue</code> 时传入了 <code>\brouter</code> 实例。</p>\n<p>② 由于修改 <code>app._route</code> 的时候，又触发了 <code>setter</code>，因此会通知 <code>&lt;router-view&gt;</code> 的渲染 watcher 更新，重新渲染组件。</p>\n<p>本文主要参考了 <a href=\"https://ustbhuangyi.github.io/vue-analysis/v2/vue-router/router.html#%E6%80%BB%E7%BB%93\">Vue.js 技术揭秘</a>，再加上自己的一点理解和注释。</p>\n<p>参考文章：\n<a href=\"https://ustbhuangyi.github.io/vue-analysis/v2/vue-router/router.html#%E6%80%BB%E7%BB%93\">Vue.js 技术揭秘</a></p>\n"},{"title":"JS：浅析 Vuex","url":"/2020/03/19/js-vuex/","content":"<p><a href=\"https://vuex.vuejs.org/zh/\">Vuex</a> 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/images/js-vuex/vuex.png\" alt=\"vuex\"></p>\n<p>先看看基本例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vuex</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cont store =  <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  modules</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(<span class=\"title class_\">Vuex</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  store</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>打开 <code>src/index.js</code>，<code>Vuex</code> 平时常用的 <code>API</code> 都包含在里面了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Store</span>,</span><br><span class=\"line\">  install,</span><br><span class=\"line\">  <span class=\"attr\">version</span>: <span class=\"string\">&#x27;__VERSION__&#x27;</span>,</span><br><span class=\"line\">  mapState,</span><br><span class=\"line\">  mapMutations,</span><br><span class=\"line\">  mapGetters,</span><br><span class=\"line\">  mapActions,</span><br><span class=\"line\">  createNamespacedHelpers</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>Vue.use(Vuex)</code> 初始化，其实是调用了 <code>Vuex</code> 的 <code>install</code> 方法，位于 <code>src/store.js</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">install</span> (_Vue) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Vue</span> = _Vue</span><br><span class=\"line\">  <span class=\"title function_\">applyMixin</span>(<span class=\"title class_\">Vue</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">applyMixin</span>(<span class=\"params\">Vue</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Vue</span>.<span class=\"title function_\">mixin</span>(&#123; <span class=\"attr\">beforeCreate</span>: vuexInit &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">vuexInit</span> () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> options = <span class=\"variable language_\">this</span>.<span class=\"property\">$options</span></span><br><span class=\"line\">    <span class=\"comment\">// store injection</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.<span class=\"property\">store</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span> = <span class=\"keyword\">typeof</span> options.<span class=\"property\">store</span> === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">        ? options.<span class=\"title function_\">store</span>()</span><br><span class=\"line\">        : options.<span class=\"property\">store</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (options.<span class=\"property\">parent</span> &amp;&amp; options.<span class=\"property\">parent</span>.<span class=\"property\">$store</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span> = options.<span class=\"property\">parent</span>.<span class=\"property\">$store</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>install</code> 方法是在全局 <code>beforeCreate</code> 钩子函数 <code>mixin</code> 了 <code>vuexInit</code> 方法，把根 <code>Vue</code> 实例的 <code>options.store</code> 保存在所有组件的 <code>this.$store</code> 中。<code>options.store</code> 就是我们在 <code>new Vue(&#123;store&#125;)</code> 时传入的 <code>store</code> 实例，因此，我们在所有的组件都可以通过 <code>this.$store</code> 访问到这个实例。</p>\n<h3 id=\"Store\"><a href=\"#Store\" class=\"headerlink\" title=\"Store\"></a>Store</h3><p>那么接下来我们分析上面 <code>store</code> 实例化的过程：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  actions,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  modules</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>Vuex</code> 的 <code>Store</code> 对象的构造函数接收一个对象参数 <code>options</code>，其包含 <code>state</code>、<code>getters</code>、<code>mutations</code>、<code>actions</code>、<code>modules</code> 等 Vuex 的核心概念。源代码 <code>src/store.js</code>：  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Store</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> (options = &#123;&#125;) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_modules</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">ModuleCollection</span>(options)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> store = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; dispatch, commit &#125; = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">dispatch</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">boundDispatch</span> (type, payload) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> dispatch.<span class=\"title function_\">call</span>(store, type, payload)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">commit</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">boundCommit</span> (type, payload, options) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> commit.<span class=\"title function_\">call</span>(store, type, payload, options)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"title function_\">installModule</span>(<span class=\"variable language_\">this</span>, state, [], <span class=\"variable language_\">this</span>.<span class=\"property\">_modules</span>.<span class=\"property\">root</span>)</span><br><span class=\"line\">    <span class=\"title function_\">resetStoreVM</span>(<span class=\"variable language_\">this</span>, state)</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Store 的实例化过程拆成3个部分，分别是<code>初始化模块</code>、<code>安装模块</code>和<code>初始化 store._vm</code>。</p>\n<h4 id=\"初始化模块\"><a href=\"#初始化模块\" class=\"headerlink\" title=\"初始化模块\"></a>初始化模块</h4><p><code>Store</code> 是单一状态树， <code>Vuex</code> 允许我们将 <code>store</code> 分割成模块 module，每个 <code>module</code> 拥有自己的 <code>state</code>、<code>getters</code>、<code>mutations</code>、<code>actions</code> 还有 <code>modules</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: moduleA,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.<span class=\"property\">state</span>.<span class=\"property\">a</span> <span class=\"comment\">// -&gt; moduleA 的状态</span></span><br><span class=\"line\">store.<span class=\"property\">state</span>.<span class=\"property\">b</span> <span class=\"comment\">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>\n\n<p><code>store</code> 本身可以理解为一个 <code>root module</code>，下面的 <code>_modules</code> 就是子模块，<code>Vuex</code> 需要完成这棵树的构建，构建过程的入口是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">_modules</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">ModuleCollection</span>(options)</span><br></pre></td></tr></table></figure>\n\n<p><code>ModuleCollection</code> 源代码 <code>src/module/module-collection.js</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ModuleCollection</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> (rawRootModule) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// register root module (Vuex.Store options)</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">register</span>([], rawRootModule, <span class=\"literal\">false</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  register (path, rawModule, runtime = <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newModule = <span class=\"keyword\">new</span> <span class=\"title class_\">Module</span>(rawModule, runtime)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (path.<span class=\"property\">length</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = newModule</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> parent = <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>(path.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>, -<span class=\"number\">1</span>))</span><br><span class=\"line\">      parent.<span class=\"title function_\">addChild</span>(path[path.<span class=\"property\">length</span> - <span class=\"number\">1</span>], newModule)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// register nested modules</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rawModule.<span class=\"property\">modules</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">forEachValue</span>(rawModule.<span class=\"property\">modules</span>, <span class=\"function\">(<span class=\"params\">rawChildModule, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">register</span>(path.<span class=\"title function_\">concat</span>(key), rawChildModule, runtime)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>ModuleCollection</code> 实例化的过程就是执行了 <code>register</code> 方法，接收3个参数：</p>\n<ul>\n<li>path：表示路径，因为整体目标是要构建一颗模块树</li>\n<li>rawModule：表示定义模块的原始配置</li>\n<li>runtime：表示是否是一个运行时创建的模块</li>\n</ul>\n<p><code>register</code> 方法首先通过 <code>const newModule = new Module(rawModule, runtime)</code> 创建了一个 root <code>Module</code> 实例, Module 是用来描述单个模块的类，源代码 <code>src/module/module.js</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Module</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span> (rawModule, runtime) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">runtime</span> = runtime</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_children</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_rawModule</span> = rawModule</span><br><span class=\"line\">    <span class=\"keyword\">const</span> rawState = rawModule.<span class=\"property\">state</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Store the origin module&#x27;s state</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = (<span class=\"keyword\">typeof</span> rawState === <span class=\"string\">&#x27;function&#x27;</span> ? <span class=\"title function_\">rawState</span>() : rawState) || &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从构造函数可以分析，每个 <code>Module</code> 模块包含三个属性 <code>_rawModule</code>、<code>_children</code>、<code>state</code>：</p>\n<ul>\n<li><code>_rawModule</code> 存储模块的配置，对象本身</li>\n<li><code>_children</code> 表示该模块的所有子模块，就是 <code>module</code> 定义的 <code>modules</code></li>\n<li><code>state</code> 表示模块定义的 <code>state</code></li>\n</ul>\n<p>最后递归构建成了完整的模块树：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">        aM,</span><br><span class=\"line\">        bM,</span><br><span class=\"line\">        cM,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">        dS,</span><br><span class=\"line\">        eS</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getters,</span><br><span class=\"line\">    <span class=\"attr\">mutations</span>: &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// this._modules = new ModuleCollection(options)</span></span><br><span class=\"line\"><span class=\"comment\">// 转化成不同的数据结构类型</span></span><br><span class=\"line\">_modules = &#123;</span><br><span class=\"line\">  <span class=\"attr\">root</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">_children</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">aM</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">_children</span>: &#123;&#125;</span><br><span class=\"line\">        <span class=\"attr\">_rawModule</span>: &#123;&#125;,</span><br><span class=\"line\">        state</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      bM,</span><br><span class=\"line\">      cM</span><br><span class=\"line\">    &#125;, <span class=\"comment\">// 相当于 modules</span></span><br><span class=\"line\">    <span class=\"attr\">_rawModule</span>: &#123;modules, state, getters, mutations&#125;, <span class=\"comment\">// 对象本身</span></span><br><span class=\"line\">    <span class=\"attr\">state</span>: &#123;dS, eS&#125; <span class=\"comment\">// state 照搬过来，不变</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装模块\"><a href=\"#安装模块\" class=\"headerlink\" title=\"安装模块\"></a>安装模块</h4><p>初始化模块后 <code>_modules</code>，执行安装模块的相关逻辑，它的目标就是对模块中的 <code>state</code>、<code>getters</code>、<code>mutations</code>、<code>actions</code> 做初始化工作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = <span class=\"variable language_\">this</span>.<span class=\"property\">_modules</span>.<span class=\"property\">root</span>.<span class=\"property\">state</span></span><br><span class=\"line\"><span class=\"title function_\">installModule</span>(<span class=\"variable language_\">this</span>, state, [], <span class=\"variable language_\">this</span>.<span class=\"property\">_modules</span>.<span class=\"property\">root</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">installModule</span> (store, rootState, path, <span class=\"variable language_\">module</span>, hot) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> isRoot = !path.<span class=\"property\">length</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> namespace = store.<span class=\"property\">_modules</span>.<span class=\"title function_\">getNamespace</span>(path)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// register in namespace map</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">module</span>.<span class=\"property\">namespaced</span>) &#123;</span><br><span class=\"line\">    store.<span class=\"property\">_modulesNamespaceMap</span>[namespace] = <span class=\"variable language_\">module</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> local = <span class=\"variable language_\">module</span>.<span class=\"property\">context</span> = <span class=\"title function_\">makeLocalContext</span>(store, namespace, path)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">module</span>.<span class=\"title function_\">forEachMutation</span>(<span class=\"function\">(<span class=\"params\">mutation, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> namespacedType = namespace + key</span><br><span class=\"line\">    <span class=\"title function_\">registerMutation</span>(store, namespacedType, mutation, local)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">module</span>.<span class=\"title function_\">forEachAction</span>(<span class=\"function\">(<span class=\"params\">action, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> type = action.<span class=\"property\">root</span> ? key : namespace + key</span><br><span class=\"line\">    <span class=\"keyword\">const</span> handler = action.<span class=\"property\">handler</span> || action</span><br><span class=\"line\">    <span class=\"title function_\">registerAction</span>(store, type, handler, local)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">module</span>.<span class=\"title function_\">forEachGetter</span>(<span class=\"function\">(<span class=\"params\">getter, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> namespacedType = namespace + key</span><br><span class=\"line\">    <span class=\"title function_\">registerGetter</span>(store, namespacedType, getter, local)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">module</span>.<span class=\"title function_\">forEachChild</span>(<span class=\"function\">(<span class=\"params\">child, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">installModule</span>(store, rootState, path.<span class=\"title function_\">concat</span>(key), child, hot)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>installModule</code> 方法接收了 5 个参数：</p>\n<ul>\n<li>store：root store</li>\n<li>state：root state</li>\n<li>path：模块的访问路径</li>\n<li>module：当前的模块</li>\n<li>hot：表示是否热更新</li>\n</ul>\n<p><code>installModule</code> 方法根据 <code>namespaced</code> 对所有的 <code>getter</code>、<code>action</code> 和 <code>mutation</code> 注册的路径进行调整命名。</p>\n<h5 id=\"registerMutation\"><a href=\"#registerMutation\" class=\"headerlink\" title=\"registerMutation\"></a>registerMutation</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"title function_\">forEachMutation</span>(<span class=\"function\">(<span class=\"params\">mutation, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> namespacedType = namespace + key</span><br><span class=\"line\">  <span class=\"title function_\">registerMutation</span>(store, namespacedType, mutation, local)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// handler 就是 mutation</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">registerMutation</span> (store, type, handler, local) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = store.<span class=\"property\">_mutations</span>[type] || (store.<span class=\"property\">_mutations</span>[type] = [])</span><br><span class=\"line\">  entry.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">wrappedMutationHandler</span> (payload) &#123;</span><br><span class=\"line\">    handler.<span class=\"title function_\">call</span>(store, local.<span class=\"property\">state</span>, payload)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先遍历模块中的 <code>mutations</code> 的定义，拿到每一个 <code>mutation</code> 和 <code>key</code>，并把 <code>key</code> 拼接 <code>namespace</code>，然后执行 <code>registerMutation</code> 方法，该方法实际上就是给 <code>root store</code> 上的 <code>_mutations[type]</code> 添加 <code>wrappedMutationHandler</code> 方法。注意： <code>_mutations[type]</code> 是个数组，同一 <code>type</code> 的 <code>_mutations</code> 可以对应多个方法。</p>\n<h5 id=\"registerAction\"><a href=\"#registerAction\" class=\"headerlink\" title=\"registerAction\"></a>registerAction</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"title function_\">forEachAction</span>(<span class=\"function\">(<span class=\"params\">action, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> type = action.<span class=\"property\">root</span> ? key : namespace + key</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handler = action.<span class=\"property\">handler</span> || action</span><br><span class=\"line\">  <span class=\"title function_\">registerAction</span>(store, type, handler, local)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">registerAction</span> (store, type, handler, local) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> entry = store.<span class=\"property\">_actions</span>[type] || (store.<span class=\"property\">_actions</span>[type] = [])</span><br><span class=\"line\">  entry.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> <span class=\"title function_\">wrappedActionHandler</span> (payload, cb) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = handler.<span class=\"title function_\">call</span>(store, &#123;</span><br><span class=\"line\">      <span class=\"attr\">dispatch</span>: local.<span class=\"property\">dispatch</span>,</span><br><span class=\"line\">      <span class=\"attr\">commit</span>: local.<span class=\"property\">commit</span>,</span><br><span class=\"line\">      <span class=\"attr\">getters</span>: local.<span class=\"property\">getters</span>,</span><br><span class=\"line\">      <span class=\"attr\">state</span>: local.<span class=\"property\">state</span>,</span><br><span class=\"line\">      <span class=\"attr\">rootGetters</span>: store.<span class=\"property\">getters</span>,</span><br><span class=\"line\">      <span class=\"attr\">rootState</span>: store.<span class=\"property\">state</span></span><br><span class=\"line\">    &#125;, payload, cb)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_\">isPromise</span>(res)) &#123;</span><br><span class=\"line\">      res = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (store.<span class=\"property\">_devtoolHook</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        store.<span class=\"property\">_devtoolHook</span>.<span class=\"title function_\">emit</span>(<span class=\"string\">&#x27;vuex:error&#x27;</span>, err)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原理跟 <code>registerMutation</code> 相似。</p>\n<p>总结：<code>installModule</code> 本质上就是完成了模块下的 <code>state</code>、<code>getters</code>、<code>actions</code>、<code>mutations</code> 的初始化工作，并且通过递归遍历的方法，就完成了所有子模块的安装工作（在 <code>store</code> 添加以上_前缀的属性和完整 <code>state</code>）。</p>\n<p>结果就是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">store</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">_actions</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">_mutations</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">_wrappedGetters</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">_modules</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化-store-vm\"><a href=\"#初始化-store-vm\" class=\"headerlink\" title=\"初始化 store._vm\"></a>初始化 store._vm</h4><p><code>Store</code> 实例化的最后一步，就是执行初始化 <code>store._vm</code> 的逻辑：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">resetStoreVM</span>(<span class=\"variable language_\">this</span>, state)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resetStoreVM</span> (store, state, hot) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> oldVm = store.<span class=\"property\">_vm</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// getters 开始</span></span><br><span class=\"line\">  <span class=\"comment\">// bind store public getters</span></span><br><span class=\"line\">  store.<span class=\"property\">getters</span> = &#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> wrappedGetters = store.<span class=\"property\">_wrappedGetters</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> computed = &#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">forEachValue</span>(wrappedGetters, <span class=\"function\">(<span class=\"params\">fn, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// use computed to leverage its lazy-caching mechanism</span></span><br><span class=\"line\">    computed[key] = <span class=\"function\">() =&gt;</span> <span class=\"title function_\">fn</span>(store)</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(store.<span class=\"property\">getters</span>, key, &#123;</span><br><span class=\"line\">      <span class=\"attr\">get</span>: <span class=\"function\">() =&gt;</span> store.<span class=\"property\">_vm</span>[key],</span><br><span class=\"line\">      <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span> <span class=\"comment\">// for local getters</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// use a Vue instance to store the state tree</span></span><br><span class=\"line\">  <span class=\"comment\">// suppress warnings just in case the user has added</span></span><br><span class=\"line\">  <span class=\"comment\">// some funky global mixins</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> silent = <span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">silent</span></span><br><span class=\"line\">  <span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">silent</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  store.<span class=\"property\">_vm</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">$$state</span>: state</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    computed</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"comment\">// getters 结束</span></span><br><span class=\"line\">  <span class=\"title class_\">Vue</span>.<span class=\"property\">config</span>.<span class=\"property\">silent</span> = silent</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// enable strict mode for new vm</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (store.<span class=\"property\">strict</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">enableStrictMode</span>(store)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (oldVm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hot) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// dispatch changes in all subscribed watchers</span></span><br><span class=\"line\">      <span class=\"comment\">// to force getter re-evaluation for hot reloading.</span></span><br><span class=\"line\">      store.<span class=\"title function_\">_withCommit</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        oldVm.<span class=\"property\">_data</span>.<span class=\"property\">$$state</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"title function_\">nextTick</span>(<span class=\"function\">() =&gt;</span> oldVm.$destroy())</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>① <code>resetStoreVM</code> 的作用实际上就是建立 getters 和 state 的联系，利用 Vue 中的 <code>computed</code> 计算属性来实现。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">store.<span class=\"property\">_vm</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">$$state</span>: state</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  computed</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>data</code> 选项里定义了 <code>$$state</code> 属性，访问 <code>store.state</code> 的时候，实际上会访问 <code>Store</code> 类上定义的 <code>state</code> 的 <code>get</code> 方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">get state () &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_vm</span>.<span class=\"property\">_data</span>.<span class=\"property\">$$state</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么 getters 和 state 是怎么建立依赖逻辑的呢：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">orEachValue</span>(wrappedGetters, <span class=\"function\">(<span class=\"params\">fn, key</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// use computed to leverage its lazy-caching mechanism</span></span><br><span class=\"line\">  computed[key] = <span class=\"function\">() =&gt;</span> <span class=\"title function_\">fn</span>(store)</span><br><span class=\"line\">  <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(store.<span class=\"property\">getters</span>, key, &#123;</span><br><span class=\"line\">    <span class=\"attr\">get</span>: <span class=\"function\">() =&gt;</span> store.<span class=\"property\">_vm</span>[key],</span><br><span class=\"line\">    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span> <span class=\"comment\">// for local getters</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>② 当我根据 <code>key</code> 访问 <code>store.getters</code> 的某一个 <code>getter</code> 的时候，实际上就是访问 <code>store._vm[key]</code>（也就是 <code>computed[key]</code>），执行 <code>computed[key]</code> 对应的函数时会执行 <code>rawGetter(local.state,...)</code> 方法，就会访问到 <code>store.state</code>（也就是 <code>store._vm._data.$$state</code>），从而建立了 <code>getter</code> 和 <code>state</code> 的依赖关系。当 <code>store.state</code> 发生变化的时候，下一次再访问 <code>store.getters</code> 的时候会重新计算。</p>\n<p>③ 严格模式的逻辑：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (store.<span class=\"property\">strict</span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">enableStrictMode</span>(store)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">enableStrictMode</span> (store) &#123;</span><br><span class=\"line\">  store.<span class=\"property\">_vm</span>.$watch(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123; <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_data</span>.<span class=\"property\">$$state</span> &#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">assert</span>(store.<span class=\"property\">_committing</span>, <span class=\"string\">`Do not mutate vuex store state outside mutation handlers.`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, &#123; <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>, <span class=\"attr\">sync</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>store._vm</code> 会添加一个 <code>wathcer</code> 来观测 <code>this._data.$$state</code> 的变化，也就是当 <code>store.state</code> 被修改的时候, <code>store._committing</code> 必须为 <code>true</code>，否则在开发阶段会报警告。</p>\n<p><code>store._committing</code> 默认为 false，只有执行 _withCommit 方法时才设置成 true：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">_withCommit (fn) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> committing = <span class=\"variable language_\">this</span>.<span class=\"property\">_committing</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_committing</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">_committing</span> = committing</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>_withCommit</code> 也是说明 <code>mutation</code> 为什么必须是同步函数的原因了</strong>。一旦 <code>mutation</code> 是异步函数时，会由 <code>this._committing = true</code> 立即执行到 <code>this._committing = committing</code>，而此时异步 <code>mutation</code> 才执行完成且想要修改数据 <code>state</code>，是会报错的，因为此时的 <code>_committing</code> 为 false。</p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>其余的 API 再做详细分析。</p>\n<p>参考文章：</p>\n<p><a href=\"https://ustbhuangyi.github.io/vue-analysis/v2/vuex/init.html#store-%E5%AE%9E%E4%BE%8B%E5%8C%96\">Vue.js 技术揭秘</a></p>\n"},{"title":"JS：潜伏的设计模式","url":"/2020/03/15/js-design-pattern/","content":"<p>设计模式就是一种经验总结，最终的目的是为了更好的代码重用性、可读性、可靠性、可维护性。<strong>设计模式的本质是<em>面向对象设计原则</em>的实际运用，是对类的封装性、继承性和多态性，以及类的关联关系和组合关系的总结应用。</strong></p>\n<span id=\"more\"></span>\n\n<!-- ![总纲](/images/js-design-pattern/all.png) -->\n\n<h3 id=\"设计模式原则\"><a href=\"#设计模式原则\" class=\"headerlink\" title=\"设计模式原则\"></a>设计模式原则</h3><p>设计模式万变不离其宗，其核心必然围绕六大原则展开的：</p>\n<ol>\n<li>开闭原则</li>\n<li>里氏替换原则</li>\n<li>依赖反转原则</li>\n<li>接口隔离原则</li>\n<li>最小知道原则</li>\n<li>合成复用原则</li>\n</ol>\n<p><img src=\"/images/js-design-pattern/principle.png\" alt=\"设计模式六大原则\"></p>\n<h4 id=\"开闭原则（Open-Close-Principle）\"><a href=\"#开闭原则（Open-Close-Principle）\" class=\"headerlink\" title=\"开闭原则（Open Close Principle）\"></a>开闭原则（Open Close Principle）</h4><p>开闭原则：对外扩展<strong>开放</strong>，对内修改<strong>关闭</strong>。设计上往往需要使用接口和抽象类，提供灵活的插件机制，实现热插拔效果。</p>\n<h4 id=\"里氏替换原则（Liskov-Substitution-Principle）\"><a href=\"#里氏替换原则（Liskov-Substitution-Principle）\" class=\"headerlink\" title=\"里氏替换原则（Liskov Substitution Principle）\"></a>里氏替换原则（Liskov Substitution Principle）</h4><blockquote>\n<p>里氏替换原则要求，任何基类（父类）可以发挥作用的地方，子类一定可以发挥作用。</p>\n</blockquote>\n<p>里氏替换原则是继承复用的基础，只有当派生类可以随时替换掉其基类，同时功能不被破坏，基类的方法仍然能被使用，这才是真正的继承，继承才能真正地实现复用。</p>\n<h4 id=\"依赖反转原则（Dependence-Inversion-Principle）\"><a href=\"#依赖反转原则（Dependence-Inversion-Principle）\" class=\"headerlink\" title=\"依赖反转原则（Dependence Inversion Principle）\"></a>依赖反转原则（Dependence Inversion Principle）</h4><p>该原则要求针对接口编程，依赖于抽象。</p>\n<h4 id=\"接口隔离原则（Interface-Segregation-Principle）\"><a href=\"#接口隔离原则（Interface-Segregation-Principle）\" class=\"headerlink\" title=\"接口隔离原则（Interface Segregation Principle）\"></a>接口隔离原则（Interface Segregation Principle）</h4><p>接口隔离的意思或者目的是减少耦合的出现。在大型软件架构中，使用多个相互隔离的接口，一定比使用单个大而全的接口要好。</p>\n<h4 id=\"最少知道原则，又称迪米特法则（Demeter-Principle）\"><a href=\"#最少知道原则，又称迪米特法则（Demeter-Principle）\" class=\"headerlink\" title=\"最少知道原则，又称迪米特法则（Demeter Principle）\"></a>最少知道原则，又称迪米特法则（Demeter Principle）</h4><p>最少知道顾名思义，是指：一个系统的功能模块应该最大限度地不知晓其他模块的出现，减少感知，模块应相对独立。</p>\n<h4 id=\"合成复用原则（Composite-Reuse-Principle）\"><a href=\"#合成复用原则（Composite-Reuse-Principle）\" class=\"headerlink\" title=\"合成复用原则（Composite Reuse Principle）\"></a>合成复用原则（Composite Reuse Principle）</h4><p>合成复用原则是指：尽量使用合成 &#x2F; 聚合的方式，而不是使用继承。</p>\n<h3 id=\"设计模式介绍\"><a href=\"#设计模式介绍\" class=\"headerlink\" title=\"设计模式介绍\"></a>设计模式介绍</h3><p>所有的设计模式可以归结为三大类：</p>\n<ul>\n<li>创建型</li>\n<li>结构型</li>\n<li>行为型</li>\n</ul>\n<p><img src=\"/images/js-design-pattern/pattern.png\" alt=\"设计模式\"></p>\n<h4 id=\"原型模式（prototype）\"><a href=\"#原型模式（prototype）\" class=\"headerlink\" title=\"原型模式（prototype）\"></a>原型模式（prototype）</h4><p>原型模式不仅是一种设计模式，它还是一种编程范式（programming paradigm），是 JavaScript 面向对象系统实现的根基。</p>\n<p>在原型模式下，当我们想要创建一个对象时，会先找到一个对象作为原型，然后通过<strong>克隆原型</strong>的方式来创建出一个与原型一样（共享一套数据&#x2F;方法）的对象。在 JavaScript 里，Object.create方法就是原型模式的天然实现——准确地说，只要我们还在借助Prototype来实现对象的创建和原型的继承，那么我们就是在应用原型模式。</p>\n<ul>\n<li><strong>原型</strong></li>\n</ul>\n<p>在 JavaScript 中，每个构造函数都拥有一个prototype属性，它指向构造函数的原型对象，这个原型对象中有一个 construtor 属性指回构造函数；每个实例都有一个__proto__属性，当我们使用构造函数去创建实例时，实例的__proto__属性就会指向构造函数的原型对象。</p>\n<p>具体来说，当我们这样使用构造函数创建一个对象时：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个Dog构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Dog</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Dog</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">eat</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;肉骨头真好吃&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Dog构造函数创建dog实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dog = <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>(<span class=\"string\">&#x27;旺财&#x27;</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/js-design-pattern/prototype.png\" alt=\"设计模式\"></p>\n<ul>\n<li><strong>原型链</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输出&quot;肉骨头真好吃&quot;</span></span><br><span class=\"line\">dog.<span class=\"title function_\">eat</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出&quot;[object Object]&quot;</span></span><br><span class=\"line\">dog.<span class=\"title function_\">toString</span>()</span><br></pre></td></tr></table></figure>\n\n<p>明明没有在 dog 实例里手动定义 eat 方法和 toString 方法，它们还是被成功地调用了。这是因为当我试图访问一个 JavaScript 实例的属性&#x2F;方法时，它首先搜索这个实例本身；当发现实例没有定义对应的属性&#x2F;方法时，它会转而去搜索实例的原型对象；如果原型对象中也搜索不到，它就去搜索原型对象的原型对象，这个搜索的轨迹，就叫做原型链。</p>\n<p><img src=\"/images/js-design-pattern/prototype2.png\" alt=\"设计模式\"></p>\n<p>彼此相连的prototype，就组成了一个原型链。 注： 几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例，除了Object.prototype（当然，如果我们手动用Object.create(null)创建一个没有任何原型的对象，那它也不是 Object 的实例）。</p>\n<p>重点：<strong>对象的深拷贝</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepClone</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果是 值类型 或 null，则直接return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span> || obj === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定义结果对象</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> copy = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 如果对象是数组，则定义结果数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj.<span class=\"property\">constructor</span> === <span class=\"title class_\">Array</span>) &#123;</span><br><span class=\"line\">        copy = []</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 遍历对象的key</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果key是对象的自有属性</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(obj.<span class=\"title function_\">hasOwnProperty</span>(key)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 递归调用深拷贝方法</span></span><br><span class=\"line\">            copy[key] = <span class=\"title function_\">deepClone</span>(obj[key])</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"单例模式（Singleton）\"><a href=\"#单例模式（Singleton）\" class=\"headerlink\" title=\"单例模式（Singleton）\"></a>单例模式（Singleton）</h4><p>通俗来说，保证一个类只能有一个实例，并提供一个访问它的全局访问点，每次只返回第一次创建的唯一的一个实例。应用场景：引用第三方库，全局唯一的对象或者状态管理，全局唯一的插件</p>\n<ul>\n<li>ES6 实现</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title class_\">Singleton</span>.<span class=\"property\">instance</span>) &#123;</span><br><span class=\"line\">      <span class=\"title class_\">Singleton</span>.<span class=\"property\">instance</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Singleton</span>.<span class=\"property\">instance</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者 static 方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">getInstance</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否已经new过1个实例</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"title class_\">SingleDog</span>.<span class=\"property\">instance</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 若这个唯一的实例不存在，那么先创建它</span></span><br><span class=\"line\">            <span class=\"title class_\">SingleDog</span>.<span class=\"property\">instance</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">SingleDog</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果这个唯一的实例已经存在，则直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">SingleDog</span>.<span class=\"property\">instance</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Singleton</span>.<span class=\"title function_\">getInstance</span>()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>闭包实现</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Singleton</span>.<span class=\"property\">getInstance</span> = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义自由变量instance，模拟私有变量</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> instance = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断自由变量是否为null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!instance) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果为null则new出唯一实例</span></span><br><span class=\"line\">            instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<p><strong>生产实践</strong>：Vuex 的 store || 实现全局 Modal</p>\n<h4 id=\"工厂模式（Factory）\"><a href=\"#工厂模式（Factory）\" class=\"headerlink\" title=\"工厂模式（Factory）\"></a>工厂模式（Factory）</h4><p>工厂模式就是隐藏了创建一个实例的复杂度，只需要提供一个简单的接口调用，直接完成创建实例的目的。</p>\n<p>创建型的工厂模式一共分为三种：</p>\n<ul>\n<li>简单工厂模式（Simple Factory）</li>\n<li>工厂方法模式（Factory Method）</li>\n<li>抽象工厂模式（Abstract Factory）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽象工厂不干活，具体工厂（ConcreteFactory）来干活！</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 抽象工厂：手机的基本组成</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MobilePhoneFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提供操作系统的接口</span></span><br><span class=\"line\">    <span class=\"title function_\">createOS</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;抽象工厂方法不允许直接调用，你需要将我重写！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 提供硬件的接口</span></span><br><span class=\"line\">    <span class=\"title function_\">createHardWare</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;抽象工厂方法不允许直接调用，你需要将我重写！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 具体工厂继承自抽象工厂</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FakeStarFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">MobilePhoneFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">createOS</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 提供安卓系统实例</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AndroidOS</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">createHardWare</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 提供高通硬件实例</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">QualcommHardWare</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义操作系统这类产品的抽象产品类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">OS</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">controlHardWare</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;抽象产品方法不允许直接调用，你需要将我重写！&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义具体操作系统的具体产品类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AndroidOS</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">OS</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">controlHardWare</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我会用安卓的方式去操作硬件&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AppleOS</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">OS</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">controlHardWare</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我会用🍎的方式去操作硬件&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义手机硬件这类产品的抽象产品类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">HardWare</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 手机硬件的共性方法，这里提取了“根据命令运转”这个共性</span></span><br><span class=\"line\">    <span class=\"title function_\">operateByOrder</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;抽象产品方法不允许直接调用，你需要将我重写！&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义具体硬件的具体产品类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">QualcommHardWare</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HardWare</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">operateByOrder</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我会用高通的方式去运转&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MiWare</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HardWare</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">operateByOrder</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我会用小米的方式去运转&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这是我的手机</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myPhone = <span class=\"keyword\">new</span> <span class=\"title class_\">FakeStarFactory</span>()</span><br><span class=\"line\"><span class=\"comment\">// 让它拥有操作系统</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myOS = myPhone.<span class=\"title function_\">createOS</span>()</span><br><span class=\"line\"><span class=\"comment\">// 让它拥有硬件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myHardWare = myPhone.<span class=\"title function_\">createHardWare</span>()</span><br><span class=\"line\"><span class=\"comment\">// 启动操作系统(输出‘我会用安卓的方式去操作硬件’)</span></span><br><span class=\"line\">myOS.<span class=\"title function_\">controlHardWare</span>()</span><br><span class=\"line\"><span class=\"comment\">// 唤醒硬件(输出‘我会用高通的方式去运转’)</span></span><br><span class=\"line\">myHardWare.<span class=\"title function_\">operateByOrder</span>()</span><br></pre></td></tr></table></figure>\n\n<p>使用抽象类去降低扩展的成本，同时需要对类的性质作划分，于是有了这样的四个关键角色：</p>\n<ol>\n<li>抽象工厂（抽象类，它不能被用于生成具体实例）： 用于声明最终目标产品的共性。在一个系统里，抽象工厂可以有多个（大家可以想象我们的手机厂后来被一个更大的厂收购了，这个厂里除了手机抽象类，还有平板、游戏机抽象类等等），每一个抽象工厂对应的这一类的产品，被称为“产品族”。</li>\n<li>具体工厂（用于生成产品族里的一个具体的产品）： 继承自抽象工厂、实现了抽象工厂里声明的那些方法，用于创建具体的产品的类。</li>\n<li>抽象产品（抽象类，它不能被用于生成具体实例）： 上面我们看到，具体工厂里实现的接口，会依赖一些类，这些类对应到各种各样的具体的细粒度产品（比如操作系统、硬件等），这些具体产品类的共性各自抽离，便对应到了各自的抽象产品类。</li>\n<li>具体产品（用于生成产品族里的一个具体的产品所依赖的更细粒度的产品）： 比如我们上文中具体的一种操作系统、或具体的一种硬件等。</li>\n</ol>\n<h4 id=\"建造者模式（builder）\"><a href=\"#建造者模式（builder）\" class=\"headerlink\" title=\"建造者模式（builder）\"></a>建造者模式（builder）</h4><p>建造者的精髓在于“分步骤分情况构建一个复杂的对象”。与函数式编程一般，每次调用方法返回的都是对象本身，可以继续调用自身方法，形成调用链。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 建造者</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Pizza</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">size</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">size</span> = size</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">addMushroom</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">mushroom</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">addOliver</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">oliver</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">addPoulet</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">poulet</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">addChesse</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">chesse</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">addTomato</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">tomato</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">addLettuce</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">lettuce</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">build</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Pizza</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Pizza</span>(<span class=\"number\">32</span>)</span><br><span class=\"line\">    .<span class=\"title function_\">addOliver</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">addTomato</span>()</span><br><span class=\"line\">    .<span class=\"title function_\">build</span>()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"外观模式（Facade）\"><a href=\"#外观模式（Facade）\" class=\"headerlink\" title=\"外观模式（Facade）\"></a>外观模式（Facade）</h4><p>外观模式的精髓在于对接口进行二次封装，隐藏其内部的复杂度。这种设计在前端开发中也非常常见，比如跨浏览器兼容性的封装，比如事件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// polyfill</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> addMyEventFacade = <span class=\"keyword\">function</span>(<span class=\"params\">el, ev, fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (el.<span class=\"property\">addEventListener</span>) &#123;<span class=\"comment\">//存在 DOM2 级方法，则使用并传入事件类型、事件处理程序函数和第3个参数 false（表示冒泡阶段）</span></span><br><span class=\"line\">    el.<span class=\"title function_\">addEventListener</span>(ev, fn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(el.<span class=\"property\">attachEvent</span>) &#123; <span class=\"comment\">// 为兼容 IE8 及更早浏览器，注意事件类型必须加上&quot;on&quot;前缀</span></span><br><span class=\"line\">    el.<span class=\"title function_\">attachEvent</span>(<span class=\"string\">&quot;on&quot;</span> + ev, fn);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    el[<span class=\"string\">&quot;on&quot;</span> + ev] = fn;<span class=\"comment\">//其他方法都无效，默认采用 DOM0 级方法，使用方括号语法将属性名指定为事件处理程序</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"适配器模式（adapter）\"><a href=\"#适配器模式（adapter）\" class=\"headerlink\" title=\"适配器模式（adapter）\"></a>适配器模式（adapter）</h4><p>适配器模式在于适配两个及以上类接口不兼容的问题，适用于迁移代码和兼容代码。</p>\n<blockquote>\n<p>适配器：电器转接头</p>\n</blockquote>\n<h4 id=\"代理模式（proxy）\"><a href=\"#代理模式（proxy）\" class=\"headerlink\" title=\"代理模式（proxy）\"></a>代理模式（proxy）</h4><p>代理模式往往是一个对象不能直接访问另一个对象，需要一个第三者（代理）牵线搭桥从而间接达到访问目的。科学上网（代理劫持）是代理模式的典型案例。</p>\n<p><img src=\"/images/js-design-pattern/proxy.png\" alt=\"代理模式\"></p>\n<p>前置知识：<strong>ES6 中的 Proxy</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 代理劫持 GET 和 SET</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj, handler)</span><br></pre></td></tr></table></figure>\n\n<p>开发中最常见的四种代理类型：事件代理、虚拟代理、缓存代理和保护代理来进行讲解。</p>\n<ul>\n<li><p>事件代理\n利用元素事件冒泡的特性，不需要在每个子元素都绑定相同的事件，直接在父元素上绑定，这就是事件代理了。</p>\n</li>\n<li><p>虚拟代理\n  图片预加载：先让这个 img 标签展示一个占位图，然后创建一个 Image 实例，让这个 Image 实例的 src 指向真实的目标图片地址、观察该 Image 实例的加载情况 —— 当其对应的真实图片加载完毕后，即已经有了该图片的缓存内容，再将 DOM 上的 img 元素的 src 指向真实的目标图片地址。此时我们直接去取了目标图片的缓存。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 骨架屏示例</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PreLoadImage</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">imgNode</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取真实的DOM节点</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">imgNode</span> = imgNode</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 操作img节点的src属性</span></span><br><span class=\"line\">    <span class=\"title function_\">setSrc</span>(<span class=\"params\">imgUrl</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">imgNode</span>.<span class=\"property\">src</span> = imgUrl</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProxyImage</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 占位图的url地址</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"variable constant_\">LOADING_URL</span> = <span class=\"string\">&#x27;xxxxxx&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">targetImage</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 目标Image，即PreLoadImage实例</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">targetImage</span> = targetImage</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 该方法主要操作虚拟Image，完成加载</span></span><br><span class=\"line\">    <span class=\"title function_\">setSrc</span>(<span class=\"params\">targetUrl</span>) &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 真实img节点初始化时展示的是一个占位图</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">targetImage</span>.<span class=\"title function_\">setSrc</span>(<span class=\"title class_\">ProxyImage</span>.<span class=\"property\">LOADING_URL</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 创建一个帮我们加载图片的虚拟Image实例</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> virtualImage = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>()</span><br><span class=\"line\">        <span class=\"comment\">// 监听目标图片加载的情况，完成时再将DOM上的真实img节点的src属性设置为目标图片的url</span></span><br><span class=\"line\">        virtualImage.<span class=\"property\">onload</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">targetImage</span>.<span class=\"title function_\">setSrc</span>(targetUrl)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 设置src属性，虚拟Image实例开始加载图片</span></span><br><span class=\"line\">        virtualImage.<span class=\"property\">src</span> = targetUrl</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ProxyImage 帮我们调度了预加载相关的工作，我们可以通过 ProxyImage 这个代理，实现对真实 img 节点的间接访问，并得到我们想要的效果。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>虚拟代理\n用空间换时间</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// addAll方法会对你传入的所有参数做求和操作</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> addAll = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;进行了一次新计算&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> len = <span class=\"variable language_\">arguments</span>.<span class=\"property\">length</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        result += <span class=\"variable language_\">arguments</span>[i]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为求和方法创建代理</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> proxyAddAll = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 求和结果的缓存池</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> resultCache = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 将入参转化为一个唯一的入参字符串</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> args = <span class=\"title class_\">Array</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">join</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">arguments</span>, <span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 检查本次入参是否有对应的计算结果</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(args <span class=\"keyword\">in</span> resultCache) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果有，则返回缓存池里现成的结果</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> resultCache[args]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> resultCache[args] = <span class=\"title function_\">addAll</span>(...<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"装饰器模式（decorator）\"><a href=\"#装饰器模式（decorator）\" class=\"headerlink\" title=\"装饰器模式（decorator）\"></a>装饰器模式（decorator）</h4><p>在不改变原对象的基础上，对其对象进行包装和拓展，使原对象能够应对更加复杂的需求。</p>\n<ol>\n<li>extends：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">App</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>AOP 面向切面编程：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">before</span> = <span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    fn.<span class=\"title function_\">apply</span>(<span class=\"title function_\">new</span>(self), <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> self.<span class=\"title function_\">apply</span>(<span class=\"title function_\">new</span>(self), <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">after</span> = <span class=\"keyword\">function</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> self = <span class=\"variable language_\">this</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    self.<span class=\"title function_\">apply</span>(<span class=\"title function_\">new</span>(self), <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"title function_\">new</span>(self), <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>ES7 中的装饰器</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 装饰器函数，它的第一个参数是目标类</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">classDecorator</span>(<span class=\"params\">target</span>) &#123;</span><br><span class=\"line\">    target.<span class=\"property\">hasDecorator</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> target</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将装饰器“安装”到Button类上</span></span><br><span class=\"line\">@classDecorator</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Button</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Button类的相关逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 验证装饰器是否生效</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Button 是否被装饰了：&#x27;</span>, <span class=\"title class_\">Button</span>.<span class=\"property\">hasDecorator</span>)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">funcDecorator</span>(<span class=\"params\">target, name, descriptor</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> originalMethod = descriptor.<span class=\"property\">value</span></span><br><span class=\"line\">    descriptor.<span class=\"property\">value</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是Func的装饰器逻辑&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> originalMethod.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> descriptor</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Button</span> &#123;</span><br><span class=\"line\">    @funcDecorator</span><br><span class=\"line\">    <span class=\"title function_\">onClick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;我是Func的原有逻辑&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 验证装饰器是否生效</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"keyword\">new</span> <span class=\"title class_\">Button</span>()</span><br><span class=\"line\">button.<span class=\"title function_\">onClick</span>()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"策略模式（）\"><a href=\"#策略模式（）\" class=\"headerlink\" title=\"策略模式（）\"></a>策略模式（）</h4><p>策略模式就是通过构建对象映射表来消除 if-else，与状态模式相似。</p>\n<blockquote>\n<p>定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个询价处理器对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> priceProcessor = &#123;</span><br><span class=\"line\">  <span class=\"title function_\">pre</span>(<span class=\"params\">originPrice</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (originPrice &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> originPrice - <span class=\"number\">20</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> originPrice * <span class=\"number\">0.9</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">onSale</span>(<span class=\"params\">originPrice</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (originPrice &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> originPrice - <span class=\"number\">30</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> originPrice * <span class=\"number\">0.8</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">back</span>(<span class=\"params\">originPrice</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (originPrice &gt;= <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> originPrice - <span class=\"number\">50</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> originPrice;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">fresh</span>(<span class=\"params\">originPrice</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> originPrice * <span class=\"number\">0.5</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 询价函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">askPrice</span>(<span class=\"params\">tag, originPrice</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> priceProcessor[tag](originPrice)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"观察者模式（Objecter）\"><a href=\"#观察者模式（Objecter）\" class=\"headerlink\" title=\"观察者模式（Objecter）\"></a>观察者模式（Objecter）</h4><p>观察者模式基于发布-订阅,目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。</p>\n<ul>\n<li>抽象发布-订阅</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义发布者类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Publisher</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">observers</span> = []</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Publisher created&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 增加订阅者</span></span><br><span class=\"line\">  <span class=\"title function_\">add</span>(<span class=\"params\">observer</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Publisher.add invoked&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">observers</span>.<span class=\"title function_\">push</span>(observer)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 移除订阅者</span></span><br><span class=\"line\">  <span class=\"title function_\">remove</span>(<span class=\"params\">observer</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Publisher.remove invoked&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">observers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (item === observer) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">observers</span>.<span class=\"title function_\">splice</span>(i, <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 通知所有订阅者</span></span><br><span class=\"line\">  <span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Publisher.notify invoked&#x27;</span>)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">observers</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">observer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      observer.<span class=\"title function_\">update</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义订阅者类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Observer</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Observer created&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Observer.update invoked&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>具体发布-订阅</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个具体的需求文档（prd）发布类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">PrdPublisher</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Publisher</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">        <span class=\"comment\">// 初始化需求文档</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">prdState</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">        <span class=\"comment\">// 韩梅梅还没有拉群，开发群目前为空</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">observers</span> = []</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;PrdPublisher created&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 该方法用于获取当前的prdState</span></span><br><span class=\"line\">    <span class=\"title function_\">getState</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;PrdPublisher.getState invoked&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">prdState</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 该方法用于改变prdState的值</span></span><br><span class=\"line\">    <span class=\"title function_\">setState</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;PrdPublisher.setState invoked&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\">// prd的值发生改变</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">prdState</span> = state</span><br><span class=\"line\">        <span class=\"comment\">// 需求文档变更，立刻通知所有开发者</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">notify</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义订阅者类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DeveloperObserver</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Observer</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>()</span><br><span class=\"line\">        <span class=\"comment\">// 需求文档一开始还不存在，prd初始为空对象</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">prdState</span> = &#123;&#125;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;DeveloperObserver created&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重写一个具体的update方法</span></span><br><span class=\"line\">    <span class=\"title function_\">update</span>(<span class=\"params\">publisher</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;DeveloperObserver.update invoked&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 更新需求文档</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">prdState</span> = publisher.<span class=\"title function_\">getState</span>()</span><br><span class=\"line\">        <span class=\"comment\">// 调用工作函数</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">work</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// work方法，一个专门搬砖的方法</span></span><br><span class=\"line\">    <span class=\"title function_\">work</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取需求文档</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> prd = <span class=\"variable language_\">this</span>.<span class=\"property\">prdState</span></span><br><span class=\"line\">        <span class=\"comment\">// 开始基于需求文档提供的信息搬砖。。。</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;996 begins...&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参考文章：</p>\n<p><a href=\"https://gitbook.cn/gitchat/column/5c91c813968b1d64b1e08fde/topic/5cbbf556bbbba80861a35c6e\">揭秘前端设计模式（上）</a></p>\n<p><a href=\"https://gitbook.cn/gitchat/column/5c91c813968b1d64b1e08fde/topic/5cbbf575bbbba80861a35c6f\">揭秘前端设计模式（下）</a></p>\n<p><a href=\"https://juejin.im/book/5c70fc83518825428d7f9dfb/section/5c8bb9a3f265da2d8410cb7e\">JavaScript 设计模式核⼼原理与应⽤实践</a></p>\n","tags":["JS"]},{"title":"WEB：不起眼的 Webpack","url":"/2020/03/08/web-webpack/","content":"<p>Webpack 是一个打包模块化 Javascript 的工具，在 webpack 里<strong>一切皆模块</strong>，通过 <strong><code>Loader</code></strong> 转换文件，通过 <strong><code>Plugin</code></strong> 注入钩子，最后输出由多个模块组合成的文件。webpack 专注于构建模块化项目。</p>\n<span id=\"more\"></span>\n\n<p><strong><font color=\"red\">以 webpack 5.x 为本文讲解版本。(篇幅太大，后续会再分篇详细论述)。</font></strong></p>\n<p><img src=\"/images/web-webpack/webpack-slogan.png\" alt=\"2021-road-map\"></p>\n<p><strong><font color=\"red\">提前划重点：核心模块为 Loader 和 Plugin 两种开放接口。</font></strong></p>\n<h2 id=\"入门篇\"><a href=\"#入门篇\" class=\"headerlink\" title=\"入门篇\"></a>入门篇</h2><p>老样子，先动手搭建基础款的 Webpack 项目：</p>\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><ol>\n<li>初始化项目：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir webpack-demo</span><br><span class=\"line\">cd webpack-demo</span><br><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>安装相关依赖：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">webpack 4.0 后需要同时安装 webpack-cli</span></span><br><span class=\"line\">npm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure>\n\n<p>依赖说明：</p>\n<ul>\n<li><p>webpack: 属于<a href=\"https://webpack.docschina.org/\">核心编译工具</a>。</p>\n</li>\n<li><p>webpack-cli: 由 webpack 抽取出来独立的 <strong>.bin 命令库</strong>，<a href=\"https://webpack.docschina.org/api/cli/\">提供控制台命令</a>，接收参数，执行构建工作（npx webpack）。</p>\n</li>\n</ul>\n<h3 id=\"配置选项\"><a href=\"#配置选项\" class=\"headerlink\" title=\"配置选项\"></a>配置选项</h3><ol start=\"3\">\n<li>生成 <code>webpack</code> 的配置文件 <code>webpack.config.js</code>：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch webpack.config.js</span><br></pre></td></tr></table></figure>\n\n<details>\n    <summary>配置文件内容（必须仔细浏览一遍）</summary>\n\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TODO：在这里放上一个完整的 webpack 完整配置文件</span></span><br><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@type</span> &#123;<span class=\"type\">import(&#x27;webpack&#x27;.Configuration)</span>&#125; */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">HtmlWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">ConsoleLogOnBuildWebpackPlugin</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./plugin/ConsoleLogOnBuildWebpackPlugin&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/index.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;bundle.js&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// Webpack 5 之后引入了 Asset Module 模型，自此我们只需要设置适当的 module.rules.type 配置即可，不需要为多媒体资源专门引入 Loader</span></span><br><span class=\"line\">    <span class=\"attr\">module</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [&#123;</span><br><span class=\"line\">            <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            <span class=\"attr\">use</span>: [<span class=\"string\">&quot;babel-loader&quot;</span>],</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.less$/i</span>,</span><br><span class=\"line\">            <span class=\"attr\">include</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">and</span>: [path.<span class=\"title function_\">join</span>(__dirname, <span class=\"string\">&#x27;./src/&#x27;</span>)]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"attr\">use</span>: [</span><br><span class=\"line\">                <span class=\"string\">&quot;style-loader&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;css-loader&quot;</span>,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>: <span class=\"string\">&quot;less-loader&quot;</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.(png|jpg)$/</span>,</span><br><span class=\"line\">            <span class=\"attr\">use</span>: [</span><br><span class=\"line\">                <span class=\"string\">&#x27;file-loader&#x27;</span>,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">limit</span>: <span class=\"number\">1024</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">loader</span>: <span class=\"string\">&#x27;image-webpack-loader&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">options</span>: &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// jpeg 压缩配置</span></span><br><span class=\"line\">                    <span class=\"attr\">mozjpeg</span>: &#123;</span><br><span class=\"line\">                        <span class=\"attr\">quality</span>: <span class=\"number\">80</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;, &#123;</span><br><span class=\"line\">            <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.svg$/i</span>,</span><br><span class=\"line\">            <span class=\"attr\">use</span>: [<span class=\"string\">&#x27;raw-loader&#x27;</span>],</span><br><span class=\"line\">        &#125;],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ConsoleLogOnBuildWebpackPlugin</span>(),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">HtmlWebpackPlugin</span>(&#123; <span class=\"attr\">template</span>: <span class=\"string\">&#x27;./src/index.html&#x27;</span> &#125;),</span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n</details>\n\n<blockquote>\n<p>小技巧：在 vscode 中 <code>webpack.config.js</code> 文件开头添加注释 <code>/**@type &#123;import(&#39;webpack&#39;.Configuration)&#125; */</code>，会被标记为 webpack 配置文件，在输入时会有对应的提示选择项。</p>\n</blockquote>\n<h3 id=\"编写代码\"><a href=\"#编写代码\" class=\"headerlink\" title=\"编写代码\"></a>编写代码</h3><ol start=\"4\">\n<li>本处使用一个 import 引用的简单例子：</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch src/index.js</span><br><span class=\"line\">touch src/util.js</span><br></pre></td></tr></table></figure>\n\n<details>\n    <summary>src 文件内容</summary>\n\n<pre><code><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** ------ src/index.js start ------ */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> util <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./util&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">util.<span class=\"title function_\">match</span>();</span><br><span class=\"line\"><span class=\"comment\">/** ------ src/index.js end ------ */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** ------ src/util.js start ------ */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">match</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;match&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/** ------ src/util.js end ------ */</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n</details>\n\n<h3 id=\"构建运行\"><a href=\"#构建运行\" class=\"headerlink\" title=\"构建运行\"></a>构建运行</h3><p>将源代码文件编译构建生成最终产物 <code>dist/bundle.js</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npx webpack</span><br></pre></td></tr></table></figure>\n\n<p>webpack 自己实现了一套 <code>import</code>, 详细分析 <code>__webpack_require__</code>(TODO)</p>\n<details>\n  <summary>生成的 bundle.js 内容</summary>\n\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> (<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// webpackBootstrap</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  <span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>  <span class=\"keyword\">var</span> __webpack_modules__ = (&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"string\">&quot;./src/index.js&quot;</span>:</span><br><span class=\"line\"><span class=\"comment\">/*!**********************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">!*** ./src/index.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">\\**********************/</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\">(<span class=\"params\">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">&quot;__webpack_require__.r(__webpack_exports__);\\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \\&quot;./src/util.js\\&quot;);\\n\\r\\n\\r\\n_util__WEBPACK_IMPORTED_MODULE_0__[\\&quot;default\\&quot;].match();\\r\\n\\n\\n//# sourceURL=webpack://webpack-demo/./src/index.js?&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"string\">&quot;./src/util.js&quot;</span>:</span><br><span class=\"line\"><span class=\"comment\">/*!*********************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">!*** ./src/util.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">\\*********************/</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\">(<span class=\"params\">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">eval</span>(<span class=\"string\">&quot;__webpack_require__.r(__webpack_exports__);\\n/* harmony export */ __webpack_require__.d(__webpack_exports__, &#123;\\n/* harmony export */   \\&quot;default\\&quot;: () =&gt; (__WEBPACK_DEFAULT_EXPORT__)\\n/* harmony export */ &#125;);\\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (&#123;\\r\\n    match: () =&gt; &#123;\\r\\n        // console.log(&#x27;match&#x27;)\\r\\n        return &#x27;match&#x27;\\r\\n    &#125;\\r\\n&#125;);\\n\\n//# sourceURL=webpack://webpack-demo/./src/util.js?&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  &#125;);</span><br><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  <span class=\"comment\">// The module cache</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  <span class=\"keyword\">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  <span class=\"comment\">// The require function</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  <span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>   <span class=\"comment\">// Check if module is in cache</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>   <span class=\"keyword\">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class=\"line\"><span class=\"comment\">/******/</span>   <span class=\"keyword\">if</span> (cachedModule !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>    <span class=\"keyword\">return</span> cachedModule.<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>   &#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>   <span class=\"comment\">// Create a new module (and put it into the cache)</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>   <span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = __webpack_module_cache__[moduleId] = &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>    <span class=\"comment\">// no module.id needed</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>    <span class=\"comment\">// no module.loaded needed</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>    <span class=\"attr\">exports</span>: &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>   &#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>   <span class=\"comment\">// Execute the module function</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>   __webpack_modules__[moduleId](<span class=\"variable language_\">module</span>, <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, __webpack_require__);</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>   <span class=\"comment\">// Return the exports of the module</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>   <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>  &#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  <span class=\"comment\">/* webpack/runtime/define property getters */</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  (<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>   <span class=\"comment\">// define getter functions for harmony exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>   __webpack_require__.<span class=\"property\">d</span> = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">exports</span>, definition</span>) =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> definition) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>     <span class=\"keyword\">if</span>(__webpack_require__.<span class=\"title function_\">o</span>(definition, key) &amp;&amp; !__webpack_require__.<span class=\"title function_\">o</span>(<span class=\"built_in\">exports</span>, key)) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>      <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, key, &#123; <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">get</span>: definition[key] &#125;);</span><br><span class=\"line\"><span class=\"comment\">/******/</span>     &#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>    &#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>   &#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>  &#125;)();</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  <span class=\"comment\">/* webpack/runtime/hasOwnProperty shorthand */</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  (<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>   __webpack_require__.<span class=\"property\">o</span> = <span class=\"function\">(<span class=\"params\">obj, prop</span>) =&gt;</span> (<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(obj, prop))</span><br><span class=\"line\"><span class=\"comment\">/******/</span>  &#125;)();</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  <span class=\"comment\">/* webpack/runtime/make namespace object */</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  (<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>   <span class=\"comment\">// define __esModule on exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>   __webpack_require__.<span class=\"property\">r</span> = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">exports</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title class_\">Symbol</span>.<span class=\"property\">toStringTag</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>     <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, <span class=\"title class_\">Symbol</span>.<span class=\"property\">toStringTag</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">&#x27;Module&#x27;</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">/******/</span>    &#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>    <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, <span class=\"string\">&#x27;__esModule&#x27;</span>, &#123; <span class=\"attr\">value</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">/******/</span>   &#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span>  &#125;)();</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  <span class=\"comment\">// startup</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  <span class=\"comment\">// Load entry module and return exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  <span class=\"comment\">// This entry module can&#x27;t be inlined because the eval devtool is used.</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span>  <span class=\"keyword\">var</span> __webpack_exports__ = <span class=\"title function_\">__webpack_require__</span>(<span class=\"string\">&quot;./src/index.js&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">/******/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> &#125;)()</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n</details>\n\n<p>基础项目的搭建和内容到此先告一段落，接下来就要开始涉及难懂的核心原理了。</p>\n<h2 id=\"原理篇\"><a href=\"#原理篇\" class=\"headerlink\" title=\"原理篇\"></a>原理篇</h2><p>了解核心原理，首选边调试边查看的方式：</p>\n<ol>\n<li>在 <code>vscode</code> 编辑器中单独打开项目</li>\n<li>新建 terminal，<strong>再新建 <code>JavaScript debug terminal</code></strong></li>\n<li>在** <code>node_modules/webpack/lib/</code>** 目录的 <strong><code>webpack.js</code></strong> 和 <strong><code>WebpackOptionsApply.js</code></strong> 调试位置打上断点</li>\n<li>终端运行 <code>npx webpack</code></li>\n</ol>\n<h3 id=\"核心流程图\"><a href=\"#核心流程图\" class=\"headerlink\" title=\"核心流程图\"></a>核心流程图</h3><p><img src=\"/images/web-webpack/webpack-core.png\" alt=\"核心流程图\"></p>\n<h3 id=\"架构\"><a href=\"#架构\" class=\"headerlink\" title=\"架构\"></a>架构</h3><table>\n<thead>\n<tr>\n<th align=\"left\">技术名词</th>\n<th align=\"left\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Entry</td>\n<td align=\"left\">编译入口，webpack 编译的起点</td>\n</tr>\n<tr>\n<td align=\"left\">Compiler</td>\n<td align=\"left\">编译管理器，webpack 启动后会创建 compiler 对象，<strong>该对象一直存活直到结束退出</strong></td>\n</tr>\n<tr>\n<td align=\"left\">Compilation</td>\n<td align=\"left\">单次编辑过程的管理器，比如 watch &#x3D; true 时，运行过程中只有一个 compiler，<strong>但每次文件变更触发重新编译时，都会创建一个新的 compilation 对象</strong></td>\n</tr>\n<tr>\n<td align=\"left\">Dependence</td>\n<td align=\"left\">依赖对象，webpack 基于该类型记录模块间依赖关系</td>\n</tr>\n<tr>\n<td align=\"left\">Module</td>\n<td align=\"left\">webpack 内部所有资源都会以 module对象形式存在，所有关于资源的操作、转译、合并都是以 module为基本单位进行的</td>\n</tr>\n<tr>\n<td align=\"left\">Chunk</td>\n<td align=\"left\">编译完成准备输出时，webpack 会将module按特定的规则组织成一个一个的 chunk，<strong>这些 chunk 某种程度上跟最终输出一一对应</strong></td>\n</tr>\n<tr>\n<td align=\"left\">Loader</td>\n<td align=\"left\">资源内容转换器，其实就是实现从内容 A 转换 B 的转换器</td>\n</tr>\n<tr>\n<td align=\"left\">Plugin</td>\n<td align=\"left\">webpack构建过程中，会在特定的时机广播对应的事件，插件监听这些事件，在特定时间点介入编译过程</td>\n</tr>\n</tbody></table>\n<h2 id=\"核心篇\"><a href=\"#核心篇\" class=\"headerlink\" title=\"核心篇\"></a>核心篇</h2><h3 id=\"loader\"><a href=\"#loader\" class=\"headerlink\" title=\"loader\"></a>loader</h3><p>介绍：</p>\n<p>运行顺序：从右到左</p>\n<h4 id=\"核心原理\"><a href=\"#核心原理\" class=\"headerlink\" title=\"核心原理\"></a>核心原理</h4><h4 id=\"常用-loader\"><a href=\"#常用-loader\" class=\"headerlink\" title=\"常用 loader\"></a>常用 loader</h4><table>\n<thead>\n<tr>\n<th align=\"left\">loader</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">vue-loader</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">style-loader</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">css-loader</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">scss-loader</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">postcss-loader</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">url-loader</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">babel-loader</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">posthtml-loader</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">ts-loader</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h4 id=\"编写-loader\"><a href=\"#编写-loader\" class=\"headerlink\" title=\"编写 loader\"></a>编写 loader</h4><h3 id=\"plugin\"><a href=\"#plugin\" class=\"headerlink\" title=\"plugin\"></a>plugin</h3><p>介绍：</p>\n<h4 id=\"核心原理-1\"><a href=\"#核心原理-1\" class=\"headerlink\" title=\"核心原理\"></a>核心原理</h4><p>关键：tap &amp;&amp; call</p>\n<h4 id=\"tapable\"><a href=\"#tapable\" class=\"headerlink\" title=\"tapable\"></a>tapable</h4><p>地址：<a href=\"https://github.com/webpack/tapable/\">tapable</a>，dd</p>\n<h4 id=\"hook\"><a href=\"#hook\" class=\"headerlink\" title=\"hook\"></a>hook</h4><h3 id=\"常用-plugin\"><a href=\"#常用-plugin\" class=\"headerlink\" title=\"常用 plugin\"></a>常用 plugin</h3><table>\n<thead>\n<tr>\n<th align=\"left\">plugin</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">SplitChunksPlugin</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">TextExtractPlugin</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">DllPlugin</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">ImageMinimizerWebpackPlugin</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">TerserWebpackPlugin</td>\n<td align=\"center\"></td>\n</tr>\n</tbody></table>\n<h3 id=\"编写-plugin\"><a href=\"#编写-plugin\" class=\"headerlink\" title=\"编写 plugin\"></a>编写 plugin</h3><h2 id=\"高级特性\"><a href=\"#高级特性\" class=\"headerlink\" title=\"高级特性\"></a>高级特性</h2><h3 id=\"hmr\"><a href=\"#hmr\" class=\"headerlink\" title=\"hmr\"></a>hmr</h3><h3 id=\"tree-shaking\"><a href=\"#tree-shaking\" class=\"headerlink\" title=\"tree-shaking\"></a>tree-shaking</h3><blockquote>\n<p>你可以将应用程序想象成一棵树。绿色表示实际用到的 source code(源码) 和 library(库)，是树上活的树叶。灰色表示未引用代码，是秋天树上枯萎的树叶。为了除去死去的树叶，你必须摇动这棵树，使它们落下。</p>\n</blockquote>\n<p>现象：构建时会移除 JavaScript 上下文中的**未引用代码(dead-code)**。</p>\n<p>关联插件：<code>TerserWebpackPlugin</code></p>\n<p>前提：</p>\n<ul>\n<li><strong>使用 ES2015 模块语法（即 <code>import</code> 和 <code>export</code>）</strong>;</li>\n<li>在项目的 package.json 文件中，添加 “sideEffects” 属性;</li>\n<li>需要将 <code>webpack.config.js</code> 中的 <code>mode</code> 配置选项设置为 <code>production</code>。</li>\n</ul>\n<p>和 <code>babel-loader</code> 的关系???</p>\n<h3 id=\"source-map\"><a href=\"#source-map\" class=\"headerlink\" title=\"source-map\"></a>source-map</h3><p><code>source map</code> 实质上是一个 <strong><code>JSON</code> 描述文件</strong>，里面存储了代码打包转换后的位置信息，维护了打包前后的代码映射关系。</p>\n<h4 id=\"环境应用\"><a href=\"#环境应用\" class=\"headerlink\" title=\"环境应用\"></a>环境应用</h4><p>生成环境：<code>none</code></p>\n<p>开发环境：<code>source-map</code></p>\n<h4 id=\"配置参考\"><a href=\"#配置参考\" class=\"headerlink\" title=\"配置参考\"></a>配置参考</h4><table>\n<thead>\n<tr>\n<th align=\"left\">关键字</th>\n<th align=\"center\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">source-map</td>\n<td align=\"center\">生成 sourcemap 文件，可以配置 inline，会以 dataURL 的方式内联，可以配置 hidden，只生成 sourcemap，不和生成的文件关联</td>\n</tr>\n<tr>\n<td align=\"left\">eval</td>\n<td align=\"center\">浏览器 devtool 支持通过 sourceUrl 来把 eval 的内容单独生成文件，还可以进一步通过 sourceMappingUrl 来映射回源码，webpack 利用这个特性来简化了 sourcemap 的处理，可以直接从模块开始映射，不用从 bundle 级别</td>\n</tr>\n<tr>\n<td align=\"left\">cheap</td>\n<td align=\"center\">只映射到源代码的某一行，不精确到列，可以提升 sourcemap 生成速度</td>\n</tr>\n<tr>\n<td align=\"left\">module</td>\n<td align=\"center\">sourcemap 生成时会关联每一步 loader 生成的 sourcemap，配合 sourcemap-loader 可以映射回最初的源码</td>\n</tr>\n<tr>\n<td align=\"left\">inline</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">hidden</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"left\">nosources</td>\n<td align=\"center\">不生成 sourceContent 内容，可以减小 sourcemap 文件的大小</td>\n</tr>\n</tbody></table>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><h4 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h4><h3 id=\"code-splitting\"><a href=\"#code-splitting\" class=\"headerlink\" title=\"code-splitting\"></a>code-splitting</h3><p>参考资料：</p>\n<p>[1] <a href=\"https://www.webpackjs.com/\">Webpack 官网</a><br>\n[2] <a href=\"https://gitmind.cn/app/docs/m1foeg1o\">Webpack 5 知识体系</a><br>\n[2] <a href=\"https://mp.weixin.qq.com/s/SbJNbSVzSPSKBe2YStn2Zw\">[万字总结] 一文吃透 Webpack 核心原理</a><br></p>\n<p><a href=\"https://mp.weixin.qq.com/s/E26Ll8-VGo4rnGeHdgNAVQ\">https://mp.weixin.qq.com/s/E26Ll8-VGo4rnGeHdgNAVQ</a></p>\n","categories":["web"],"tags":["PROJECT"]},{"title":"WEB：浏览器渲染机制","url":"/2019/07/06/web-render/","content":"<p>在不同浏览器下代码渲染的结果会存在一定的差异性，造成差异性的原因是<strong>浏览器内核</strong>的不同，浏览器内核决定了浏览器解释网页语法的方式。</p>\n<span id=\"more\"></span>\n\n<p>而浏览器内核可以分为两部分：JS 引擎和<strong>渲染引擎</strong>（Layout Enfine 或 Rendering Engine）。</p>\n<p>本文主要介绍渲染引擎，渲染引擎包括了 <code>HTML 解释器</code>、<code>CSS 解释器</code>、布局、网络、存储、图形、音视频、图片解码器等等零部件。</p>\n<p>各浏览器对应的渲染引擎：</p>\n<ul>\n<li>IE：Trident</li>\n<li>Firefox：Gecko</li>\n<li>Chrome &amp; Safari：<strong>Webkit</strong></li>\n</ul>\n<hr>\n<h3 id=\"渲染过程\"><a href=\"#渲染过程\" class=\"headerlink\" title=\"渲染过程\"></a>渲染过程</h3><p>本文接下来会介绍 <code>webkit</code> 渲染引擎的渲染过程。</p>\n<p>渲染过程：渲染引擎根据 HTML 文件描述构建响应的数学模型，调用浏览器各个零部件，从而将网页资源代码转换为图像结果：</p>\n<p><img src=\"/images/web-render/render.png\" alt=\"渲染过程\"></p>\n<p>浏览器呈现网页的渲染过程，是由内核内部的功能模块相互配合协同工作进行的，我们需要关注以下几大功能模块：</p>\n<ul>\n<li><code>HTML 解释器</code>：将 HTML 文档经过词法分析输出 <code>DOM</code> 树。</li>\n<li><code>CSS 解释器</code>：解析 CSS 文档，生成样式规则，输出 <code>CSSOM</code> 树。</li>\n<li><code>图层布局计算模块</code>：布局计算每个对象的精确位置和大小。</li>\n<li><code>视图绘制模块</code>：进行具体节点的图像绘制，将像素渲染到屏幕上。</li>\n<li><code>JavaScript 引擎</code>：编译执行 Javascript 代码。</li>\n</ul>\n<p>每个页面的<strong>首次渲染</strong>都经历如下阶段：</p>\n<p><img src=\"/images/web-render/parse.png\" alt=\"渲染过程解析\"></p>\n<ul>\n<li><strong>解析 HTML</strong></li>\n</ul>\n<p>在这一步浏览器执行了所有的加载解析逻辑，在解析 HTML 的过程中发出了页面渲染所需的各种外部资源请求。</p>\n<ul>\n<li><strong>计算样式</strong></li>\n</ul>\n<p>浏览器将识别并加载所有的 CSS 样式信息与 DOM 树合并，最终生成页面 render 树（:after :before 这样的伪元素会在这个环节被构建到 DOM 树中）。</p>\n<ul>\n<li><strong>计算图层布局</strong></li>\n</ul>\n<p>页面中所有元素的相对位置信息，大小等信息均在这一步得到计算。</p>\n<ul>\n<li><strong>绘制图层</strong></li>\n</ul>\n<p>在这一步中浏览器会根据我们的 DOM 代码结果，把每一个页面图层转换为像素，并对所有的媒体文件进行解码。</p>\n<ul>\n<li><strong>整合图层，得到页面</strong></li>\n</ul>\n<p>最后一步浏览器会合并合各个图层，将数据由 CPU 输出给 GPU 最终绘制在屏幕上。（复杂的视图层会给这个阶段的 GPU 计算带来一些压力，在实际应用中为了优化动画性能，我们有时会手动区分不同的图层）。</p>\n<p><img src=\"/images/web-render/tree.png\" alt=\"渲染过程解析\"></p>\n<p><strong>总结</strong>：</p>\n<p>基于上述流程，其实渲染过程就是： ① 首先基于 HTML 构建一个 DOM 树，② DOM 树与 CSS 解释器解析出的 CSSOM 相结合，③ 得到布局渲染树 Render Tree。④ 最后浏览器以布局渲染树（Layout）为蓝本，去计算布局并绘制（Paint）图像。</p>\n<p><strong>之后每当一个新元素加入到这个 DOM 树当中，浏览器便会通过 CSS 引擎查遍 CSS 样式表，找到符合该元素的样式规则应用到这个元素上，然后再重新去绘制它。</strong></p>\n<hr>\n<h3 id=\"CSS-优化\"><a href=\"#CSS-优化\" class=\"headerlink\" title=\"CSS 优化\"></a>CSS 优化</h3><p>明白了浏览器的渲染过程后，就可以基于渲染流程对 CSS 做优化了。</p>\n<p>前置知识：<strong>CSS 选择符是从右到左进行匹配的</strong>。</p>\n<p>性能提升方案：</p>\n<ul>\n<li>避免使用通配符 <code>* &#123;&#125;</code>，只对需要用到的元素进行选择。</li>\n<li>少用标签选择器，尽量用类选择器替代。</li>\n<li>减少嵌套，后代选择器的开销是最高的。</li>\n</ul>\n<h3 id=\"加载优化\"><a href=\"#加载优化\" class=\"headerlink\" title=\"加载优化\"></a>加载优化</h3><p>HTML、CSS 和 JS，都具有<strong>阻塞渲染</strong>的特性。因此，需要优化 CSS 和 JS 的加载顺序：</p>\n<ul>\n<li>CSS：将 <code>css</code> 放在 <code>head</code> 标签里（尽早）和启用 <code>CDN</code> 实现静态资源加载速度的优化（尽快）</li>\n<li>JS：给 <code>script</code> 标签添加 <code>async</code> &#x2F; <code>defer</code> 标签</li>\n</ul>\n<h3 id=\"DOM-优化\"><a href=\"#DOM-优化\" class=\"headerlink\" title=\"DOM 优化\"></a>DOM 优化</h3><h4 id=\"减少-DOM-操作\"><a href=\"#减少-DOM-操作\" class=\"headerlink\" title=\"减少 DOM 操作\"></a>减少 DOM 操作</h4><blockquote>\n<p>把 DOM 和 Javascript 各自想象成一个岛屿，它们之间用收费桥梁连接。</p>\n</blockquote>\n<p>JS 引擎和渲染引擎是<strong>独立实现</strong>的，当我们用 JS 去操作 DOM 时，本质上是 JS 引擎和渲染引擎之间进行了「<code>跨界交流</code>」。这跨界交流的实现依赖了桥接接口作为“桥梁”。</p>\n<p><img src=\"/images/web-render/dom.png\" alt=\"操作 DOM\"></p>\n<p>每次操作 DOM （修改或是访问），都需要过桥收桥费。因此需要<strong>减少操作 DOM</strong>。（DOM Fragment）</p>\n<h4 id=\"减少-DOM-修改\"><a href=\"#减少-DOM-修改\" class=\"headerlink\" title=\"减少 DOM 修改\"></a>减少 DOM 修改</h4><p>上述仅仅是「过桥」，过完桥，假如继续操作（修改 DOM），也是慢动作。</p>\n<p>一旦对 DOM 进行修改，会引发外观（样式）上的改变时，就会触发<strong>回流</strong>或<strong>重绘</strong>，本质上是对 DOM 修改触发了渲染树（Render Tree）的变化所导致的：</p>\n<p><img src=\"/images/web-render/render-tree.png\" alt=\"操作 DOM\"></p>\n<ul>\n<li><p>回流：当我们对 DOM 的修改引发了 DOM 几何尺寸的变化（比如修改元素的宽、高或隐藏元素等）时，浏览器需要重新计算元素的几何属性（其他元素的几何属性和位置也会因此受到影响），然后再将计算的结果绘制出来。这个过程就是回流（也叫重排）。</p>\n</li>\n<li><p>重绘：当我们对 DOM 的修改导致了样式的变化、却并未影响其几何属性（比如修改了颜色或背景色）时，浏览器不需重新计算元素的几何属性、直接为该元素绘制新的样式（跳过了上图所示的回流环节）。这个过程叫做重绘。</p>\n</li>\n</ul>\n<p>总结：<strong>重绘不一定导致回流，回流一定会导致重绘</strong>。尽可能减少 DOM 修改。</p>\n<h3 id=\"异步更新\"><a href=\"#异步更新\" class=\"headerlink\" title=\"异步更新\"></a>异步更新</h3><p>详见 Vue 异步更新策略。</p>\n<h3 id=\"回流与重绘\"><a href=\"#回流与重绘\" class=\"headerlink\" title=\"回流与重绘\"></a>回流与重绘</h3><p>关于回流与重绘，可以回顾下 DOM 优化时的描述。</p>\n<p>避免回流和重绘的发生，最直接的做法就是<strong>避免掉可能会引发回流与重绘的 DOM 操作</strong>，首先找出可能会触发它们的<strong>导火索</strong>：</p>\n<ul>\n<li>重绘：修改 <code>background</code>、<code>color</code>、<code>visibility</code> 等样式属性。</li>\n<li>回流：① 修改 <code>width</code>、<code>height</code>、<code>padding</code>、<code>margin</code>、<code>left</code>、<code>top</code>、<code>border</code> 等几何属性。② 改变 DOM 树的结构：增删、移动节点。③ 获取一定特定属性的值：<code>offsetWidth</code>、<code>scrollWidth</code>、<code>clientWidth</code> 等，会触发<strong>即时计算</strong>。</li>\n</ul>\n<p>建议：</p>\n<ul>\n<li>Transtion 动画：优先选择 <code>transform</code>，尽量不使用 height，width，padding，margin。</li>\n<li>使用 <code>visibility</code> 替换 <code>display: none</code> ，因为前者只会引起重绘，后者会引发回流（改变了布局）。</li>\n<li>不要把节点的属性值放在一个循环里当成循环里的变量。</li>\n<li>不要使用 <code>table</code> 布局，可能很小的一个小改动会造成整个 table 的重新布局。</li>\n<li>动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用 <code>requestAnimationFrame</code>。</li>\n<li>CSS 选择符从右往左匹配查找，避免节点层级过多。</li>\n<li>将频繁重绘或者回流的节点设置为图层，图层能够阻止该节点的渲染行为影响别的节点。比如对于 <code>video</code> 标签来说，浏览器会自动将该节点变为图层。<code>will-change</code> 属性和 <code>video</code>、<code>iframe</code> 标签都可以把节点为图层</li>\n</ul>\n<p>参考文章：</p>\n<p><a href=\"https://juejin.im/book/5b936540f265da0a9624b04b/section/5b936540f265da0aec223b5d\">前端性能优化原理与实践</a></p>\n<p><a href=\"https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc7207f265da613c09425d\">浏览器渲染原理</a></p>\n"},{"title":"WEB：Event Loop 的样子","url":"/2019/06/13/event-loop/","content":"<p>JS 是单线程的，异步编程已经是前端不可或缺的重要部分，Event Loop 执行顺序也是考核的一部分。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h3><p>Promise 是异步编程的一种解决方案，Promise 对象代表一个异步操作。</p>\n<h4 id=\"Promise-对象的特点\"><a href=\"#Promise-对象的特点\" class=\"headerlink\" title=\"Promise 对象的特点\"></a>Promise 对象的特点</h4><ol>\n<li>存在三种状态，且状态不受外界影响：</li>\n</ol>\n<ul>\n<li>pending（进行中）：等待态</li>\n<li>fulfilled（已成功）：执行态</li>\n<li>rejected（已失败）：拒绝态</li>\n</ul>\n<ol start=\"2\">\n<li>一旦状态改变，之后状态就不会再变，任何时候都可以得到这个结果。只要从 pending 转化为 fulfilled 或 rejected 其中一种，状态就凝固了， 不会再变了。</li>\n</ol>\n<h4 id=\"Promise-的基本用法\"><a href=\"#Promise-的基本用法\" class=\"headerlink\" title=\"Promise 的基本用法\"></a>Promise 的基本用法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Promise 是一个构造函数</span></span><br><span class=\"line\"><span class=\"comment\">// resolve 和 reject 是两个函数参数，由 Javascript 引擎提供</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>)=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> image = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    image.<span class=\"property\">onload</span> = <span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(image)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image.<span class=\"property\">onerror</span> = <span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">`Could not load image at <span class=\"subst\">$&#123;url&#125;</span>`</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    image.<span class=\"property\">src</span> = url</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;I am in purpose&#x27;</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">err</span>=&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;).<span class=\"title function_\">finally</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以用作关闭加载弹框</span></span><br><span class=\"line\">    wx.<span class=\"title function_\">hideLoading</span>()</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>注意点：</p>\n<ul>\n<li>Promise 在 new 后就会立即执行, then 会在 Promise 函数里的所有同步操作执行完后才执行。</li>\n<li>Promise 状态改变为 resolved 后，再抛出错误是无效的。</li>\n<li>Promise 内部的错误不会影响到外部的代码。</li>\n</ul>\n<p>其他方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封装多个 Promise，返回所有 Promise 结果</span></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>([p1, p2, p3]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span> &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 首个改变状态的 Promise 会改变所有的状态</span></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>([p1, p2, p3]).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span> &#123;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回状态为 resolve 的 promise 对象</span></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(res)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回状态为 reject 的 promise 对象</span></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(err)</span><br></pre></td></tr></table></figure>\n\n<p>训练题：<strong>手写 Promise</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 简易版</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">PENDING</span> = <span class=\"string\">&#x27;pending&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">RESOLVED</span> = <span class=\"string\">&#x27;resolved&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">REJECTED</span> = <span class=\"string\">&#x27;rejected&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyPromise</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> that = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    that.<span class=\"property\">state</span> = <span class=\"variable constant_\">PENDING</span></span><br><span class=\"line\">    that.<span class=\"property\">value</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">    that.<span class=\"property\">resolvedCallbacks</span> = []</span><br><span class=\"line\">    that.<span class=\"property\">rejectedCallbacks</span> = []</span><br><span class=\"line\">    <span class=\"comment\">// 待完善 resolve 和 reject 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">resolve</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> <span class=\"title class_\">MyPromise</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> value.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (that.<span class=\"property\">state</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">                that.<span class=\"property\">state</span> = <span class=\"variable constant_\">RESOLVED</span></span><br><span class=\"line\">                that.<span class=\"property\">value</span> = value</span><br><span class=\"line\">                that.<span class=\"property\">resolvedCallbacks</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> <span class=\"title function_\">cb</span>(that.<span class=\"property\">value</span>))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">reject</span>(<span class=\"params\">value</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (that.<span class=\"property\">state</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">                that.<span class=\"property\">state</span> = <span class=\"variable constant_\">REJECTED</span></span><br><span class=\"line\">                that.<span class=\"property\">value</span> = value</span><br><span class=\"line\">                that.<span class=\"property\">rejectedCallbacks</span>.<span class=\"title function_\">map</span>(<span class=\"function\"><span class=\"params\">cb</span> =&gt;</span> <span class=\"title function_\">cb</span>(that.<span class=\"property\">value</span>))</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 待完善执行 fn 函数</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(resolve, reject)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> better</span></span><br><span class=\"line\"><span class=\"title class_\">MyPromise</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">then</span> = <span class=\"keyword\">function</span>(<span class=\"params\">onFulfilled, onRejected</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> that = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    onFulfilled = <span class=\"keyword\">typeof</span> onFulfilled === <span class=\"string\">&#x27;function&#x27;</span> ? onFulfilled : <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v</span><br><span class=\"line\">    onRejected =</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">        ? onRejected</span><br><span class=\"line\">        : <span class=\"function\"><span class=\"params\">r</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> r</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (that.<span class=\"property\">state</span> === <span class=\"variable constant_\">PENDING</span>) &#123;</span><br><span class=\"line\">        that.<span class=\"property\">resolvedCallbacks</span>.<span class=\"title function_\">push</span>(onFulfilled)</span><br><span class=\"line\">        that.<span class=\"property\">rejectedCallbacks</span>.<span class=\"title function_\">push</span>(onRejected)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (that.<span class=\"property\">state</span> === <span class=\"variable constant_\">RESOLVED</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onFulfilled</span>(that.<span class=\"property\">value</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (that.<span class=\"property\">state</span> === <span class=\"variable constant_\">REJECTED</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">onRejected</span>(that.<span class=\"property\">value</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"generator\"><a href=\"#generator\" class=\"headerlink\" title=\"generator\"></a>generator</h3><p>Generator （生成器）函数是一个状态机，封装了多个内部状态，会返回遍历器对象。</p>\n<ul>\n<li>function 关键字与函数名之间有个星号 *</li>\n<li>函数内部使用 yield 产出表达式标记</li>\n<li>next() 遍历状态，惰性求值</li>\n</ul>\n<p>小插曲：有限状态机（statemachine）</p>\n<ol>\n<li>状态总数（state）是有限的</li>\n<li>任一时刻，只处于一种状态之中</li>\n<li>某种条件下，会从一种状态转变另一种</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> * <span class=\"title function_\">happyDating</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;zeus&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;dione&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;dating&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hw = <span class=\"title function_\">happyDating</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">hw.<span class=\"title function_\">next</span>() <span class=\"comment\">// &#123; value: &#x27;zeus&#x27;, done: false &#125;</span></span><br><span class=\"line\">hw.<span class=\"title function_\">next</span>() <span class=\"comment\">// &#123; value: &#x27;dione&#x27;, done: false &#125;</span></span><br><span class=\"line\">hw.<span class=\"title function_\">next</span>() <span class=\"comment\">// &#123; value: &#x27;dating&#x27;, done: true &#125;</span></span><br><span class=\"line\">hw.<span class=\"title function_\">next</span>() <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async await\"></a>async await</h3><p>Async 函数是 Generator 函数的语法糖， async 相当于 *，await 相当于 yield。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">haveDating</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isFull = <span class=\"keyword\">await</span> <span class=\"title function_\">haveDinner</span>()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isHappy = <span class=\"keyword\">await</span> <span class=\"title function_\">watchMovie</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        isFull,</span><br><span class=\"line\">        isHappy</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">haveDating</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I love u&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>async 函数的实现原理，就是将 Generator 函数和自动执行器，包装在一个函数里。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">spawn</span>(<span class=\"keyword\">function</span> * () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Event-loop\"><a href=\"#Event-loop\" class=\"headerlink\" title=\"Event loop\"></a>Event loop</h3><p>执行 JS 代码是往执行栈（callback stack）中放入函数，一旦遇到异步代码，就把异步代码挂起并在需要执行的时候加入到 Task 队列中。一旦执行栈为空，<strong>Event Loop</strong> 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行。</p>\n<p>Task 任务源分为 微任务（microtask）和宏任务（macrotask），ES6中，microtask 称为 jobs，macrotask 称为 task。</p>\n<p>题目测试：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script start&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"title function_\">async2</span>()</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async1 end&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">async2</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;async2 end&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">async1</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Promise&#x27;</span>)</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise1&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise2&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;script end&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// script start =&gt; async2 end =&gt; Promise =&gt; script end =&gt; promise1 =&gt; promise2 =&gt; async1 end =&gt; setTimeout</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Event Loop 执行顺序如下所示：</p>\n<ul>\n<li>首先执行同步代码，这属于宏任务</li>\n<li>当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行</li>\n<li>执行所有微任务</li>\n<li>当执行完所有微任务后，如有必要会渲染页面</li>\n<li>然后开始下一轮 Event Loop，执行宏任务中的异步代码，也就是 setTimeout 中的回调函数</li>\n</ul>\n<p>微任务包括 <a href=\"https://nodejs.dev/understanding-process-nexttick/\"><code>process.nextTick</code></a> ，<code>promise</code> ，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a>，其中 process.nextTick 为 Node 独有。</p>\n<p>宏任务包括 <code>script</code> ， <code>setTimeout</code> <code>，setInterval</code> ，<code>setImmediate</code> ，<code>I/O</code> ，<code>UI rendering</code>。</p>\n"},{"title":"WEB：躲不了的前端跨域","url":"/2019/06/12/web-cors/","content":"<blockquote>\n<p>同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。</p>\n</blockquote>\n<p>引用自 MDN <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\">浏览器的同源策略</a>。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"跨域概述\"><a href=\"#跨域概述\" class=\"headerlink\" title=\"跨域概述\"></a>跨域概述</h3><p>基于浏览器安全考虑，浏览器实行了__跨域安全策略（同源策略）__，保证用户信息的安全，防止恶意的网站窃取数据，因而会限制了不同域之间的资源共享。</p>\n<h4 id=\"同源策略-same-origin-policy\"><a href=\"#同源策略-same-origin-policy\" class=\"headerlink\" title=\"同源策略(same-origin policy)\"></a>同源策略(same-origin policy)</h4><p>如果 A 与 B 网页不同源，B 网页不能直接访问 A 网页的资源。</p>\n<p>同源的定义（三要素须同时相同）：</p>\n<ol>\n<li>协议相同（https | http）</li>\n<li>域名相同（zeus.com | zeus.cn）</li>\n<li>端口相同（80 | 8080）</li>\n</ol>\n<p>非同源的限制：</p>\n<ol>\n<li>Cookie、LocalStorage 和 IndexDB 无法读取。</li>\n<li>DOM 无法获得。</li>\n<li>AJAX 请求不能发送。</li>\n</ol>\n<h3 id=\"跨域解决方案\"><a href=\"#跨域解决方案\" class=\"headerlink\" title=\"跨域解决方案\"></a>跨域解决方案</h3><ul>\n<li>图像 Ping</li>\n</ul>\n<p>通过使用 &lt;img&gt; 标签的 src 属性发出请求加载图像。动态创建图像 Image，可以使用 onload 和 onerror 来确定是否接收到了相应。（也常用于跟踪用户点击页面或动态广告曝光次数，__无痕埋点应用__）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> img = <span class=\"keyword\">new</span> <span class=\"title class_\">Image</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">img.<span class=\"property\">onload</span> = img.<span class=\"property\">onerror</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Done&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传递 name 等 query 参数</span></span><br><span class=\"line\">img.<span class=\"property\">src</span> = <span class=\"string\">&#x27;https://zeuscoder.github.io/2019/06/12/web-cors/?name=zeus&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>缺点：</p>\n<ol>\n<li>只能发送 GET 请求</li>\n<li>无法访问服务端的响应文本</li>\n</ol>\n<ul>\n<li>JSONP(JSON with padding)</li>\n</ul>\n<p>JSONP 利用 &lt;script&gt; 标签的 src 属性指定跨域 URL。JSONP 由回调函数和数据两部分组成：<font color=\"#0000dd\">callback({name: ‘zesu’})</font></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前端</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleResponse</span>(<span class=\"params\">response</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(response)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">script.<span class=\"property\">src</span> = <span class=\"string\">&#x27;https://zeuscoder.github.io/2019/06/12/web-cors/?callback=handleResponse&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"property\">boby</span>.<span class=\"title function_\">insertBefore</span>(script, <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>.<span class=\"property\">firstChild</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 服务端返回数据，由于在 script 标签访问，返回数据会直接作为代码运行</span></span><br><span class=\"line\"><span class=\"title function_\">handleResponse</span>(&#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;zesu&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>不足：</p>\n<ol>\n<li>跨域加载代码运行，需要确保该域安全，否则会在响应中夹杂恶意代码，此时只能完全放弃 JSONP 调用。</li>\n<li>不能确认 JSONP 请求是否失败，script 标签的 onerror 未得到浏览器支持。</li>\n</ol>\n<ul>\n<li>CORS(Cross-origin resource sharing)</li>\n</ul>\n<p>预检请求（）</p>\n<ul>\n<li><p>代理服务器</p>\n</li>\n<li><p>document.domain</p>\n</li>\n<li><p>postMessage</p>\n</li>\n</ul>\n<p>参考文章：</p>\n<p>[1] <a href=\"http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html\">浏览器同源政策及其规避方法</a><br>\n[2] <a href=\"https://segmentfault.com/a/1190000012469713#articleHeader9\">ajax跨域，这应该是最全的解决方案了</a><br>\n[3] <a href=\"https://zhuanlan.zhihu.com/p/27290218\">3分钟弄明白顶级域名|二级域名|子域名|父域名的区别</a><br>\n[4] <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\">浏览器的同源策略</a></p>\n","categories":["web"]},{"title":"WEB：浅谈前端模块化","url":"/2019/06/09/web-module/","content":"<p>前端模块化设计，其目的和组件化相似，是为了提高代码复用性和维护性。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"模块化设计\"><a href=\"#模块化设计\" class=\"headerlink\" title=\"模块化设计\"></a>模块化设计</h3><p>模块化设计（Modular Design）的历史进程主要有以下方式：</p>\n<ol>\n<li>IIFE</li>\n<li>CommonJS</li>\n<li>AMD &amp; CMD</li>\n<li>ES6 Module</li>\n</ol>\n<h4 id=\"IIFE\"><a href=\"#IIFE\" class=\"headerlink\" title=\"IIFE\"></a>IIFE</h4><p>IIFE：立即执行的匿名函数，不会污染全局变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;zeus&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> age = <span class=\"number\">26</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;try your best&#x27;</span>)</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h4><p>CommonJs：模块即对象，运行时加载，只有在允许时才能加载对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导出模块</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;zeus&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zeus&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 引入模块</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;person&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>CommonJS 依赖于 Node.js 的环境变量 module exports reqiure global，仅适用于 Node.js 的规范。</p>\n<h4 id=\"AMD-CMD\"><a href=\"#AMD-CMD\" class=\"headerlink\" title=\"AMD &amp;&amp; CMD\"></a>AMD &amp;&amp; CMD</h4><p>AMD（Asynchronous Module Definition）：异步的模块管理。<br>\n具体实现： Requirejs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">requirejs([<span class=\"string\">&#x27;person&#x27;</span>], <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加载完 person 模块后使用</span></span><br><span class=\"line\">    person.<span class=\"title function_\">run</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 依赖其他模块定义自己的模块</span></span><br><span class=\"line\"><span class=\"title function_\">define</span>([<span class=\"string\">&#x27;./car&#x27;</span>, <span class=\"string\">&#x27;./house&#x27;</span>], <span class=\"keyword\">function</span>(<span class=\"params\">car, house</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(house.<span class=\"property\">price</span>)</span><br><span class=\"line\">    car.<span class=\"title function_\">drive</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zeus&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">26</span>,</span><br><span class=\"line\">        car,</span><br><span class=\"line\">        house</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>CMD（Common Module Definition）：优化的 AMD，崇依赖就近 + 延迟执行。<br>\n具体实现：Seajs</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\">car, house</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (***) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;house&#x27;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(house.<span class=\"property\">price</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (***) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;car&#x27;</span>)</span><br><span class=\"line\">        car.<span class=\"title function_\">drive</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;zeus&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">26</span>,</span><br><span class=\"line\">        car,</span><br><span class=\"line\">        house</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>AMD 和 CMD 只适用浏览器的规范。</p>\n<h4 id=\"ES6-Module\"><a href=\"#ES6-Module\" class=\"headerlink\" title=\"ES6 Module\"></a>ES6 Module</h4><p>ES6 Module: 浏览器和服务器通用的模块化解决方案。</p>\n<ul>\n<li>与 CommonJS相似，对循环依赖以及单个 exports 的支持。</li>\n<li>与 AMD 相似，直接支持异步加载和可配置模块加载。</li>\n<li>结构可以静态分析。</li>\n<li>script 标签加载：&lt;script type&#x3D;”module”&gt;&lt;&#x2F;script&gt;</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;zeus&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    name,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">26</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果多次重复执行同一句import语句，那么只会执行一次，而不会执行多次。</span></span><br><span class=\"line\"><span class=\"comment\">// 因此不同的脚本加载同个模块，得到的是同一个实例。（重点）</span></span><br><span class=\"line\"><span class=\"comment\">// 按需加载使用 import()，返回 Promise 对象。</span></span><br><span class=\"line\"><span class=\"comment\">// import * as Zeus from &#x27;person&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Zeus</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;person&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注意</em>：不同的脚本加载同个模块，得到的是同一个实例。</p>\n<h3 id=\"模块加载差异\"><a href=\"#模块加载差异\" class=\"headerlink\" title=\"模块加载差异\"></a>模块加载差异</h3><p>比较 ES6 Module 与 CommonJS 的差异。</p>\n<h4 id=\"导出值\"><a href=\"#导出值\" class=\"headerlink\" title=\"导出值\"></a>导出值</h4><p>CommonJS：运行时加载，导出的是值的拷贝。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// person.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;zeus&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">grow</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    age++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    grow</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Zeus</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./person&#x27;</span>)</span><br><span class=\"line\">consle.<span class=\"title function_\">log</span>(<span class=\"title class_\">Zeus</span>.<span class=\"property\">age</span>) <span class=\"comment\">// 26</span></span><br><span class=\"line\"><span class=\"comment\">// 内部方法改变了 age，age 是原始类型的值，引用后会被缓存，因此值不变</span></span><br><span class=\"line\"><span class=\"title class_\">Zeus</span>.<span class=\"title function_\">grow</span>()</span><br><span class=\"line\">consle.<span class=\"title function_\">log</span>(<span class=\"title class_\">Zeus</span>.<span class=\"property\">age</span>) <span class=\"comment\">// 26</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6 Module：编译时输出接口，导出的是值的引用，实时绑定。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// person.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;zeus&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">26</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">grow</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    age++</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    age,</span><br><span class=\"line\">    grow</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Zeus</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./person&#x27;</span></span><br><span class=\"line\">consle.<span class=\"title function_\">log</span>(<span class=\"title class_\">Zeus</span>.<span class=\"property\">age</span>) <span class=\"comment\">// 26</span></span><br><span class=\"line\"><span class=\"comment\">// import 只是对值的引用，动态地去被加载的模块取值</span></span><br><span class=\"line\"><span class=\"title class_\">Zeus</span>.<span class=\"title function_\">grow</span>()</span><br><span class=\"line\">consle.<span class=\"title function_\">log</span>(<span class=\"title class_\">Zeus</span>.<span class=\"property\">age</span>) <span class=\"comment\">// 27</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"循环加载\"><a href=\"#循环加载\" class=\"headerlink\" title=\"循环加载\"></a>循环加载</h4><p>循环加载：a 脚本的执行依赖 b 脚本，而 b 脚本的执行又依赖 a 脚本。</p>\n<p>CommonJS 的加载原理：CommonJS 模块无论加载多少次，都只会在第一次加载时运行一次，以后再加载，就返回第一次运行的结果，除非手动清除系统缓存。</p>\n<p>CommonJS 的循环加载：一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"comment\">// 引用 b.js，等待 b.js 执行完毕。</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">done</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./b.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;在 a.js 之中，b.done = %j&#x27;</span>, b.<span class=\"property\">done</span>)</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">done</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;a.js 执行完毕&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// b.js</span></span><br><span class=\"line\"><span class=\"comment\">// 此时 a.js 只 执行到 exports.done = false</span></span><br><span class=\"line\"><span class=\"comment\">// 只输出已执行的部分，a.done = false</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">done</span> = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;在 b.js 之中，a.done = %j&#x27;</span>, a.<span class=\"property\">done</span>)</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">done</span> = <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;b.js 执行完毕&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// main.js</span></span><br><span class=\"line\"><span class=\"comment\">// 加载 a.js 时也加载了 b.js，输出了两个模块的日志</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./a.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 谨记：此时加载 b.js 没有再次输出日志，说明没有再次加载 b.js，只是输出缓存 b.js 的执行结果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./b.js&#x27;</span>)</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;在 main.js 之中, a.done=%j, b.done=%j&#x27;</span>, a.<span class=\"property\">done</span>, b.<span class=\"property\">done</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">$ node main.<span class=\"property\">js</span></span><br><span class=\"line\"></span><br><span class=\"line\">在 b.<span class=\"property\">js</span> 之中，a.<span class=\"property\">done</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">b.<span class=\"property\">js</span> 执行完毕</span><br><span class=\"line\">在 a.<span class=\"property\">js</span> 之中，b.<span class=\"property\">done</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">a.<span class=\"property\">js</span> 执行完毕</span><br><span class=\"line\">在 main.<span class=\"property\">js</span> 之中, a.<span class=\"property\">done</span>=<span class=\"literal\">true</span>, b.<span class=\"property\">done</span>=<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6 Module 的循环加载：先默认 import 的引用存在，使用时再获取对应的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// even.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; odd &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./odd&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> counter = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">even</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    counter++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n === <span class=\"number\">0</span> || <span class=\"title function_\">odd</span>(n - <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// odd.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; even &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./even&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">odd</span>(<span class=\"params\">n</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n !== <span class=\"number\">0</span> &amp;&amp; <span class=\"title function_\">even</span>(n - <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$ babel-node</span><br><span class=\"line\">&gt; <span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> m <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./even.js&#x27;</span></span><br><span class=\"line\">&gt; m.<span class=\"title function_\">even</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; m.<span class=\"property\">counter</span></span><br><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\">&gt; m.<span class=\"title function_\">even</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\">&gt; m.<span class=\"property\">counter</span></span><br><span class=\"line\"><span class=\"number\">17</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><p>UMD(Universal Module Definition)：提供一个前后端跨平台的解决方案(支持AMD与CommonJS模块方式)。</p>\n<p>UMD的实现：</p>\n<ol>\n<li>先判断是否支持Node.js模块格式（exports是否存在），存在则使用Node.js模块格式。</li>\n<li>再判断是否支持AMD（define是否存在），存在则使用AMD方式加载模块。</li>\n<li>前两个都不存在，则将模块公开到全局（window或global）。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// if the module has no dependencies, the above pattern can be simplified to</span></span><br><span class=\"line\">(<span class=\"keyword\">function</span> (<span class=\"params\">root, factory</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> define === <span class=\"string\">&#x27;function&#x27;</span> &amp;&amp; define.<span class=\"property\">amd</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// AMD. Register as an anonymous module.</span></span><br><span class=\"line\">        <span class=\"title function_\">define</span>([], factory);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">exports</span> === <span class=\"string\">&#x27;object&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Node. Does not work with strict CommonJS, but</span></span><br><span class=\"line\">        <span class=\"comment\">// only CommonJS-like environments that support module.exports,</span></span><br><span class=\"line\">        <span class=\"comment\">// like Node.</span></span><br><span class=\"line\">        <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = <span class=\"title function_\">factory</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Browser globals (root is window)</span></span><br><span class=\"line\">        root.<span class=\"property\">returnExports</span> = <span class=\"title function_\">factory</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;(<span class=\"variable language_\">this</span>, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Just return a value to define the module export.</span></span><br><span class=\"line\">    <span class=\"comment\">// This example returns an object, but the module</span></span><br><span class=\"line\">    <span class=\"comment\">// can return a function as the exported value.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n\n<p>参考文章：</p>\n<p>[1] <a href=\"https://mp.weixin.qq.com/s/a_mI5w5bCxrvHrhogRkKVQ\">从 IIFE 聊到 Babel 带你深入了解前端模块化发展体系</a></p>\n<p>[2] <a href=\"http://es6.ruanyifeng.com/#docs/module-loader\">Module 的加载实现</a></p>\n","categories":["web"],"tags":["WEB"]},{"title":"JS：简述原型与原型链","url":"/2019/06/02/js-prototype/","content":"<p>搞懂<strong>原型（prototype）和原型链</strong>，从 <em>JavaScript 面向对象的程序设计</em> 思想开始可能会比较容易入手。</p>\n<span id=\"more\"></span>\n\n<ol>\n<li>了解原型和原型链的概念（What）</li>\n<li>使用原型和原型链的方式（How）</li>\n<li>明白原型和原型链的用处（Why）</li>\n</ol>\n<h3 id=\"浓缩版知识点\"><a href=\"#浓缩版知识点\" class=\"headerlink\" title=\"浓缩版知识点\"></a>浓缩版知识点</h3><ul>\n<li><strong>原型（prototype）是函数（Function）的一个属性（property）</strong>，<em>原型（prototype）的值是对象（object instance）</em>，原型实际就是对象内存地址指针（pointer），重写原型相当于改变对象内存地址指针的指向。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;zeus&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改原型对象的值，原型默认的构造函数指向自己</span></span><br><span class=\"line\"><span class=\"comment\">// Person.prototype.construcor = Person</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">age</span> = <span class=\"number\">26</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改原型对象的指针，同时修改原型默认的构造函数</span></span><br><span class=\"line\"><span class=\"comment\">// Person.prototype.construcor = Object</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">26</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>原型</strong>：① prototype【函数属性】② __proto__【实例属性，可直接访问】③ [[prototype]]【实例内部属性，不可直接访问】</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;zeus&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例的构造函数</span></span><br><span class=\"line\">person.<span class=\"property\">constructor</span> === <span class=\"title class_\">Person</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 全文最关键的地方</span></span><br><span class=\"line\"><span class=\"comment\">// 原型 Object.getPrototypeOf(person) 相当于访问 person[[prototype]]</span></span><br><span class=\"line\">person.<span class=\"property\">__proto__</span> === person.<span class=\"property\">constructor</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> ==== <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> ==== <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(person)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>原型链</strong>就是构造函数（Function）的原型（prototype）指向（&#x3D;）另一个实例化对象（instance），形成了原型链。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Super</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">property</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Sub</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subProperty</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 父类的实例化对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable language_\">super</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Super</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类的原型指向父类的实例化对象</span></span><br><span class=\"line\"><span class=\"title class_\">Sub</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"variable language_\">super</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sub = <span class=\"keyword\">new</span> <span class=\"title class_\">Sub</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以引用查找父类实例的属性</span></span><br><span class=\"line\">sub.<span class=\"property\">property</span> === <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>原型和原型链</strong>相关的函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取实例的原型对象，相当于访问 instance[[prototype]]</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(instance)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义对象的属性值，Vue 的知识点之一</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(instance, property, propertyDesc)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 根据返回的描述符数组值区分数据属性还是访问器属性</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">getOwnPropertyDescriptor</span>(instance, property)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"详解版知识点\"><a href=\"#详解版知识点\" class=\"headerlink\" title=\"详解版知识点\"></a>详解版知识点</h3><blockquote>\n<ul>\n<li>只要创建一个新函数（Function），就会根据一组特定的规则为该函数创建一个 prototype 属性，这个属性指向函数的原型对象（object）。<br></li>\n<li>原型对象会默认自动获得 constructor (构造函数) 属性，这个属性包含一个指向 prototype 属性所在函数（Function）的指针。<br></li>\n<li>Person.prototype.constructor &#x3D;&#x3D;&#x3D; Person</li>\n</ul>\n</blockquote>\n<p>注意：ECMAScript 没有类的概念</p>\n<h4 id=\"理解对象\"><a href=\"#理解对象\" class=\"headerlink\" title=\"理解对象\"></a>理解对象</h4><p>对象有两种<strong>属性类型</strong>：数据属性和访问器属性。</p>\n<table>\n    <tr>\n        <td>数据属性</td>\n        <td>访问器属性</td>\n        <td>描述符解释</td>\n    </tr>\n    <tr>\n        <td>[[configurable]]</td>\n        <td>[[configurable]]</td>\n        <td>能否通过 delete 删除属性，默认值 true</td>\n    </tr>\n    <tr>\n        <td>[[Enumberable]]</td>\n        <td>[[Enumberable]]</td>\n        <td>能否通过 for-in 访问属性，默认值 true</td>\n    </tr>\n    <tr>\n        <td>[[Writable]]</td>\n        <td>[[get]]</td>\n        <td>\n            ① [Writable]] 能否修改属性的值，默认值 true<br>\n            ② [[get]] 读取属性时调用的函数，默认值 undeined\n        </td>\n    </tr>\n    <tr>\n        <td>[[value]]</td>\n        <td>[[set]]</td>\n        <td>\n            ① [[value]] 包含这个属性的数据值，默认值 undeined<br>\n            ② [[set]] 写入属性时调用的函数，默认值 undeined\n        </td>\n    </tr>\n</table>\n\n<p>① 数据属性：通过 this.*** 直接定义；</p>\n<p>② 访问器属性：必须通过 Object.defineProperty() 定义。</p>\n<p>区分：通过 Object.getOwnPropertyDescriptor(instance, property) 来区分。</p>\n<p>定义：必须使用 Object.defineProperty(instance, property, propertyDesc) 来修改默认属性。</p>\n<blockquote>\n<p>Object.defineProperty，getter， setter 是 Vue 框架要点之一。</p>\n</blockquote>\n<h4 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h4><ol>\n<li>工厂模式</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 工厂模式，根据接受参数调用函数，返回相似的对象，但是无法识别对象的类型</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createPerson</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> o = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>()</span><br><span class=\"line\">    o.<span class=\"property\">name</span> = name</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> zeus = <span class=\"title function_\">createPerson</span>(<span class=\"string\">&#x27;zeus&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> boss = <span class=\"title function_\">createPerson</span>(<span class=\"string\">&#x27;boss&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>构造函数模式</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自定义构造函数，创建特定类型的对象，自定义对象类型的属性和方法</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new 操作符的流程：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. 创建一个对象</span></span><br><span class=\"line\"><span class=\"comment\">// 2. this指向这个对象</span></span><br><span class=\"line\"><span class=\"comment\">// 3. 指向函数的代码</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 返回这个对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> zeus = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;zeus&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> boss = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;boss&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// person instanceof Person === true</span></span><br><span class=\"line\"><span class=\"comment\">// person.constructor === Person</span></span><br></pre></td></tr></table></figure>\n\n<p>用 instanceof 检测对象类型，比 constructor(构造函数) 检测靠谱。</p>\n<ol start=\"3\">\n<li><strong>原型模式（文章重点）</strong></li>\n</ol>\n<p>关键字： <strong>共享</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;zeus&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">friends</span> = [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>]</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有实例共享原型模式定义的属性和方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> zeus = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> boss = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 缺点：一旦原型属性值是对象或者数组，一个实例更改了，另外一个实例也会跟着一起改变。</span></span><br><span class=\"line\">zeus.<span class=\"property\">friends</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;atom&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">zeus.<span class=\"property\">friends</span> === [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>, <span class=\"string\">&#x27;atom&#x27;</span>]</span><br><span class=\"line\">boss.<span class=\"property\">friends</span> === [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>, <span class=\"string\">&#x27;atom&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>只要创建一个新函数（Function），就会根据一组特定的规则为该函数创建一个 prototype 属性，这个属性指向函数的原型对象（object）。<br></li>\n<li>原型对象会默认自动获得 constructor (构造函数) 属性，这个属性包含一个指向 prototype 属性所在函数的指针。<br></li>\n<li>Person.prototype.constructor &#x3D;&#x3D;&#x3D; Person</li>\n</ul>\n</blockquote>\n<p><img src=\"https://cloud-minapp-11144.cloud.ifanrusercontent.com/1hYBRP8Cwpq1G7ZK.png\" alt=\"prototype\"></p>\n<p>代码读取对象的属性时，搜索顺序：对象本身的属性 -&gt; 原型对象的属性；对象本身的属性会屏蔽原型对象的同名属性，而不是删除，一旦在对象属性搜索到目标属性的话，就不会往下搜索了。还有对象实例可以访问到原型中的值，却不能通过对象实例重写原型中的值。<br>\n可以通过 instance.hasOwnProperty(propertyName) 来判断是否是对象属性。\n<em>注意：person 的 [[prototype]] 内部属性不能直接访问，可以通过 Object.getPrototypeof(person) 访问。</em></p>\n<ol start=\"4\">\n<li>组合使用构造函数模式和原型模式（广泛使用的默认模式）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>= name</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">friends</span> = [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> zeus = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;zeus&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> boss = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;dione&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">zeus.<span class=\"property\">friends</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;atom&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">zeus.<span class=\"property\">friends</span> === [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>, <span class=\"string\">&#x27;atom&#x27;</span>]</span><br><span class=\"line\">boss.<span class=\"property\">friends</span> === [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>动态原型模式</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 想把原型声明封装在构造函数里面</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>= name</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">friends</span> = [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span>.<span class=\"property\">sayname</span> === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayName</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 可以继续定义其他原型方法</span></span><br><span class=\"line\">        <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">dating</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I love u&#x27;</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> zeus = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;zeus&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> boss = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;dione&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">zeus.<span class=\"property\">friends</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;atom&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">zeus.<span class=\"property\">friends</span> === [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>, <span class=\"string\">&#x27;atom&#x27;</span>]</span><br><span class=\"line\">boss.<span class=\"property\">friends</span> === [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p>面向对象有两种继承方式：接口继承和实现继承。ECMAScript 只支持实现继承，其实现继承主要依靠<strong>原型链</strong>来实现的。</p>\n<ol>\n<li><strong>原型链（文章重点）</strong></li>\n</ol>\n<p>继承的基本思想：利用原型（桥梁中介）让一个引用类型（子类）继承另一个引用类型（父类）的属性和方法。<br>\n继承的本质：重写覆盖引用类型的原型对象（prototype）。<br>\n继承的缺点：1. 会共享对象值的属性 2. 不能向超类型的构造函数传递参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Super</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">property</span> = <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Super</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getVal</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>,<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">property</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Sub</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">subProperty</span> = <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原型指向父类对象，继承了 Super</span></span><br><span class=\"line\"><span class=\"title class_\">Sub</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Super</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Sub</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">getSubVal</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>,<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">subProperty</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = <span class=\"keyword\">new</span> <span class=\"title class_\">Sub</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">instance.<span class=\"title function_\">getVal</span>() <span class=\"comment\">// getVal 是 Super 的原型方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有的引用类型都继承了 Object</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>借用构造函数（经典继承）</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Super</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">friends</span> = [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Super</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">dating</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I love u&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Sub</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 借调（call 或 apply）了超类型的构造函数，继承了 Super 的属性和方法（Super 中的 this 指向为 Sub）</span></span><br><span class=\"line\">    <span class=\"title class_\">Super</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> zeus = <span class=\"keyword\">new</span> <span class=\"title class_\">Sub</span>(<span class=\"string\">&#x27;zeus&#x27;</span>, <span class=\"number\">26</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> boss = <span class=\"keyword\">new</span> <span class=\"title class_\">Sub</span>(<span class=\"string\">&#x27;boss&#x27;</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">zeus.<span class=\"property\">friends</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;atom&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">zeus.<span class=\"property\">friends</span> === [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>, <span class=\"string\">&#x27;atom&#x27;</span>]</span><br><span class=\"line\">boss.<span class=\"property\">friends</span> === [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 每次创建对象，都会声明所有新的属性和方法，无法函数复用</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>组合继承（伪经典继承，常用模式）</li>\n</ol>\n<p>原理：使用<strong>原型链</strong>实现对原型（prototype）属性和方法的继承，借用<strong>构造函数</strong>实现对实例（instance）属性的继承。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Super</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">friends</span> = [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Super</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">dating</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I love u&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Sub</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 继承属性</span></span><br><span class=\"line\">    <span class=\"title class_\">Super</span>.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, name)</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承方法</span></span><br><span class=\"line\"><span class=\"title class_\">Sub</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Super</span>()</span><br><span class=\"line\"><span class=\"title class_\">Sub</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayAge</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">age</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> zeus = <span class=\"keyword\">new</span> <span class=\"title class_\">Sub</span>(<span class=\"string\">&#x27;zeus&#x27;</span>, <span class=\"number\">26</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> boss = <span class=\"keyword\">new</span> <span class=\"title class_\">Sub</span>(<span class=\"string\">&#x27;boss&#x27;</span>, <span class=\"number\">25</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">zeus.<span class=\"property\">friends</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&#x27;atom&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">zeus.<span class=\"property\">friends</span> === [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>, <span class=\"string\">&#x27;atom&#x27;</span>]</span><br><span class=\"line\">boss.<span class=\"property\">friends</span> === [<span class=\"string\">&#x27;dione&#x27;</span>, <span class=\"string\">&#x27;chloe&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// happy dating</span></span><br><span class=\"line\">zeus.<span class=\"property\">dating</span> === boss.<span class=\"property\">dating</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"扩展点\"><a href=\"#扩展点\" class=\"headerlink\" title=\"扩展点\"></a>扩展点</h4><ol>\n<li>new</li>\n</ol>\n<ul>\n<li>创建一个空对象，这个对象将作为执行 new 构造函数（）之后，之后返回的对象实例</li>\n<li>将上面创建的空对象的原型（__proto__），指向构造函数的 prototype 属性</li>\n<li>将上面创建的空对象赋值给构造函数内部的 this，并执行构造函数逻辑</li>\n<li>根据构造函数执行逻辑，返回第一步创建的对象或者构造函数的显式返回值</li>\n</ul>\n<ol start=\"2\">\n<li>Object.create</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Object.create 是继承中的原型式继承模式的规范写法</span></span><br><span class=\"line\"><span class=\"comment\">// 以一个对象作为基础，创建一个新对象</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">create</span>(<span class=\"params\">o</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">    F.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">F</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">create == <span class=\"title class_\">Object</span>.<span class=\"property\">create</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>Class(ES6)</li>\n</ol>\n<p>Class 只是语法糖，其语法与 JAVA 类的语法相似，更像面向对象编程。（JS 越来越像 JAVA 了）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6 的 class</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">dating</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;I love u&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// typeof Person === &#x27;function&#x27;，Person 实际上就是构造函数</span></span><br><span class=\"line\"><span class=\"comment\">// Person.prototype.constructor === Person</span></span><br><span class=\"line\"><span class=\"comment\">// class 的 methods 都是定义在 class 的 prototype 上</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>super: 调用父类的方法，this 指向子类或子类对象。</li>\n<li>static：类的静态方法。</li>\n<li>extends：类的继承。</li>\n<li>#： 私有属性。</li>\n<li>new.target: new 的声明对象。</li>\n</ul>\n<ol start=\"4\">\n<li>手写 call、apply 和 bind 函数</li>\n</ol>\n<p>两个关键点：</p>\n<ul>\n<li>不传入第一个参数，那么上下文默认为 window</li>\n<li>改变了 this 指向，让新的对象可以执行该函数，并能接受参数</li>\n</ul>\n<p>call 函数</p>\n<p>call() 方法使用一个指定的 this 值和单独给出的一个或多个参数来调用一个函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mycall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Error&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指定为 null 和 undefined 的 context 值会自动指向全局对象</span></span><br><span class=\"line\">    context = context || <span class=\"variable language_\">window</span></span><br><span class=\"line\">    context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = context.<span class=\"title function_\">fn</span>(...args)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实现分析</span></span><br><span class=\"line\"><span class=\"comment\">// 首先 context 为可选参数，如果不传的话默认上下文为 window</span></span><br><span class=\"line\"><span class=\"comment\">// 接下来给 context 创建一个 fn 属性，并将值设置为需要调用的函数</span></span><br><span class=\"line\"><span class=\"comment\">// 因为 call 可以传入多个参数作为调用函数的参数，所以需要将参数剥离出来</span></span><br><span class=\"line\"><span class=\"comment\">// 然后调用函数并将对象上的函数删除</span></span><br><span class=\"line\"><span class=\"comment\">// KEY：本质就是用传入的对象调用这个函数</span></span><br></pre></td></tr></table></figure>\n\n<p>apply 函数</p>\n<p>apply() 方法调用一个具有给定this值的函数，以及作为一个数组（或类似数组对象）提供的参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mycall</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Error&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指定为 null 和 undefined 的 context 值会自动指向全局对象</span></span><br><span class=\"line\">    context = context || <span class=\"variable language_\">window</span></span><br><span class=\"line\">    context.<span class=\"property\">fn</span> = <span class=\"variable language_\">this</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result</span><br><span class=\"line\">    <span class=\"comment\">// 处理参数和 call 有区别</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        result = context.<span class=\"title function_\">fn</span>(...<span class=\"variable language_\">arguments</span>[<span class=\"number\">1</span>])</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = context.<span class=\"title function_\">fn</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">delete</span> context.<span class=\"property\">fn</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>bind 函数</p>\n<p>bind()方法创建一个新的函数，在调用时设置this关键字为提供的值。并在调用新函数时，将给定参数列表作为原函数的参数序列的前若干项。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mybind</span> = <span class=\"keyword\">function</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span> !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TypeError</span>(<span class=\"string\">&#x27;Error&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> _this = <span class=\"variable language_\">this</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> args = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"comment\">// 返回一个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">F</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 因为返回了一个函数，我们可以 new F()，所以需要判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> F) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">_this</span>(...args, ...<span class=\"variable language_\">arguments</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> _this.<span class=\"title function_\">apply</span>(context, args.<span class=\"title function_\">concat</span>(...<span class=\"variable language_\">arguments</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bind 返回了一个函数，对于函数来说有两种方式调用，一种是直接调用，一种是通过 new 的方式，</span></span><br><span class=\"line\"><span class=\"comment\">// 对于直接调用来说，这里选择了 apply 的方式实现，但是对于参数需要注意以下情况：因为 bind 可以实现类似这样的代码 f.bind(obj, 1)(2)，所以我们需要将两边的参数拼接起来，于是就有了这样的实现 args.concat(...arguments)</span></span><br><span class=\"line\"><span class=\"comment\">// 最后来说通过 new 的方式，在之前的章节中我们学习过如何判断 this，对于 new 的情况来说，不会被任何方式改变 this，所以对于这种情况我们需要忽略传入的 this</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>参考文章：</p>\n<p>《Javascript高级程序设计》第六章：面向对象的程序设计 P138-P172</p>\n<p><a href=\"https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdd0d8e6fb9a04a044073fe\">手写 call、apply 及 bind 函数</a></p>\n","categories":["web"],"tags":["JavaScript"]},{"title":"JS：倒计时","url":"/2018/05/01/web-countdown/","content":"<p>实现一个简单的倒计时显示。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"倒计时设计\"><a href=\"#倒计时设计\" class=\"headerlink\" title=\"倒计时设计\"></a>倒计时设计</h3><h4 id=\"基础版\"><a href=\"#基础版\" class=\"headerlink\" title=\"基础版\"></a>基础版</h4><p>倒计时一般使用定时器 <em><strong>setInterval</strong></em> 函数，以 1000 毫秒（1 秒）为单位，定时更新倒计时剩余时间。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> seconds = <span class=\"number\">600</span>   <span class=\"comment\">// 10 分钟</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">secondsCounter</span>(<span class=\"params\">timer</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> counterInterval = <span class=\"built_in\">setInterval</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> seconds = timer - <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (seconds &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(counterInterval)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">showTimer</span>(seconds)</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"准确版\"><a href=\"#准确版\" class=\"headerlink\" title=\"准确版\"></a>准确版</h4><p>由于 <em><strong>setInterval</strong></em> 函数实际的延迟时间会长一点，所以每次在设置剩余时间可以通过 Date 对象，设备时间相对是准确的。</p>\n<h4 id=\"安全版\"><a href=\"#安全版\" class=\"headerlink\" title=\"安全版\"></a>安全版</h4><p>服务器时间</p>\n<h3 id=\"倒计时显示\"><a href=\"#倒计时显示\" class=\"headerlink\" title=\"倒计时显示\"></a>倒计时显示</h3><p>关于倒计时的显示，采取以秒为单位，一分钟 &#x3D; 60 秒，转换成 xx:xx 的显示形式。(注：显示逻辑要与倒计时解耦)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showTimer</span>(<span class=\"params\">timer</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> minutes = <span class=\"title function_\">formatTime</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">floor</span>(timer / <span class=\"number\">60</span>))</span><br><span class=\"line\">  <span class=\"keyword\">var</span> seconds = <span class=\"title function_\">formatTime</span>(timer % <span class=\"number\">60</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> minutes + <span class=\"string\">&#x27;:&#x27;</span> + seconds</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">formatTime</span>(<span class=\"params\">time</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> time &lt; <span class=\"number\">10</span> ? <span class=\"string\">&#x27;0&#x27;</span> + time : time</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["web"],"tags":["JavaScript"]},{"title":"HTTP：HTTP缓存的那些事","url":"/2017/06/30/http-cache/","content":"<blockquote>\n<p>重用已经获取的资源能够有效的提升网站与应用的性能。Web 缓存能够减少延迟与网络阻塞，进而减少显示某个资源所用的时间。借助 HTTP 缓存，Web 站点变得更具有响应性。</p>\n</blockquote>\n<p>引用自 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ\">MDN</a> 的一段话。</p>\n<span id=\"more\"></span>\n\n<hr>\n<p>划重点：1.0 的 <code>Expires</code>、1.1 的 <code>Cache-Control</code> 和协商缓存的两对<code>[Etag, If-None-Match]</code>、<code>[Last-Modified, If-Modified-Since]</code></p>\n<hr>\n<h2 id=\"HTTP缓存\"><a href=\"#HTTP缓存\" class=\"headerlink\" title=\"HTTP缓存\"></a>HTTP缓存</h2><p>缓存：① 是指<strong>代理服务器（from http）</strong> 或 <strong>客户端本地磁盘（from memory）</strong> 内保存的资源副本（拷贝），并在下次请求该资源时提供该资源副本的__技术__。② 当 web 缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载。</p>\n<p>作用：利用缓存可减少对源服务器的访问，因此节省了通信流量和通信时间。</p>\n<p>那问题来了：</p>\n<ul>\n<li>缓存的目标是什么?</li>\n<li>缓存的方法有哪些？</li>\n</ul>\n<h2 id=\"HTTP报文\"><a href=\"#HTTP报文\" class=\"headerlink\" title=\"HTTP报文\"></a>HTTP报文</h2><p>小插曲：在下一步介绍HTTP缓存之前，先做一下知识铺垫，简单介绍下HTTP报文。</p>\n<h3 id=\"报文概念\"><a href=\"#报文概念\" class=\"headerlink\" title=\"报文概念\"></a>报文概念</h3><p>HTTP报文就是浏览器和服务器间通信时发送及响应的数据块。</p>\n<h3 id=\"报文分类\"><a href=\"#报文分类\" class=\"headerlink\" title=\"报文分类\"></a>报文分类</h3><p>浏览器向服务器请求数据，发送请求（request）报文；</p>\n<p>服务器向浏览器返回数据，返回响应（response）报文。</p>\n<h3 id=\"报文构成\"><a href=\"#报文构成\" class=\"headerlink\" title=\"报文构成\"></a>报文构成</h3><p>报文信息主要分为两部分：</p>\n<p>1 Header：包含属性的__首部__，附加信息（cookie，缓存信息）与缓存相关的规则信息，均包含在header中。</p>\n<p>2 Body：包含数据的__主体__，HTTP请求真正想要传输的部分。</p>\n<p>小总结：缓存的内容是主体，缓存的方法在首部。</p>\n<h2 id=\"缓存操作的目标\"><a href=\"#缓存操作的目标\" class=\"headerlink\" title=\"缓存操作的目标\"></a>缓存操作的目标</h2><p>常见的HTTP缓存只能存储GET响应，缓存的关键主要包括 request method 和目标URI。</p>\n<p>普遍的缓存案例：</p>\n<ul>\n<li>一个检索请求的成功响应: 状态码：200，一个包含例如HTML文档，图片，或者文件的响应</li>\n<li>不变的重定向: 响应状态码：301</li>\n<li>错误响应: 响应状态码：404 的一个页面</li>\n<li>不完全的响应: 响应状态码 206，只返回局部的信息</li>\n<li>除了 GET 请求外，如果匹配到作为一个已被定义的cache键名的响应</li>\n</ul>\n<h2 id=\"缓存策略分类\"><a href=\"#缓存策略分类\" class=\"headerlink\" title=\"缓存策略分类\"></a>缓存策略分类</h2><p>在讲述如何控制缓存之前，先看看缓存策略大致有哪些类型。在已存在缓存数据的前提下，根据是否需要重新向服务器发起请求分类，这里主要分为__强制缓存__和__对比缓存__两大类。</p>\n<h3 id=\"强制缓存\"><a href=\"#强制缓存\" class=\"headerlink\" title=\"强制缓存\"></a>强制缓存</h3><p>强制缓存：如果缓存生效，则不需要再与服务器发生交互。</p>\n<p><img src=\"/images/http-cache/cache-force.png\" alt=\"cache-force\"></p>\n<h3 id=\"对比缓存\"><a href=\"#对比缓存\" class=\"headerlink\" title=\"对比缓存\"></a>对比缓存</h3><p>对比缓存：不管缓存是否生效，都需要与服务端发生交互。</p>\n<p><img src=\"/images/http-cache/cache-compair.png\" alt=\"cache-compair\"></p>\n<p>服务端在进行标识比较后，只返回header部分，通过状态码告知客户端使用缓存，不需要将报文主体部分返回客户端。</p>\n<p>小总结：两类缓存规则可以同时存在，强制缓存优先级高于对比缓存，也就是说，当执行强制缓存的规则时，如果缓存生效，直接使用缓存，不再执行对比缓存规则。</p>\n<h2 id=\"缓存控制策略\"><a href=\"#缓存控制策略\" class=\"headerlink\" title=\"缓存控制策略\"></a>缓存控制策略</h2><p>关键词：<code>Cache-Control</code> <code>Last-Modified|If-Modified-Since</code> <code>Etag|If-None-Match</code></p>\n<h3 id=\"Cache-Control头\"><a href=\"#Cache-Control头\" class=\"headerlink\" title=\"Cache-Control头\"></a>Cache-Control头</h3><p>HTTP&#x2F;1.1定义的 Cache-Control 头用来区分对缓存机制的支持情况，请求头和响应头都支持这个属性。通过它提供的不同的值来定义缓存策略。</p>\n<p><span style=\"color: red\">注意：在__请求__和__响应__报文的首部都支持 Cache-Control ，要学会区分 Cache-Control 的缓存策略是定义在请求还是响应。</span></p>\n<p><img src=\"/images/http-cache/cache-control-request.png\" alt=\"cache-control-request\"></p>\n<p><img src=\"/images/http-cache/cache-control-response.png\" alt=\"cache-control-response\"></p>\n<h4 id=\"控制可执行缓存的对象的指令\"><a href=\"#控制可执行缓存的对象的指令\" class=\"headerlink\" title=\"控制可执行缓存的对象的指令\"></a>控制可执行缓存的对象的指令</h4><h5 id=\"no-store指令（请求-响应）\"><a href=\"#no-store指令（请求-响应）\" class=\"headerlink\" title=\"no-store指令（请求&amp;响应）\"></a>no-store指令（请求&amp;响应）</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Cache</span>-<span class=\"title class_\">Control</span>：no-store</span><br></pre></td></tr></table></figure>\n\n<p>完全不支持缓存，所有内容不得缓存。一旦开启，强制缓存和对比缓存都不会生效。</p>\n<h4 id=\"表示是否能缓存的指令\"><a href=\"#表示是否能缓存的指令\" class=\"headerlink\" title=\"表示是否能缓存的指令\"></a>表示是否能缓存的指令</h4><h5 id=\"public指令（响应）\"><a href=\"#public指令（响应）\" class=\"headerlink\" title=\"public指令（响应）\"></a>public指令（响应）</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Cache</span>-<span class=\"title class_\">Control</span>：public</span><br></pre></td></tr></table></figure>\n\n<p>响应可以被任何请求来源缓存，客户端和服务器都可缓存。</p>\n<h5 id=\"private指令（响应）\"><a href=\"#private指令（响应）\" class=\"headerlink\" title=\"private指令（响应）\"></a>private指令（响应）</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Cache</span>-<span class=\"title class_\">Control</span>：private</span><br></pre></td></tr></table></figure>\n\n<p>响应只能被唯一的用户缓存，客户端可以缓存。</p>\n<h5 id=\"no-cache指令（请求-响应）—对比缓存\"><a href=\"#no-cache指令（请求-响应）—对比缓存\" class=\"headerlink\" title=\"no-cache指令（请求&amp;响应）—对比缓存\"></a>no-cache指令（请求&amp;响应）—对比缓存</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Cache</span>-<span class=\"title class_\">Control</span>：no-cache</span><br></pre></td></tr></table></figure>\n\n<p>在释放缓存服务器的缓存内容前向服务端源地址发送请求以验证缓存是否有效。使用 no-cache 指令的目的是为了防止从缓存中返回过期的资源。</p>\n<p>请求包含 no-cache：客户端将不会接收缓存过的响应，过程参照对比缓存。\n响应包含 no-cache：缓存服务器不能对资源进行缓存。</p>\n<h4 id=\"指定缓存期限和认证的指令\"><a href=\"#指定缓存期限和认证的指令\" class=\"headerlink\" title=\"指定缓存期限和认证的指令\"></a>指定缓存期限和认证的指令</h4><h5 id=\"max-age指令（请求-响应）—响应Date\"><a href=\"#max-age指令（请求-响应）—响应Date\" class=\"headerlink\" title=\"max-age指令（请求&amp;响应）—响应Date\"></a>max-age指令（请求&amp;响应）—响应Date</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Cache</span>-<span class=\"title class_\">Control</span>: max-age=<span class=\"number\">604800</span> <span class=\"comment\">// 一周</span></span><br></pre></td></tr></table></figure>\n\n<p>请求包含 max-age：缓存资源的缓存时间 &lt; max-age指定时间 ? 直接获取缓存资源 : 缓存服务器将请求转发给服务器。\n响应包含 max-age：响应的 must-revalidate 和 Expires 将失效，max-age指定时间 &#x3D; 资源缓存的期限。一旦超过时间，资源将从缓存服务器移除。</p>\n<h5 id=\"min-fresh指令（请求）\"><a href=\"#min-fresh指令（请求）\" class=\"headerlink\" title=\"min-fresh指令（请求）\"></a>min-fresh指令（请求）</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Cache</span>-<span class=\"title class_\">Control</span>: min-fresh=<span class=\"number\">60</span> <span class=\"comment\">// 一分钟</span></span><br></pre></td></tr></table></figure>\n\n<p>min-fresh指令：缓存资源的能缓存剩余时间(新鲜度) &gt; min-fresh指定时间 ? 直接获取缓存资源 : 缓存服务器将请求转发给服务器。</p>\n<h5 id=\"max-stale指令（请求）\"><a href=\"#max-stale指令（请求）\" class=\"headerlink\" title=\"max-stale指令（请求）\"></a>max-stale指令（请求）</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Cache</span>-<span class=\"title class_\">Control</span>: max-stale=<span class=\"number\">60</span> <span class=\"comment\">// 一分钟</span></span><br></pre></td></tr></table></figure>\n\n<p>max-stale指令：缓存资源的过期时间 &lt; max-stale指定时间 ? 直接获取缓存资源 : 缓存服务器将请求转发给服务器。</p>\n<h5 id=\"only-if-cached指令（请求）\"><a href=\"#only-if-cached指令（请求）\" class=\"headerlink\" title=\"only-if-cached指令（请求）\"></a>only-if-cached指令（请求）</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Cache</span>-<span class=\"title class_\">Control</span>: only-<span class=\"keyword\">if</span>-cached</span><br></pre></td></tr></table></figure>\n\n<p>only-if-cached指令：客户端仅在缓存服务器本地缓存目标资源的情况下才会要求返回。即缓存服务器有缓存就直接拿缓存，没缓存就访问源服务器。</p>\n<h5 id=\"must-revalidate指令（响应）—对比缓存\"><a href=\"#must-revalidate指令（响应）—对比缓存\" class=\"headerlink\" title=\"must-revalidate指令（响应）—对比缓存\"></a>must-revalidate指令（响应）—对比缓存</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Cache</span>-<span class=\"title class_\">Control</span>：must-revalidate</span><br></pre></td></tr></table></figure>\n\n<p>must-revalidate指令：代理会向源服务器再次验证即将返回的响应缓存目前是否仍然有效。同时会忽略请求的max-stale指令。</p>\n<h5 id=\"no-transform指令（请求-响应）\"><a href=\"#no-transform指令（请求-响应）\" class=\"headerlink\" title=\"no-transform指令（请求&amp;响应）\"></a>no-transform指令（请求&amp;响应）</h5><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Cache</span>-<span class=\"title class_\">Control</span>: no-transform</span><br></pre></td></tr></table></figure>\n\n<p>no-transform指令：缓存都不能改变实体主体的媒体类型，防止缓存或代理压缩图片等类似操作。</p>\n<h3 id=\"对比缓存-1\"><a href=\"#对比缓存-1\" class=\"headerlink\" title=\"对比缓存\"></a>对比缓存</h3><h4 id=\"Last-Modified（响应）-If-Modified-Since（请求）\"><a href=\"#Last-Modified（响应）-If-Modified-Since（请求）\" class=\"headerlink\" title=\"Last-Modified（响应）| If-Modified-Since（请求）\"></a>Last-Modified（响应）| If-Modified-Since（请求）</h4><ol>\n<li>Last-Modified：服务器在响应请求时，告诉浏览器资源的最后修改时间。</li>\n<li>If-Modified-Since：上一次请求资源的修改时间。</li>\n<li>Last-Modified &gt; If-Modified-Since ? 200重新访问资源 : 304使用缓存资源</li>\n</ol>\n<h4 id=\"Etag（响应）-If-None-Match（请求）\"><a href=\"#Etag（响应）-If-None-Match（请求）\" class=\"headerlink\" title=\"Etag（响应）| If-None-Match（请求）\"></a>Etag（响应）| If-None-Match（请求）</h4><ol>\n<li>Etag：服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定）。</li>\n<li>If-None-Match：再次请求服务器时，通过此字段通知服务器客户段缓存数据的唯一标识。</li>\n<li>Etag &#x3D;&#x3D;&#x3D; If-None-Match ? 304使用缓存资源 : 200重新访问资源</li>\n</ol>\n<p><strong>缓存优先级</strong>：<code>Cache-Control</code> &gt; <code>Expires</code> &gt; <code>ETag</code> &gt; <code>Last-Modified</code></p>\n<h2 id=\"缓存决策指南\"><a href=\"#缓存决策指南\" class=\"headerlink\" title=\"缓存决策指南\"></a>缓存决策指南</h2><p>源自于 Chrome 官方给出的缓存决策建议：</p>\n<p><img src=\"/images/http-cache/cache-order.png\" alt=\"cache-order\"></p>\n<ul>\n<li>当资源内容不可以复用时，直接设置 <code>Cache-Control</code> 为 <code>no-store</code>，拒绝一切形式的缓存</li>\n<li>假如每次都需要向服务器进行缓存有效确认时，设置 <code>Cache-Control</code> 为 <code>no-cache</code></li>\n<li>考虑是否可以被代理服务器缓存，是的话设置为 <code>public</code>，否的话则设置为 <code>private</code></li>\n<li>然后考虑资源的过期时间：配置 <code>max-age</code> 、<code>Etag</code>、<code>Last-Modified</code> 等参数</li>\n</ul>\n<p>参考文章：</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ\">MDN HTTP缓存</a></p>\n<p><a href=\"https://book.douban.com/subject/25863515/\">图解HTTP</a></p>\n<p><a href=\"http://www.cnblogs.com/chenqf/p/6386163.html\">彻底弄懂HTTP缓存机制及原理</a></p>\n<p><a href=\"http://www.tuicool.com/articles/zUZnUre\">彻底弄懂 HTTP 缓存机制</a></p>\n<p>掌握 HTTP 缓存——从请求到响应过程的一切（上）</p>\n<p>掌握 HTTP 缓存——从请求到响应过程的一切（下）</p>\n","categories":["web"],"tags":["HTTP"]},{"title":"WEB：我所理解的REST","url":"/2017/06/11/web-rest/","content":"<p>REST：REpresentational State Transfer，表现层状态转换，是浏览器和服务器通信方式的一种__设计风格__。\n <span id=\"more\"></span></p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>表现层状态转换 &#x3D; 表现层 + 状态转换。<br>\n表现层：其实指的就是“__资源__”的具体表现形式<br>\n状态转换：“__资源__”操作（动词）</p>\n<h3 id=\"核心\"><a href=\"#核心\" class=\"headerlink\" title=\"核心\"></a>核心</h3><p>核心概念：__资源__（REST 以资源为核心展开）</p>\n<ul>\n<li>互联网所有可以访问的内容，都是__资源__</li>\n<li>服务器保存__资源__，客户端请求__资源__</li>\n<li>同一个__资源__，有多种表现形式</li>\n<li>协议本身不带有状态，通信时客户端必须通过参数表示请求不同状态的__资源__</li>\n<li>状态转换通过 HTTP 动词表示</li>\n</ul>\n<h3 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h3><p>URL 是__资源__的唯一标识符。<br>\nURL 定位资源，用 HTTP 动词（GET, POST，PUT， DELETE）描述操作。<br>\nURL 只使用__名词__来指定资源，原则上不使用动词。</p>\n<p><img src=\"/images/web-rest/rest-transfer.png\" alt=\"boxModel\"></p>\n<h3 id=\"RESTful\"><a href=\"#RESTful\" class=\"headerlink\" title=\"RESTful\"></a>RESTful</h3><p>RESTful架构：符合 REST 风格的设计</p>\n","categories":["web"]},{"title":"CSS：Position Float Clear属性略解","url":"/2017/06/07/css-position/","content":"<p>在<a> CSS：Normal Flow 标准流布局 </a>一文中提及：想要让一个元素脱离标准的文档流，方法是让该元素成为定位元素或浮动元素。其相关 css 属性就是 position 和 float 属性，另外 clear 属性则可以清除之前浮动元素对该元素的影响。\n <span id=\"more\"></span>  </p>\n<p>本文将介绍 position &amp; float &amp; clear 属性及其之间的联系：<br>1 <a href=\"#position\">Position</a><br>2 <a href=\"#float\">Float</a><br>3 <a href=\"#floatAndPosition\">Float &amp;&amp; Position</a><br>4 <a href=\"#clear\">Clear</a></p>\n<h2 id=\"Position\"><a href=\"#Position\" class=\"headerlink\" title=\"Position\"></a><span id=\"position\">Position</span></h2><p>定位的整个想法是允许我们覆盖标准的文档流行为，以产生特殊的效果。position 属性的作用就是可以指定元素遵循特定类型的定位活动，而可以不处于标准流中。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: static | relative | absolute | fixed; <span class=\"comment\">/* 默认为static */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"静态定位-static\"><a href=\"#静态定位-static\" class=\"headerlink\" title=\"静态定位 static\"></a>静态定位 static</h3><p>静态定位是每个元素 position 属性的默认值，它只是意味着“将元素放入它在文档布局流中的正常位置”，也就是处于标准文档流中，不会有特殊行为，也没什么特别意义。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: static;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相对定位-relative\"><a href=\"#相对定位-relative\" class=\"headerlink\" title=\"相对定位 relative\"></a>相对定位 relative</h3><p>相对定位与静态定位相似，元素先放置在未添加定位时的位置，不同的是可以相对于其正常位置进行定位，修改其最终位置，包括使其与页面上的其他元素重叠。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>; <span class=\"attribute\">bottom</span>: <span class=\"number\">20px</span>; <span class=\"attribute\">left</span>: <span class=\"number\">30px</span>; <span class=\"attribute\">right</span>: <span class=\"number\">40px</span>; <span class=\"comment\">/* 可选 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>辅助属性：top | bottom | left | right<br>用于设置元素与其正常位置四周的距离，可以为负值。</p>\n<h3 id=\"绝对定位-absolute\"><a href=\"#绝对定位-absolute\" class=\"headerlink\" title=\"绝对定位 absolute\"></a>绝对定位 absolute</h3><p>不为元素在布局中预留空间位置，通过指定元素__相对于最近的非 static 定位祖先元素__的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margin），且不会与其他边距合并，也就是不会出现外边距塌陷（margin-collapsing）的情况。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>; <span class=\"attribute\">bottom</span>: <span class=\"number\">20px</span>; <span class=\"attribute\">left</span>: <span class=\"number\">30px</span>; <span class=\"attribute\">right</span>: <span class=\"number\">40px</span>; <span class=\"comment\">/* 可选 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>定位上下文：最近的非 static 定位祖先元素。</p>\n</blockquote>\n<p>那么，如果其祖先元素都为 static 元素又怎么定位呢？</p>\n<h3 id=\"固定定位-fixed\"><a href=\"#固定定位-fixed\" class=\"headerlink\" title=\"固定定位 fixed\"></a>固定定位 fixed</h3><p>fixed 和 absolute 相似：\n1 使元素脱离正常文档流，不占据布局空间；<br>2 默认会覆盖在非定位元素上；\n区别是 absolute 的“根元素”是可以被设置的，而 fixed 则其“根元素”固定为__浏览器窗口(viewport)__ ，当滚动网页时，其元素与浏览器窗口之间的位置距离是恒定不变的。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>小插曲：z-index属性用于指定元素重叠时的显示位置，值越大，显示就在越上层。</p>\n<blockquote>\n<p>其实使元素脱离正常文档流的属性值只有 absolute | fixed，static | relative 元素仍处于正常文档流中。</p>\n</blockquote>\n<h2 id=\"Float\"><a href=\"#Float\" class=\"headerlink\" title=\"Float\"></a><span id=\"float\">Float</span></h2><p>要么向左，要么向右，要么正常。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left | right | none; <span class=\"comment\">/* 默认为none */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>浮动元素是 float 属性值不是 none 的元素。</p>\n</blockquote>\n<ul>\n<li>只有横向浮动，没有纵向浮动</li>\n<li>设置 float 属性后，将脱离标准流，其容器元素将得不到脱离标准流的子元素高度。</li>\n<li>会让元素的 display 属性变更为 block</li>\n<li>浮动元素的后一个元素会围绕浮动元素（典型：文字围绕图片）</li>\n<li>浮动元素的前一个元素不会收到任何影响</li>\n</ul>\n<h2 id=\"Float-Position\"><a href=\"#Float-Position\" class=\"headerlink\" title=\"Float &amp;&amp; Position\"></a><span id=\"floatAndPosition\">Float &amp;&amp; Position</span></h2><p>当 float 遇上 position，又会有什么意想不到的火花呢？</p>\n<h3 id=\"float-position-relative\"><a href=\"#float-position-relative\" class=\"headerlink\" title=\"float &amp; position: relative\"></a>float &amp; position: relative</h3><p>元素同时应用了 position：relative 和 float 属性后，元素先会浮动到相应的位置，再根据 top | bottom | left | right 所设置的距离发生偏移。</p>\n<blockquote>\n<p>先浮动后定位</p>\n</blockquote>\n<h3 id=\"float-position：absolute\"><a href=\"#float-position：absolute\" class=\"headerlink\" title=\"float &amp; position：absolute\"></a>float &amp; position：absolute</h3><p>元素同时应用了 position：absolute 和 float 属性后，__则 float 属性会失效__。</p>\n<h3 id=\"float-vs-position\"><a href=\"#float-vs-position\" class=\"headerlink\" title=\"float vs position\"></a>float vs position</h3><p>前面的元素应用了 position 之后会覆盖接下来应用  float 的元素（假如两个元素位置发生了重叠）.</p>\n<blockquote>\n<p>如果你不将 float 的元素的 position 设置成 relative 的话，你想通过设置 float 元素的 z-index 来的达到覆盖 position:absolute 是无效的。同理， float 元素下面存在 position: absolute 的子元素，如果你不将 float 的元素的 position 设置成 relative 的话，absolute 元素是不会定位到 float 元素的。</p>\n</blockquote>\n<h2 id=\"Clear\"><a href=\"#Clear\" class=\"headerlink\" title=\"Clear\"></a><span id=\"clear\">Clear</span></h2><p>clear 属性指定一个元素是否可以在它之前的浮动元素旁边，或者必须向下移动（清除浮动）在它下面。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: none | left | right | both; <span class=\"comment\">/* 默认为none */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>none: 元素不会向下移动清除之前的浮动。<br>left: 元素被向下移动用于清除之前的左浮动。<br>right: 元素被向下移动用于清除之前的右浮动。<br>both: 元素被向下移动用于清除之前的左右浮动。</p>\n<blockquote>\n<p>总结：设置 clear 属性只是设置自身会不会受前面的浮动元素的影响，而不会影响其他元素的布局。如果需要清除浮动，一般设置 clear：both 就解决问题了。</p>\n</blockquote>\n","categories":["web"],"tags":["CSS"]},{"title":"CSS：Normal Flow 标准流布局","url":"/2017/05/24/css-normalflow/","content":"<p>标准流：其实就是网页默认的元素排列方式，是指不使用其他的与__排列和定位__相关的__特殊CSS规则__时，网页各元素的排列规则。</p>\n<span id=\"more\"></span>\n<blockquote>\n<p>在标准流中，<strong>块级元素</strong> 在水平方向上会自动伸展，直到包含它的元素的边界，垂直方向上和兄弟元素依次排列，<strong>行级元素</strong> 则在水平方向上与兄弟元素依次排列。其元素的float属性默认为none，也就是标准流通常的情况。</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此，想要让一个元素不处于标准流中，方法可以是让该元素成为__浮动元素__或__定位元素__，也就是上文提及的__特殊CSS规则__。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left | right;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute | fixed;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p>本文将主要介绍以下两部分：<br>一 <a href=\"#boxModel\">盒模型</a><br>二 <a href=\"#marginCollapsing\">外边距合并</a></p>\n<hr>\n<h3 id=\"盒模型-Box-Model\"><a href=\"#盒模型-Box-Model\" class=\"headerlink\" title=\"盒模型 Box Model\"></a>盒模型 Box Model</h3><p>在一个文档中，每个元素都被表示为一个矩形的盒子。在CSS中，则使用标准盒模型来描述这些矩形盒子。<br>这个模型描述了元素所占空间的内容。每个盒子有四个边：__外边距边__，__边框边__，__内填充边__与__内容边__。</p>\n<p><img src=\"/images/css-normalflow/box-model.png\" alt=\"box-model\"></p>\n<p>其中元素的 <strong>box-sizing</strong> 属性决定了该元素宽度和高度的计算方式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: content-box; <span class=\"comment\">/* box-sizing默认值 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>计算公式：<br>width &#x3D; 内容width；<br>height &#x3D; 内容height。  </p>\n<blockquote>\n<p>注意：元素的宽度和高度都不包含内容的边框(border)和内边距(padding)。</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  -moz-<span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>计算公式：<br>width &#x3D; border + padding + 内容width；<br>height &#x3D; border + padding + 内容height。</p>\n<h3 id=\"外边距合并-Margin-Collapsing\"><a href=\"#外边距合并-Margin-Collapsing\" class=\"headerlink\" title=\"外边距合并 Margin Collapsing\"></a>外边距合并 Margin Collapsing</h3><p>标准流布局中，块元素的顶部外边距和底部外边距在特殊情况时会被组合（折叠）为单个外边距，其大小是组合到其中的最大外边距，这种布局行为称为外边距塌陷(margin collapsing)，也译为外边距合并。<br>出现外边距合并的三种基本情况：</p>\n<h4 id=\"相邻的兄弟块级元素\"><a href=\"#相邻的兄弟块级元素\" class=\"headerlink\" title=\"相邻的兄弟块级元素\"></a>相邻的兄弟块级元素</h4><p>毗邻的两个兄弟块级元素之间的外边距会出现合并。<br>即：上下两个盒子之间的距离，不是上盒子的 margin-bottom 与下盒子的 margin-top 之和，而是两者中的较大者。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* CSS */</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.top</span> &#123; <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">30px</span>; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.bottom</span> &#123;<span class=\"attribute\">margin-top</span>: <span class=\"number\">20px</span>; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">/* HTML */</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;top&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bottom&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/css-normalflow/css-margin-1.png\" alt=\"css-margin-1\"></p>\n<h4 id=\"块级父元素与其第一个／最后一个子元素\"><a href=\"#块级父元素与其第一个／最后一个子元素\" class=\"headerlink\" title=\"块级父元素与其第一个／最后一个子元素\"></a>块级父元素与其第一个／最后一个子元素</h4><p>如果块级元素中，不存在 <strong>padding-top</strong> | <strong>border-top</strong> | <strong>inline content</strong> | <strong>清除浮动</strong> 这四个属性，那么这个块级元素和其第一个子元素就会发生上边距合并现象。  </p>\n<blockquote>\n<p>上边距合并：子元素的 margin-top 不起作用，父元素的 margin-top 直接变成父元素和其第一个子元素的 margin-top 的较大者。  </p>\n</blockquote>\n<p>类似，块级父元素的 margin-bottom 与最后一个子元素的 margin-bottom 也会在特定情况发生下边距合并现象。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">/* CSS */</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.father</span> &#123; <span class=\"attribute\">margin-top</span>: <span class=\"number\">30px</span>; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.son</span> &#123; <span class=\"attribute\">margin-top</span>: <span class=\"number\">50px</span>; &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">/* HTML */</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;father&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;son&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/css-normalflow/css-margin-2.png\" alt=\"css-margin-2\"></p>\n<h4 id=\"空块元素\"><a href=\"#空块元素\" class=\"headerlink\" title=\"空块元素\"></a>空块元素</h4><p>如果存在一个空的块级元素，其 border | padding | inline-content | height | min-height 都不存在时，此时元素的上下边距中间没有任何间隔，该元素上下边距 margin-top 与 margin-bottom 将会合并。</p>\n","categories":["web"],"tags":["CSS"]},{"title":"CSS3：Flex Box 弹性盒子模型","url":"/2017/05/22/css-flexbox/","content":"<p>Flex Box：弹性盒子模型，是CSS3的一种新的布局模式。习惯上称之为flex布局，也就是弹性布局。顾名思义，当页面适应不同的屏幕大小以及设备类型时确保布局内的元素仍拥有恰当的行为。其目的是提供一种更加有效的方式对一个容器中的子元素进行排列、对齐和分配空白空间。</p>\n<span id=\"more\"></span>\n\n<hr>\n<h3 id=\"Flex-Box-弹性盒子\"><a href=\"#Flex-Box-弹性盒子\" class=\"headerlink\" title=\"Flex Box 弹性盒子\"></a>Flex Box 弹性盒子</h3><p>任何一个容器(元素)都可以指定为Flex布局，对于弹性盒子的介绍主要为：</p>\n<ul>\n<li>弹性盒子(Flex Box)由__弹性容器__(Flex Container)和__弹性子元素__(Flex Item)组成。</li>\n<li>弹性容器通过设置display属性的值为flex或inline-flex将其定义为弹性容器。</li>\n<li>弹性容器包含一个或多个弹性子元素。</li>\n</ul>\n<blockquote>\n<p>注意：弹性盒子只定义了弹性子元素如何在弹性容器中布局，弹性容器外及弹性子元素内是正常渲染的，</p>\n</blockquote>\n<h3 id=\"Flex-Container-弹性容器\"><a href=\"#Flex-Container-弹性容器\" class=\"headerlink\" title=\"Flex Container 弹性容器\"></a>Flex Container 弹性容器</h3><p>容器也就是用来包裹子元素的父级元素，只要该元素的display属性声明为flex或inline-flex就成为__弹性容器__了。\n设置为 flex 的容器被渲染为块级元素：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>设置为 inline-flex 的容器则渲染为行内元素：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">display</span>: inline-flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Webkit内核的浏览器，必须加上-webkit前缀:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex; <span class=\"comment\">/* Safari */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>容器的6个可用属性设置（可选）:</p>\n<ul>\n<li>flex-direction</li>\n<li>flex-wrap</li>\n<li>flex-flow</li>\n<li>justify-content</li>\n<li>align-items</li>\n<li>align-content</li>\n</ul>\n<h4 id=\"flex-direction属性\"><a href=\"#flex-direction属性\" class=\"headerlink\" title=\"flex-direction属性\"></a>flex-direction属性</h4><p>flex-direction属性指定了弹性子元素在父容器中的排列方向。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"flex-wrap属性\"><a href=\"#flex-wrap属性\" class=\"headerlink\" title=\"flex-wrap属性\"></a>flex-wrap属性</h4><p>flex-wrap属性指定弹性盒子的子元素换行方式。默认情况下，项目都排在一条线（主轴线）。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"flex-flow属性\"><a href=\"#flex-flow属性\" class=\"headerlink\" title=\"flex-flow属性\"></a>flex-flow属性</h4><p>flex-flow 属性是 flex-direction 和 flex-wrap 属性的复合属性。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"justify-content属性\"><a href=\"#justify-content属性\" class=\"headerlink\" title=\"justify-content属性\"></a>justify-content属性</h4><p>justify-content属性指定子元素在主轴上的对齐方式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"align-items属性\"><a href=\"#align-items属性\" class=\"headerlink\" title=\"align-items属性\"></a>align-items属性</h4><p>align-items属性指定子元素在交叉轴上的对齐方式。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"align-content属性\"><a href=\"#align-content属性\" class=\"headerlink\" title=\"align-content属性\"></a>align-content属性</h4><p>align-content属性定义了多根轴线（多行排列）的对齐方式。如果子元素排列只有一根轴线，该属性不起作用。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Flex-Item-弹性元素\"><a href=\"#Flex-Item-弹性元素\" class=\"headerlink\" title=\"Flex Item 弹性元素\"></a>Flex Item 弹性元素</h3><p>各个子元素存在于声明为flex或inline-flex的父级容器中。\n元素的6个可用属性设置（可选）：</p>\n<ul>\n<li>order</li>\n<li>flex-grow</li>\n<li>flex-shrink</li>\n<li>flex-basis</li>\n<li>flex</li>\n<li>align-self</li>\n</ul>\n<h4 id=\"order属性\"><a href=\"#order属性\" class=\"headerlink\" title=\"order属性\"></a>order属性</h4><p>order属性指定项目的排列顺序。数值越小，排列越靠前，默认为0，可以为负数。类似于z-index.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">order</span>: &lt;integer&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"flex-grow属性\"><a href=\"#flex-grow属性\" class=\"headerlink\" title=\"flex-grow属性\"></a>flex-grow属性</h4><p>flex-grow属性定义项目的扩展比率，默认为0，即如果存在剩余空间，也不放大。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-grow</span>: &lt;number&gt;; <span class=\"comment\">/* default 0 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"flex-shrink属性\"><a href=\"#flex-shrink属性\" class=\"headerlink\" title=\"flex-shrink属性\"></a>flex-shrink属性</h4><p>flex-shrink属性定义了项目的收缩比率，默认为1，负值对该属性无效。即如果空间不足，该项目将缩小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-shrink</span>: &lt;number&gt;; <span class=\"comment\">/* default 1 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"flex-basis属性\"><a href=\"#flex-basis属性\" class=\"headerlink\" title=\"flex-basis属性\"></a>flex-basis属性</h4><p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-basis</span>: &lt;length&gt; | auto; <span class=\"comment\">/* default auto */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"flex属性\"><a href=\"#flex属性\" class=\"headerlink\" title=\"flex属性\"></a>flex属性</h4><p>flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex</span>: none | [ &lt;<span class=\"string\">&#x27;flex-grow&#x27;</span>&gt; ||  &lt;<span class=\"string\">&#x27;flex-shrink&#x27;</span>&gt; || &lt;<span class=\"string\">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"align-self属性\"><a href=\"#align-self属性\" class=\"headerlink\" title=\"align-self属性\"></a>align-self属性</h4><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["web"],"tags":["CSS","LAYOUT"]},{"title":"前端学习目标","url":"/2017/05/10/web-roadMap/","content":"<p>偶然在 GitHub 看到的一个关于前端开发者的成长路线，记录下来，以此自勉。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"/images/web-roadMap/2022.png\" alt=\"2021-road-map\"></p>\n<center>\n本图片转载自 2022 [kamranahmedse](https://roadmap.sh/frontend)\n</center>\n\n<hr>\n<p><img src=\"/images/web-roadMap/2021.png\" alt=\"2021-road-map\"></p>\n<center>\n本图片转载自 2021 [kamranahmedse](https://github.com/kamranahmedse/developer-roadmap)\n</center>\n\n<hr>\n<p><img src=\"/images/web-roadMap/2019.png\" alt=\"2019-road-map\"></p>\n<center>\n本图片转载自 2019 [kamranahmedse](https://github.com/kamranahmedse/developer-roadmap)\n</center>\n\n<hr>\n<p><img src=\"/images/web-roadMap/2017.png\" alt=\"2017-road-map\"></p>\n<center>\n本图片转载自 2017 [kamranahmedse](https://github.com/kamranahmedse/developer-roadmap)\n</center>","categories":["web"]}]